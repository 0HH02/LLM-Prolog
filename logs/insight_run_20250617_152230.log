
======================================================================
PROCESANDO PROBLEMA: "
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas,..."
======================================================================
INFO: Historial del LLM cargado: checkpoints/llm_history_
____Recordamos_que_Bellini_siempre_ponía_a_sus_co_20250617_151333.pkl

--- Ejecutando MFSA ---

--- Iniciando Formalización Semántica y Axiomatización (MFSA) ---
Descripción del Problema (NL): 
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas, mientras que Cellini siempre les ponía inscripciones falsas.En algunos museos podemos ver parejas de cofres —uno de oro y otro de plata— que en un principio se hicieron y se vendieron como juego. La verdad es que la familia Bellini y la Cellini eran íntimas y que a veces colaboraban en algunas de estas parejas; aunque cada cofre lo hiciera siempre una sola persona, dentro de la pareja un cofre podía hacerlo uno y el otro otro diferente. Ambas familias se divertían muchísimo haciendo estas parejas de manera que la inteligente posteridad pudiera adivinar —o adivinar parcialmente— quiénes habían sido los autores.  Habían aparecido cuatro cofres, dos de oro y dos de plata; se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja. Me los enseñaron y pronto pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra (que consistía, entre otras cosas, en una excelente caja de botellas de Chianti) y un beso de una de las florentinas más maravillosas que haya existido nunca He aquí los cuatro cofres:
    Cofre A (Oro)
    EL COFRE DE PLATA ES OBRA DE UN CELLINI
    Cofre B (Plata)
    EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON
    DE BELLINI
    Cofre C (Oro)
    EL COFRE DE ORO ES OBRA DE UN BELLINI
    Cofre D (Plata)
    EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE
    ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI

    Tenemos ahora un problema:
    ¿Quién hizo cada uno de los cofres?
    


-------------------------------------------------------------------

--- Pregunta a Gemini JSON (initial_analysis_
____recordamos_que_) ---
Prompt: 
        Hola, necesito tu ayuda para analizar y resolver un problema de lógica de manera sistemática. Por favor, sigue los siguientes pasos:

        1. Entendimiento del Problema: 
        - Responde a las siguientes preguntas. ¿De qué trata? ¿Quiénes son los personajes? ¿Cuáles son los objetos o variables?

        2. Identificar y Aislar la Pregunta
        - Encuentra la pregunta principal que debes responder y sepárala del resto del texto.

        3. Busca las Afirmaciones (El corazón del proceso)
        - Busca cada frase que declare un hecho. Pregúntate: "¿Esta oración me está dando una pieza de información sólida e incuestionable?"
        - Cada afirmación debe ser una ley inmutable dentro del mundo del problema.
        - Las premisas a menudo vienen en frases complejas. Tu trabajo es traducirlas a un lenguaje lógico y simple.
            Frase original: "sEl coche rojo, que fue comprado después que el coche de Juan, no pertenece a María."
            Premisas extraídas y simplificadas:
            Hay un coche rojo.
            El coche rojo se compró después del coche de Juan.
            El coche rojo no es de María.
        - Ciertas palabras suelen introducir premisas, mientras que otras suelen introducir conclusiones.
            Típicas de PREMISAS: Dado que..., Sabiendo que..., Se asume que..., Es un hecho que..., Porque..., Puesto que...
            Típicas de CONCLUSIONES (¡No son premisas!): Por lo tanto..., En consecuencia..., Así que..., Se deduce que..., Se concluye que...
        - El Principio del "Mundo Cerrado": La única información que existe es la que te dan las premisas. Si no se menciona, no existe o no se puede asumir. Si el problema habla de perros y gatos, no puedes asumir que también hay un loro solo porque sería interesante. ¡No agregues información!
        - Maneja las Negaciones y las Condicionales: Presta especial atención a las frases negativas y a las que usan "si..., entonces...". Son premisas muy poderosas.
            "Ana no tiene el sombrero azul." es una premisa tan fuerte como "Ana tiene el sombrero rojo".
            "Si llueve, entonces la calle se moja." es una sola premisa (una regla condicional). No la separes. Establece una relación directa entre dos eventos.

        A continuación, te presento el problema de lógica:
        
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas, mientras que Cellini siempre les ponía inscripciones falsas.En algunos museos podemos ver parejas de cofres —uno de oro y otro de plata— que en un principio se hicieron y se vendieron como juego. La verdad es que la familia Bellini y la Cellini eran íntimas y que a veces colaboraban en algunas de estas parejas; aunque cada cofre lo hiciera siempre una sola persona, dentro de la pareja un cofre podía hacerlo uno y el otro otro diferente. Ambas familias se divertían muchísimo haciendo estas parejas de manera que la inteligente posteridad pudiera adivinar —o adivinar parcialmente— quiénes habían sido los autores.  Habían aparecido cuatro cofres, dos de oro y dos de plata; se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja. Me los enseñaron y pronto pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra (que consistía, entre otras cosas, en una excelente caja de botellas de Chianti) y un beso de una de las florentinas más maravillosas que haya existido nunca He aquí los cuatro cofres:
    Cofre A (Oro)
    EL COFRE DE PLATA ES OBRA DE UN CELLINI
    Cofre B (Plata)
    EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON
    DE BELLINI
    Cofre C (Oro)
    EL COFRE DE ORO ES OBRA DE UN BELLINI
    Cofre D (Plata)
    EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE
    ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI

    Tenemos ahora un problema:
    ¿Quién hizo cada uno de los cofres?
    
        

-------------------------------------------------------------------

-------------------------------------------------------------------
Respuesta JSON de Gemini: {
  "general_description": "The problem is a logic puzzle involving four ancient chests (two gold, two silver) created by two families, Bellini and Cellini. Bellini always writes true inscriptions, while Cellini always writes false ones. The chests were originally in two gold-silver pairs, but the pairings are mixed. The goal is to determine the creator (Bellini or Cellini) of each individual chest based on the inscriptions and the rules.",
  "objetive": "¿Quién hizo cada uno de los cofres?",
  "premises": [
    "There are four chests: Cofre A (Gold), Cofre B (Silver), Cofre C (Gold), Cofre D (Silver).",
    "The chests were made by either Bellini or Cellini.",
    "If a chest was made by Bellini, its inscription is true.",
    "If a chest was made by Cellini, its inscription is false.",
    "The four chests constitute exactly two pairs.",
    "Each pair consists of one gold chest and one silver chest.",
    "The original pairings of the chests are unknown.",
    "Cofre A's inscription states: \"The silver chest paired with Cofre A was made by Cellini.\"",
    "Cofre B's inscription states: \"Cofre B was made by Cellini OR both Cofre B and its paired gold chest were made by Bellini.\"",
    "Cofre C's inscription states: \"Cofre C was made by Bellini.\"",
    "Cofre D's inscription states: \"The gold chest paired with Cofre D was made by Bellini.\""
  ]
}

-------------------------------------------------------------------


===Premisas encontradas===
There are four chests: Cofre A (Gold), Cofre B (Silver), Cofre C (Gold), Cofre D (Silver).
The chests were made by either Bellini or Cellini.
If a chest was made by Bellini, its inscription is true.
If a chest was made by Cellini, its inscription is false.
The four chests constitute exactly two pairs.
Each pair consists of one gold chest and one silver chest.
The original pairings of the chests are unknown.
Cofre A's inscription states: "The silver chest paired with Cofre A was made by Cellini."
Cofre B's inscription states: "Cofre B was made by Cellini OR both Cofre B and its paired gold chest were made by Bellini."
Cofre C's inscription states: "Cofre C was made by Bellini."
Cofre D's inscription states: "The gold chest paired with Cofre D was made by Bellini."
Estas son las premisas que he encontrado. Si crees que me he saltado algunas puedes comentármelas si no presiona enter para continuarContinuando...


-------------------------------------------------------------------

--- Pregunta a Gemini JSON (nl_to_prolog_
____recordamos_que_) ---
Prompt: 
        Como experto en lógica tienes que solucionar el siguiente problema:
        
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas, mientras que Cellini siempre les ponía inscripciones falsas.En algunos museos podemos ver parejas de cofres —uno de oro y otro de plata— que en un principio se hicieron y se vendieron como juego. La verdad es que la familia Bellini y la Cellini eran íntimas y que a veces colaboraban en algunas de estas parejas; aunque cada cofre lo hiciera siempre una sola persona, dentro de la pareja un cofre podía hacerlo uno y el otro otro diferente. Ambas familias se divertían muchísimo haciendo estas parejas de manera que la inteligente posteridad pudiera adivinar —o adivinar parcialmente— quiénes habían sido los autores.  Habían aparecido cuatro cofres, dos de oro y dos de plata; se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja. Me los enseñaron y pronto pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra (que consistía, entre otras cosas, en una excelente caja de botellas de Chianti) y un beso de una de las florentinas más maravillosas que haya existido nunca He aquí los cuatro cofres:
    Cofre A (Oro)
    EL COFRE DE PLATA ES OBRA DE UN CELLINI
    Cofre B (Plata)
    EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON
    DE BELLINI
    Cofre C (Oro)
    EL COFRE DE ORO ES OBRA DE UN BELLINI
    Cofre D (Plata)
    EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE
    ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI

    Tenemos ahora un problema:
    ¿Quién hizo cada uno de los cofres?
    

        Análisis previo:
        The problem is a logic puzzle involving four ancient chests (two gold, two silver) created by two families, Bellini and Cellini. Bellini always writes true inscriptions, while Cellini always writes false ones. The chests were originally in two gold-silver pairs, but the pairings are mixed. The goal is to determine the creator (Bellini or Cellini) of each individual chest based on the inscriptions and the rules.

        A continuación, te presento las premisas que usarás:
        There are four chests: Cofre A (Gold), Cofre B (Silver), Cofre C (Gold), Cofre D (Silver).
The chests were made by either Bellini or Cellini.
If a chest was made by Bellini, its inscription is true.
If a chest was made by Cellini, its inscription is false.
The four chests constitute exactly two pairs.
Each pair consists of one gold chest and one silver chest.
The original pairings of the chests are unknown.
Cofre A's inscription states: "The silver chest paired with Cofre A was made by Cellini."
Cofre B's inscription states: "Cofre B was made by Cellini OR both Cofre B and its paired gold chest were made by Bellini."
Cofre C's inscription states: "Cofre C was made by Bellini."
Cofre D's inscription states: "The gold chest paired with Cofre D was made by Bellini."
Aclaración del Usuario: 

        Para ello sigue estas instrucciones:
        1. Análisis e Inferencia Preliminar:
        - Basándote en la información organizada, realiza inferencias lógicas paso a paso. Elimina posibilidades o deduce nuevos hechos. Si es aplicable, actualiza tu representación de la información con cada nueva inferencia hasta que se clarifiquen las relaciones.
        
        2. Hipótesis de Solución:
        - A partir de tu análisis e inferencias, propón una hipótesis clara sobre cuál es la solución al problema de lógica.
        
        3. Comprobación Formal con Prolog:
        - Transforma cada premisa en una o más sentencias de prolog, de forma que cada una esté asociada con alguna sentencia.
        - Intenta que las sentencias de prolog sean lo más parecida a la premisa que modela.
        - Cada cláusula y cada palabra conectiva ("y", "o", "si") debe ser representada con total fidelidad en tu código, sin simplificaciones ni interpretaciones que alteren su significado estricto.
        - Vas a crear un programa en Prolog (hechos y reglas) basado en tu hipótesis de solución y las pistas originales. Este programa debe ser capaz de demostrar la validez de tu hipótesis a través de consultas.
        - Identifica y codifica primero las reglas globales que rigen el comportamiento de todos los agentes del sistema, pues estas definen el marco en el que se deben evaluar sus acciones individuales.
        - Modela cada pieza de evidencia o declaración de forma atómica y fiel a su descripción original, evitando crear relaciones o dependencias artificiales entre componentes que el problema no vincula explícitamente.
        - Garantiza una correspondencia precisa entre las entidades del problema y las variables de tu código, validando que el contexto de cada regla solo afecte a las variables que le conciernen directamente.
        - Esto es sumamente importante: La corrección semántica y sintáctica del programa Prolog es crucial, ya que la verdad de tu hipótesis se deduce de la capacidad del programa para probarla. Asegúrate de que el código esté bien escrito y refleje lógicamente el problema y tu solución propuesta.
        - Para modelar implicaciones lógicas en Prolog de forma declarativa, usa la negación para expresar que no puede darse el caso de que el antecedente sea cierto y el consecuente falso.
        - Comenta el resultado esperado del programa pero nunca hables como si ya se hubiera ejecutado.
        

-------------------------------------------------------------------

-------------------------------------------------------------------
Respuesta JSON de Gemini: {
  "preview_analysis": "The problem involves four chests (two gold, two silver) created by Bellini (truth-teller) or Cellini (liar). They form two gold-silver pairs, whose composition is unknown. The goal is to determine the maker of each chest based on its inscription and the maker's rule. A key is deducing which interpretation of ambiguous phrases like 'EL COFRE DE ORO' is intended to make the puzzle uniquely solvable.",
  "hypothetical_solution": "Based on logical deduction and finding the interpretation that yields a consistent solution, the most probable solution is: Cofre A was made by Cellini, and Cofres B, C, and D were made by Bellini. The pairing is likely (Cofre C, Cofre B) and (Cofre A, Cofre D). This requires specific interpretations of the inscriptions, particularly 'EL COFRE DE ORO ES OBRA DE UN BELLINI' on chests C and D, meaning 'Exactly one gold chest is by Bellini'.",
  "output_desired": "A Prolog program that defines the problem constraints and inscriptions based on the inferred interpretations, and a query that finds the maker of each chest and the pairing of the chests. The program should output the assignment of makers to chests and the chest pairings.",
  "prolog_code": "% Define possible makers\nmaker_type(bellini).\nmaker_type(cellini).\n\n% Define chest types\ngold(a).\ngold(c).\nsilver(b).\nsilver(d).\n\n% Define possible maker assignments (all 16 combinations)\npossible_makers(Makers) :-\n    Makers = [maker(a, Ma), maker(b, Mb), maker(c, Mc), maker(d, Md)],\n    maker_type(Ma), maker_type(Mb), maker_type(Mc), maker_type(Md).\n\n% Define possible pairings (2 combinations)\npossible_pairing(Pairing) :-\n    (Pairing = [pair(a,b), pair(c,d)]) ; (Pairing = [pair(a,d), pair(c,b)]).\n\n% Helper to find the chest paired with X in a given Pairing\nis_paired((X, Y), Pairing) :-\n    member(pair(X, Y), Pairing) ;\n    member(pair(Y, X), Pairing).\n\n% Statement A: \"The silver chest paired with Cofre A is by Cellini.\"\n% Interpretation: Refers to its paired silver chest.\nstmt_a(Makers, Pairing) :-\n    is_paired((a, SilverA), Pairing), % Find SilverA paired with a\n    member(maker(SilverA, cellini), Makers).\n\n% Statement B: \"Cofre B is by Cellini OR both Cofre B and its paired gold chest are by Bellini.\"\n% Interpretation: Standard, refers to itself and its paired gold chest.\nstmt_b(Makers, Pairing) :-\n    is_paired((b, GoldB), Pairing), % Find GoldB paired with b\n    (\n        member(maker(b, cellini), Makers) ;\n        (\n            member(maker(b, bellini), Makers),\n            member(maker(GoldB, bellini), Makers)\n        )\n    ).\n\n% Statement C & D: \"EL COFRE DE ORO ES OBRA DE UN BELLINI\"\n% Interpretation: \"Exactly one gold chest (A or C) is by Bellini.\"\nexactly_one_gold_is_bellini(Makers) :-\n    member(maker(a, Ma), Makers),\n    member(maker(c, Mc), Makers),\n    ((Ma = bellini, Mc = cellini) ; (Ma = cellini, Mc = bellini)).\n\nstmt_c(Makers, _Pairing) :- exactly_one_gold_is_bellini(Makers).\nstmt_d(Makers, _Pairing) :- exactly_one_gold_is_bellini(Makers).\n\n% Rule: Bellini makes true statements, Cellini makes false statements.\n% satisfies_rule(Chest, Makers, StatementPredicate, Args)\n% Chest: The chest being checked (a, b, c, or d).\n% Makers: The list of maker assignments.\n% StatementPredicate: The predicate representing the chest's statement (e.g., stmt_a).\n% Args: Arguments needed by the StatementPredicate (e.g., Pairing for A and B).\n\nsatisfies_rule(Chest, Makers, StmtPredicate, Args) :-\n    member(maker(Chest, Maker), Makers),\n    (\n        Maker == bellini -> call(StmtPredicate, Makers, Args) % Bellini's statement must be true\n        ;\n        Maker == cellini -> \n           (\\+ call(StmtPredicate, Makers, Args)) % Cellini's statement must be false\n    ).\n\n% Main query to find the solution\n% Find Makers and Pairing that satisfy the rules for all chests.\n% The query will bind Makers and Pairing to the solution.\n% Query: ?- solve(Makers, Pairing).\n\nsolve(Makers, Pairing) :-\n    possible_makers(Makers),\n    possible_pairing(Pairing),\n    satisfies_rule(a, Makers, stmt_a, Pairing),\n    satisfies_rule(b, Makers, stmt_b, Pairing),\n    satisfies_rule(c, Makers, stmt_c, Pairing),\n    satisfies_rule(d, Makers, stmt_d, Pairing).\n\n% Example query to get the solution:\n% ?- solve(Makers, Pairing).\n% This will output the Makers list and the Pairing list.\n% The expected output for Makers is [maker(a, cellini), maker(b, bellini), maker(c, bellini), maker(d, bellini)].\n% The expected output for Pairing is [pair(c,b), pair(a,d)]."
}

-------------------------------------------------------------------




-------------------------------------------------------------------

--- Pregunta a Gemini JSON (general) ---
Prompt: 
        Hola, basándote en tu respuesta anterior sobre el problema de lógica, necesito que extraigas y estructures la información de la siguiente manera en un formato JSON:

        El JSON debe tener tres claves principales en el nivel raíz:

        "facts": Un array de strings, donde cada string es un hecho Prolog completo tal como lo definiste.
        "rules": Un array de strings, donde cada string es una regla Prolog completa tal como la definiste.
        "objective": Un string que represente la consulta principal de Prolog que se usaría para obtener la solución (por ejemplo, solucion(Tweedledum, Tweedledee).).

        Consejos importantes para asegurar la compatibilidad con Prolog al generar los strings de hechos y reglas:
            Átomos: Los nombres de predicados y las constantes (átomos) en Prolog deben comenzar con una letra minúscula. Si un átomo necesita contener espacios, caracteres especiales, o comenzar con una letra mayúscula, debe ir entre comillas simples (ej: 'Yo soy Fidel', 'Luna').
            Variables: Las variables en Prolog siempre comienzan con una letra mayúscula o un guion bajo (ej: Dia, Hermano, _Ignorado).
            Sintaxis de Hechos: Asegúrate de que cada hecho termine con un punto (.). Ejemplo: miente_leon(lunes).
            Sintaxis de Reglas: Las reglas deben seguir el formato cabeza :- cuerpo., donde cabeza es la conclusión, :- significa "si", y cuerpo puede ser una o más metas separadas por comas (,) que representan una conjunción lógica. Cada regla debe terminar con un punto (.). Ejemplo: dice_verdad(leon, Dia) :- + miente_leon(Dia).
            Strings dentro de Prolog: Las frases como "Yo soy Fidel" deben ser tratadas como átomos en Prolog, es decir, encerradas en comillas simples si contienen espacios o mayúsculas no iniciales (ej: 'Yo soy Fidel').
            Escapado en JSON: Dado que los hechos y reglas de Prolog serán strings dentro de un JSON, si alguna vez usaras comillas dobles dentro de tu código Prolog (lo cual es menos común para átomos que las comillas simples), necesitarían ser escapadas (") dentro del string JSON. Usar comillas simples para los átomos Prolog evita este problema. Las barras invertidas () en Prolog (como en + para negación) son caracteres válidos y no necesitan doble escapado a menos que el propio string JSON lo requiera para el carácter .
            Los símbolos correctos de prolog son: \+ para negación, :- para implicación, ; para disyunción, . para final de cláusula, = para unificación, \= para desigualdad.
            Evita usar el \ innecesariamente puesto a que por si solo es un error de sintaxis

        Problema original:
            
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas, mientras que Cellini siempre les ponía inscripciones falsas.En algunos museos podemos ver parejas de cofres —uno de oro y otro de plata— que en un principio se hicieron y se vendieron como juego. La verdad es que la familia Bellini y la Cellini eran íntimas y que a veces colaboraban en algunas de estas parejas; aunque cada cofre lo hiciera siempre una sola persona, dentro de la pareja un cofre podía hacerlo uno y el otro otro diferente. Ambas familias se divertían muchísimo haciendo estas parejas de manera que la inteligente posteridad pudiera adivinar —o adivinar parcialmente— quiénes habían sido los autores.  Habían aparecido cuatro cofres, dos de oro y dos de plata; se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja. Me los enseñaron y pronto pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra (que consistía, entre otras cosas, en una excelente caja de botellas de Chianti) y un beso de una de las florentinas más maravillosas que haya existido nunca He aquí los cuatro cofres:
    Cofre A (Oro)
    EL COFRE DE PLATA ES OBRA DE UN CELLINI
    Cofre B (Plata)
    EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON
    DE BELLINI
    Cofre C (Oro)
    EL COFRE DE ORO ES OBRA DE UN BELLINI
    Cofre D (Plata)
    EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE
    ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI

    Tenemos ahora un problema:
    ¿Quién hizo cada uno de los cofres?
    

        Por favor, procesa la siguiente respuesta tuya y genera el JSON:
        Tu respuesta: 
            % Define possible makers
maker_type(bellini).
maker_type(cellini).

% Define chest types
gold(a).
gold(c).
silver(b).
silver(d).

% Define possible maker assignments (all 16 combinations)
possible_makers(Makers) :-
    Makers = [maker(a, Ma), maker(b, Mb), maker(c, Mc), maker(d, Md)],
    maker_type(Ma), maker_type(Mb), maker_type(Mc), maker_type(Md).

% Define possible pairings (2 combinations)
possible_pairing(Pairing) :-
    (Pairing = [pair(a,b), pair(c,d)]) ; (Pairing = [pair(a,d), pair(c,b)]).

% Helper to find the chest paired with X in a given Pairing
is_paired((X, Y), Pairing) :-
    member(pair(X, Y), Pairing) ;
    member(pair(Y, X), Pairing).

% Statement A: "The silver chest paired with Cofre A is by Cellini."
% Interpretation: Refers to its paired silver chest.
stmt_a(Makers, Pairing) :-
    is_paired((a, SilverA), Pairing), % Find SilverA paired with a
    member(maker(SilverA, cellini), Makers).

% Statement B: "Cofre B is by Cellini OR both Cofre B and its paired gold chest are by Bellini."
% Interpretation: Standard, refers to itself and its paired gold chest.
stmt_b(Makers, Pairing) :-
    is_paired((b, GoldB), Pairing), % Find GoldB paired with b
    (
        member(maker(b, cellini), Makers) ;
        (
            member(maker(b, bellini), Makers),
            member(maker(GoldB, bellini), Makers)
        )
    ).

% Statement C & D: "EL COFRE DE ORO ES OBRA DE UN BELLINI"
% Interpretation: "Exactly one gold chest (A or C) is by Bellini."
exactly_one_gold_is_bellini(Makers) :-
    member(maker(a, Ma), Makers),
    member(maker(c, Mc), Makers),
    ((Ma = bellini, Mc = cellini) ; (Ma = cellini, Mc = bellini)).

stmt_c(Makers, _Pairing) :- exactly_one_gold_is_bellini(Makers).
stmt_d(Makers, _Pairing) :- exactly_one_gold_is_bellini(Makers).

% Rule: Bellini makes true statements, Cellini makes false statements.
% satisfies_rule(Chest, Makers, StatementPredicate, Args)
% Chest: The chest being checked (a, b, c, or d).
% Makers: The list of maker assignments.
% StatementPredicate: The predicate representing the chest's statement (e.g., stmt_a).
% Args: Arguments needed by the StatementPredicate (e.g., Pairing for A and B).

satisfies_rule(Chest, Makers, StmtPredicate, Args) :-
    member(maker(Chest, Maker), Makers),
    (
        Maker == bellini -> call(StmtPredicate, Makers, Args) % Bellini's statement must be true
        ;
        Maker == cellini -> 
           (\+ call(StmtPredicate, Makers, Args)) % Cellini's statement must be false
    ).

% Main query to find the solution
% Find Makers and Pairing that satisfy the rules for all chests.
% The query will bind Makers and Pairing to the solution.
% Query: ?- solve(Makers, Pairing).

solve(Makers, Pairing) :-
    possible_makers(Makers),
    possible_pairing(Pairing),
    satisfies_rule(a, Makers, stmt_a, Pairing),
    satisfies_rule(b, Makers, stmt_b, Pairing),
    satisfies_rule(c, Makers, stmt_c, Pairing),
    satisfies_rule(d, Makers, stmt_d, Pairing).

% Example query to get the solution:
% ?- solve(Makers, Pairing).
% This will output the Makers list and the Pairing list.
% The expected output for Makers is [maker(a, cellini), maker(b, bellini), maker(c, bellini), maker(d, bellini)].
% The expected output for Pairing is [pair(c,b), pair(a,d)].
        

-------------------------------------------------------------------

-------------------------------------------------------------------
Respuesta JSON de Gemini: {
  "facts": [
    "maker_type(bellini).",
    "maker_type(cellini).",
    "gold(a).",
    "gold(c).",
    "silver(b).",
    "silver(d)."
  ],
  "rules": [
    "possible_makers(Makers) :- Makers = [maker(a, Ma), maker(b, Mb), maker(c, Mc), maker(d, Md)], maker_type(Ma), maker_type(Mb), maker_type(Mc), maker_type(Md).",
    "possible_pairing(Pairing) :- (Pairing = [pair(a,b), pair(c,d)]) ; (Pairing = [pair(a,d), pair(c,b)]).",
    "is_paired((X, Y), Pairing) :- member(pair(X, Y), Pairing) ; member(pair(Y, X), Pairing).",
    "stmt_a(Makers, Pairing) :- is_paired((a, SilverA), Pairing), member(maker(SilverA, cellini), Makers).",
    "stmt_b(Makers, Pairing) :- is_paired((b, GoldB), Pairing), (member(maker(b, cellini), Makers) ; (member(maker(b, bellini), Makers), member(maker(GoldB, bellini), Makers))).",
    "exactly_one_gold_is_bellini(Makers) :- member(maker(a, Ma), Makers), member(maker(c, Mc), Makers), ((Ma = bellini, Mc = cellini) ; (Ma = cellini, Mc = bellini)).",
    "stmt_c(Makers, _Pairing) :- exactly_one_gold_is_bellini(Makers).",
    "stmt_d(Makers, _Pairing) :- exactly_one_gold_is_bellini(Makers).",
    "satisfies_rule(Chest, Makers, StmtPredicate, Args) :- member(maker(Chest, Maker), Makers), (Maker == bellini -> call(StmtPredicate, Makers, Args) ; Maker == cellini -> \\+ call(StmtPredicate, Makers, Args)).",
    "solve(Makers, Pairing) :- possible_makers(Makers), possible_pairing(Pairing), satisfies_rule(a, Makers, stmt_a, Pairing), satisfies_rule(b, Makers, stmt_b, Pairing), satisfies_rule(c, Makers, stmt_c, Pairing), satisfies_rule(d, Makers, stmt_d, Pairing)."
  ],
  "objetive": [
    "solve(Makers, Pairing)."
  ]
}

-------------------------------------------------------------------


MFSA: Cláusulas del Problema Extraídas: 16

--- Cláusulas Extraídas ---

Cláusulas Objetivo:
- solve(Makers, Pairing).

Cláusulas del Problema:
- maker_type(bellini).
- maker_type(cellini).
- gold(a).
- gold(c).
- silver(b).
- silver(d).
- possible_makers(Makers) :- Makers = [maker(a, Ma), maker(b, Mb), maker(c, Mc), maker(d, Md)], maker_type(Ma), maker_type(Mb), maker_type(Mc), maker_type(Md).
- possible_pairing(Pairing) :- (Pairing = [pair(a,b), pair(c,d)]) ; (Pairing = [pair(a,d), pair(c,b)]).
- is_paired((X, Y), Pairing) :- member(pair(X, Y), Pairing) ; member(pair(Y, X), Pairing).
- stmt_a(Makers, Pairing) :- is_paired((a, SilverA), Pairing), member(maker(SilverA, cellini), Makers).
- stmt_b(Makers, Pairing) :- is_paired((b, GoldB), Pairing), (member(maker(b, cellini), Makers) ; (member(maker(b, bellini), Makers), member(maker(GoldB, bellini), Makers))).
- exactly_one_gold_is_bellini(Makers) :- member(maker(a, Ma), Makers), member(maker(c, Mc), Makers), ((Ma = bellini, Mc = cellini) ; (Ma = cellini, Mc = bellini)).
- stmt_c(Makers, _Pairing) :- exactly_one_gold_is_bellini(Makers).
- stmt_d(Makers, _Pairing) :- exactly_one_gold_is_bellini(Makers).
- satisfies_rule(Chest, Makers, StmtPredicate, Args) :- member(maker(Chest, Maker), Makers), (Maker == bellini -> call(StmtPredicate, Makers, Args) ; Maker == cellini -> \+ call(StmtPredicate, Makers, Args)).
- solve(Makers, Pairing) :- possible_makers(Makers), possible_pairing(Pairing), satisfies_rule(a, Makers, stmt_a, Pairing), satisfies_rule(b, Makers, stmt_b, Pairing), satisfies_rule(c, Makers, stmt_c, Pairing), satisfies_rule(d, Makers, stmt_d, Pairing).

Axiomas Base:
--- Formalización Completada ---
KR-Store:
  Axiomas Base: 0
  Cláusulas del Problema: 16
  Cláusulas Objetivo: 1
INFO: Checkpoint guardado: checkpoints/mfsa_kr_store_Recordamos_que_Bellini_siempre_ponía_a_sus_cofres_.pkl
INFO: Historial del LLM guardado: checkpoints/llm_history_
____Recordamos_que_Bellini_siempre_ponía_a_sus_co_20250617_152517.pkl

--- CICLO DE REFINAMIENTO 1 / 3 ---

--- Ejecutando MISA-J (CFCS) ---
Programa Prolog: maker_type(bellini).
maker_type(cellini).
gold(a).
gold(c).
silver(b).
silver(d).
possible_makers(Makers) :- Makers = [maker(a, Ma), maker(b, Mb), maker(c, Mc), maker(d, Md)], maker_type(Ma), maker_type(Mb), maker_type(Mc), maker_type(Md).
possible_pairing(Pairing) :- (Pairing = [pair(a,b), pair(c,d)]) ; (Pairing = [pair(a,d), pair(c,b)]).
is_paired((X, Y), Pairing) :- member(pair(X, Y), Pairing) ; member(pair(Y, X), Pairing).
stmt_a(Makers, Pairing) :- is_paired((a, SilverA), Pairing), member(maker(SilverA, cellini), Makers).
stmt_b(Makers, Pairing) :- is_paired((b, GoldB), Pairing), (member(maker(b, cellini), Makers) ; (member(maker(b, bellini), Makers), member(maker(GoldB, bellini), Makers))).
exactly_one_gold_is_bellini(Makers) :- member(maker(a, Ma), Makers), member(maker(c, Mc), Makers), ((Ma = bellini, Mc = cellini) ; (Ma = cellini, Mc = bellini)).
stmt_c(Makers, _Pairing) :- exactly_one_gold_is_bellini(Makers).
stmt_d(Makers, _Pairing) :- exactly_one_gold_is_bellini(Makers).
satisfies_rule(Chest, Makers, StmtPredicate, Args) :- member(maker(Chest, Maker), Makers), (Maker == bellini -> call(StmtPredicate, Makers, Args) ; Maker == cellini -> \+ call(StmtPredicate, Makers, Args)).
solve(Makers, Pairing) :- possible_makers(Makers), possible_pairing(Pairing), satisfies_rule(a, Makers, stmt_a, Pairing), satisfies_rule(b, Makers, stmt_b, Pairing), satisfies_rule(c, Makers, stmt_c, Pairing), satisfies_rule(d, Makers, stmt_d, Pairing).
--- Traza cruda de Prolog ---
                        call: solve(_4650,_4652) @ <dynamic>:0
                          call: possible_makers(_4650) @ <dynamic>:0
                            call: maker_type(_6272) @ <dynamic>:0
                            exit: maker_type(bellini) @ /tmp/tmpy0boizp7.pl:21
                            call: maker_type(_6284) @ <dynamic>:0
                            exit: maker_type(bellini) @ /tmp/tmpy0boizp7.pl:21
                            call: maker_type(_6296) @ <dynamic>:0
                            exit: maker_type(bellini) @ /tmp/tmpy0boizp7.pl:21
                            call: maker_type(_6308) @ <dynamic>:0
                            exit: maker_type(bellini) @ /tmp/tmpy0boizp7.pl:21
                          exit: possible_makers([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_7080),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_14228),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_14228),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_14228),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_14228),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((a,_14228),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_14228,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(_14228,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((a,_14228),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_7080),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_7080),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14256),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_14534),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_14534),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_14534),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_14534),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((a,_14534),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_14534,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(_14534,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              fail: is_paired((a,_14534),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14256),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14256),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): maker_type(_6308) @ /tmp/tmpy0boizp7.pl:22
                            exit: maker_type(cellini) @ /tmp/tmpy0boizp7.pl:22
                          exit: possible_makers([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14420),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_14698),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_14698),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_14698),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_14698),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((a,_14698),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_14698,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(_14698,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((a,_14698),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14420),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14420),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14484),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_14762),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_14762),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:30
                          exit: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15312),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_b([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((b,_15590),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(b,_15590),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_15590),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((b,_15590),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15590,b),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(c,b),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,c),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            redo(25): stmt_b([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:31
                              call: lists:member(maker(b,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              call: lists:member(maker(c,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(c,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_b([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:31
                          exit: satisfies_rule(b,[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_b,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(c,[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_c,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(c,_16400),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(c,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_c([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: exactly_one_gold_is_bellini([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                                call: lists:member(maker(a,_16726),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                                exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                call: lists:member(maker(c,_16854),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                                exit: lists:member(maker(c,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                call: bellini=bellini @ <dynamic>:0
                                exit: bellini=bellini @ <dynamic>:0
                                call: bellini=cellini @ <dynamic>:0
                                fail: bellini=cellini @ <dynamic>:0
                              redo(31): exactly_one_gold_is_bellini([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /tmp/tmpy0boizp7.pl:32
                                call: bellini=cellini @ <dynamic>:0
                                fail: bellini=cellini @ <dynamic>:0
                                redo(0): lists:member(maker(c,_16854),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(maker(c,_16854),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                                redo(0): lists:member(maker(a,_16726),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(maker(a,_16726),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              fail: exactly_one_gold_is_bellini([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            fail: stmt_c([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(c,_16400),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(c,_16400),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(c,[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_c,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(maker(c,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(maker(c,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              redo(0): lists:member(maker(b,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(maker(b,bellini),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            fail: stmt_b([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(b,_15312),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15312),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_14762),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_14762),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((a,_14762),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_14762,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(_14762,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              fail: is_paired((a,_14762),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14484),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14484),[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): maker_type(_6296) @ /tmp/tmpy0boizp7.pl:22
                            exit: maker_type(cellini) @ /tmp/tmpy0boizp7.pl:22
                            call: maker_type(_6308) @ <dynamic>:0
                            exit: maker_type(bellini) @ /tmp/tmpy0boizp7.pl:21
                          exit: possible_makers([maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14526),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_14804),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_14804),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_14804),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_14804),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((a,_14804),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_14804,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(_14804,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((a,_14804),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14526),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14526),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14590),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_14868),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_14868),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_14868),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_14868),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((a,_14868),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_14868,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(_14868,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              fail: is_paired((a,_14868),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14590),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14590),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): maker_type(_6308) @ /tmp/tmpy0boizp7.pl:22
                            exit: maker_type(cellini) @ /tmp/tmpy0boizp7.pl:22
                          exit: possible_makers([maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14590),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_14868),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_14868),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_14868),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_14868),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((a,_14868),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_14868,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(_14868,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((a,_14868),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14590),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14590),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14654),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_14932),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_14932),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:30
                          exit: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15482),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,bellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_b([maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((b,_15760),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(b,_15760),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_15760),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((b,_15760),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15760,b),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(c,b),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,c),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                            redo(25): stmt_b([maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:31
                              call: lists:member(maker(b,bellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,bellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              call: lists:member(maker(c,bellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              fail: lists:member(maker(c,bellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              redo(0): lists:member(maker(b,bellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(maker(b,bellini),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                            fail: stmt_b([maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(b,_15482),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15482),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_14932),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_14932),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((a,_14932),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_14932,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(_14932,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              fail: is_paired((a,_14932),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14654),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14654),[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): maker_type(_6284) @ /tmp/tmpy0boizp7.pl:22
                            exit: maker_type(cellini) @ /tmp/tmpy0boizp7.pl:22
                            call: maker_type(_6296) @ <dynamic>:0
                            exit: maker_type(bellini) @ /tmp/tmpy0boizp7.pl:21
                            call: maker_type(_6308) @ <dynamic>:0
                            exit: maker_type(bellini) @ /tmp/tmpy0boizp7.pl:21
                          exit: possible_makers([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14632),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_14910),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_14910),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:30
                          exit: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15460),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_b,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_b([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((b,_15808),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(b,_15808),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_15808),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((b,_15808),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15808,b),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,a),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_b([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:31
                            redo(0): lists:member(maker(b,_15460),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15460),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_14910),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_14910),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((a,_14910),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_14910,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(_14910,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((a,_14910),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14632),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14632),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14696),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_14974),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_14974),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_14974),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_14974),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((a,_14974),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_14974,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(_14974,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              fail: is_paired((a,_14974),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14696),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14696),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): maker_type(_6308) @ /tmp/tmpy0boizp7.pl:22
                            exit: maker_type(cellini) @ /tmp/tmpy0boizp7.pl:22
                          exit: possible_makers([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14696),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_14974),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_14974),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:30
                          exit: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15524),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_b,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_b([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((b,_15872),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(b,_15872),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_15872),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((b,_15872),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15872,b),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,a),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_b([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:31
                            redo(0): lists:member(maker(b,_15524),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15524),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_14974),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_14974),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((a,_14974),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_14974,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(_14974,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((a,_14974),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14696),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14696),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14760),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_15038),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15038),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:30
                          exit: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15588),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_b,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_b([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((b,_15936),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(b,_15936),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_15936),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((b,_15936),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15936,b),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(c,b),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,c),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_b([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:31
                            redo(0): lists:member(maker(b,_15588),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15588),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_15038),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_15038),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((a,_15038),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15038,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(_15038,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              fail: is_paired((a,_15038),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14760),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14760),[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): maker_type(_6296) @ /tmp/tmpy0boizp7.pl:22
                            exit: maker_type(cellini) @ /tmp/tmpy0boizp7.pl:22
                            call: maker_type(_6308) @ <dynamic>:0
                            exit: maker_type(bellini) @ /tmp/tmpy0boizp7.pl:21
                          exit: possible_makers([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14696),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_14974),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_14974),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:30
                          exit: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15524),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_b,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_b([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((b,_15872),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(b,_15872),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_15872),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((b,_15872),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15872,b),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,a),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_b([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:31
                            redo(0): lists:member(maker(b,_15524),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15524),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_14974),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_14974),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((a,_14974),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_14974,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(_14974,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((a,_14974),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14696),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14696),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14760),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_15038),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15038),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_15038),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_15038),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((a,_15038),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15038,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(_15038,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              fail: is_paired((a,_15038),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14760),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14760),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): maker_type(_6308) @ /tmp/tmpy0boizp7.pl:22
                            exit: maker_type(cellini) @ /tmp/tmpy0boizp7.pl:22
                          exit: possible_makers([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14760),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_15038),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15038),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:30
                          exit: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15588),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_b,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_b([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((b,_15936),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(b,_15936),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_15936),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((b,_15936),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15936,b),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,a),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_b([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:31
                            redo(0): lists:member(maker(b,_15588),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15588),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_15038),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_15038),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((a,_15038),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15038,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(_15038,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((a,_15038),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14760),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14760),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14824),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,bellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_15102),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15102),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(d,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:30
                          exit: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15652),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_b,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_b([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((b,_16000),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(b,_16000),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_16000),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((b,_16000),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_16000,b),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(c,b),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,c),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_b([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:31
                            redo(0): lists:member(maker(b,_15652),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15652),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_15102),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_15102),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((a,_15102),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15102,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(_15102,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              fail: is_paired((a,_15102),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14824),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14824),[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,bellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): maker_type(_6272) @ /tmp/tmpy0boizp7.pl:22
                            exit: maker_type(cellini) @ /tmp/tmpy0boizp7.pl:22
                            call: maker_type(_6284) @ <dynamic>:0
                            exit: maker_type(bellini) @ /tmp/tmpy0boizp7.pl:21
                            call: maker_type(_6296) @ <dynamic>:0
                            exit: maker_type(bellini) @ /tmp/tmpy0boizp7.pl:21
                            call: maker_type(_6308) @ <dynamic>:0
                            exit: maker_type(bellini) @ /tmp/tmpy0boizp7.pl:21
                          exit: possible_makers([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14738),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_15086),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15086),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_15086),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_15086),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((a,_15086),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15086,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(_15086,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((a,_15086),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(46): satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                          exit: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15224),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_b([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((b,_15502),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(b,_15502),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_15502),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((b,_15502),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15502,b),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,a),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            redo(25): stmt_b([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:31
                              call: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              call: lists:member(maker(a,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(a,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              redo(0): lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(_15502,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(_15502,b),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((b,_15502),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_b([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(b,_15224),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15224),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14738),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14738),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14802),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_15150),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15150),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_15150),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_15150),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((a,_15150),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15150,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(_15150,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              fail: is_paired((a,_15150),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                          redo(46): satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                          exit: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15288),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_b([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((b,_15566),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(b,_15566),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_15566),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((b,_15566),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15566,b),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(c,b),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,c),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            redo(25): stmt_b([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:31
                              call: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              call: lists:member(maker(c,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(maker(c,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_b([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:31
                          exit: satisfies_rule(b,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_b,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(c,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_c,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(c,_16376),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(c,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_c([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: exactly_one_gold_is_bellini([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                call: lists:member(maker(a,_16702),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                call: lists:member(maker(c,_16830),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                exit: lists:member(maker(c,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                call: cellini=bellini @ <dynamic>:0
                                fail: cellini=bellini @ <dynamic>:0
                              redo(31): exactly_one_gold_is_bellini([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /tmp/tmpy0boizp7.pl:32
                                call: cellini=cellini @ <dynamic>:0
                                exit: cellini=cellini @ <dynamic>:0
                                call: bellini=bellini @ <dynamic>:0
                                exit: bellini=bellini @ <dynamic>:0
                              exit: exactly_one_gold_is_bellini([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /tmp/tmpy0boizp7.pl:32
                            exit: stmt_c([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:33
                          exit: satisfies_rule(c,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_c,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(d,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_d,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(d,_17458),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(d,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_d([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: exactly_one_gold_is_bellini([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                call: lists:member(maker(a,_17784),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                call: lists:member(maker(c,_17912),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                exit: lists:member(maker(c,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                call: cellini=bellini @ <dynamic>:0
                                fail: cellini=bellini @ <dynamic>:0
                              redo(31): exactly_one_gold_is_bellini([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /tmp/tmpy0boizp7.pl:32
                                call: cellini=cellini @ <dynamic>:0
                                exit: cellini=cellini @ <dynamic>:0
                                call: bellini=bellini @ <dynamic>:0
                                exit: bellini=bellini @ <dynamic>:0
                              exit: exactly_one_gold_is_bellini([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /tmp/tmpy0boizp7.pl:32
                            exit: stmt_d([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:34
                          exit: satisfies_rule(d,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_d,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                        exit: solve([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:36
                        call: fail @ <dynamic>:0
                        fail: fail @ <dynamic>:0
                                redo(0): lists:member(maker(c,_17912),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(maker(c,_17912),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(maker(a,_17784),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(maker(a,_17784),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: exactly_one_gold_is_bellini([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            fail: stmt_d([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                          fail: satisfies_rule(d,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_d,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                redo(0): lists:member(maker(c,_16830),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(maker(c,_16830),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(maker(a,_16702),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(maker(a,_16702),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: exactly_one_gold_is_bellini([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            fail: stmt_c([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(c,_16376),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(c,_16376),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(c,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_c,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(maker(c,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(maker(c,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              redo(0): lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            fail: stmt_b([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(b,_15288),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15288),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14802),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14802),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): maker_type(_6308) @ /tmp/tmpy0boizp7.pl:22
                            exit: maker_type(cellini) @ /tmp/tmpy0boizp7.pl:22
                          exit: possible_makers([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14802),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_15150),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15150),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_15150),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_15150),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((a,_15150),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15150,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(_15150,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((a,_15150),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(46): satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                          exit: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15288),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_b([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((b,_15566),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(b,_15566),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_15566),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((b,_15566),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15566,b),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,a),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            redo(25): stmt_b([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:31
                              call: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              call: lists:member(maker(a,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              fail: lists:member(maker(a,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              redo(0): lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(_15566,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(_15566,b),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((b,_15566),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_b([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(b,_15288),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15288),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14802),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14802),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14866),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_15214),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15214),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:30
                            redo(0): lists:member(maker(a,_14866),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14866),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): maker_type(_6296) @ /tmp/tmpy0boizp7.pl:22
                            exit: maker_type(cellini) @ /tmp/tmpy0boizp7.pl:22
                            call: maker_type(_6308) @ <dynamic>:0
                            exit: maker_type(bellini) @ /tmp/tmpy0boizp7.pl:21
                          exit: possible_makers([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14802),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_15150),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15150),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_15150),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_15150),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((a,_15150),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15150,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(_15150,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((a,_15150),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(46): satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                          exit: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15288),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_b([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((b,_15566),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(b,_15566),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_15566),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((b,_15566),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15566,b),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,a),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                            redo(25): stmt_b([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:31
                              call: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              call: lists:member(maker(a,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(a,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              redo(0): lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(_15566,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(_15566,b),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((b,_15566),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_b([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(b,_15288),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15288),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14802),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14802),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14866),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_15214),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15214),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_15214),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_15214),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((a,_15214),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15214,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(_15214,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              fail: is_paired((a,_15214),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                          redo(46): satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                          exit: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15352),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_b([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((b,_15630),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(b,_15630),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_15630),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((b,_15630),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15630,b),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(c,b),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,c),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                            redo(25): stmt_b([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:31
                              call: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              call: lists:member(maker(c,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(c,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              redo(0): lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                            fail: stmt_b([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(b,_15352),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15352),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14866),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14866),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): maker_type(_6308) @ /tmp/tmpy0boizp7.pl:22
                            exit: maker_type(cellini) @ /tmp/tmpy0boizp7.pl:22
                          exit: possible_makers([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14866),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_15214),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15214),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_15214),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_15214),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((a,_15214),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15214,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(_15214,a),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((a,_15214),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(46): satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                          exit: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15352),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: bellini==bellini @ <dynamic>:0
                            exit: bellini==bellini @ <dynamic>:0
                            call: stmt_b([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((b,_15630),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(b,_15630),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_15630),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              redo(22): is_paired((b,_15630),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15630,b),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,a),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              fail: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                            redo(25): stmt_b([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:31
                              call: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              call: lists:member(maker(a,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              fail: lists:member(maker(a,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              redo(0): lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(_15630,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(_15630,b),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              fail: is_paired((b,_15630),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            fail: stmt_b([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(b,_15352),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15352),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_b,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14866),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14866),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14930),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_15278),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15278),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:30
                            redo(0): lists:member(maker(a,_14930),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14930),[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): maker_type(_6284) @ /tmp/tmpy0boizp7.pl:22
                            exit: maker_type(cellini) @ /tmp/tmpy0boizp7.pl:22
                            call: maker_type(_6296) @ <dynamic>:0
                            exit: maker_type(bellini) @ /tmp/tmpy0boizp7.pl:21
                            call: maker_type(_6308) @ <dynamic>:0
                            exit: maker_type(bellini) @ /tmp/tmpy0boizp7.pl:21
                          exit: possible_makers([maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14802),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_15150),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15150),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:30
                            redo(0): lists:member(maker(a,_14802),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14802),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14866),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_15214),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15214),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_15214),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_15214),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((a,_15214),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15214,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(_15214,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              fail: is_paired((a,_15214),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                          redo(46): satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                          exit: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15352),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(b,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_b,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_b([maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((b,_15700),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(b,_15700),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_15700),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((b,_15700),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15700,b),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(c,b),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,c),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_b([maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:31
                            redo(0): lists:member(maker(b,_15352),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15352),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14866),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14866),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): maker_type(_6308) @ /tmp/tmpy0boizp7.pl:22
                            exit: maker_type(cellini) @ /tmp/tmpy0boizp7.pl:22
                          exit: possible_makers([maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14866),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_15214),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15214),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:30
                            redo(0): lists:member(maker(a,_14866),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14866),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14930),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_15278),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15278),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:30
                            redo(0): lists:member(maker(a,_14930),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14930),[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,bellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): maker_type(_6296) @ /tmp/tmpy0boizp7.pl:22
                            exit: maker_type(cellini) @ /tmp/tmpy0boizp7.pl:22
                            call: maker_type(_6308) @ <dynamic>:0
                            exit: maker_type(bellini) @ /tmp/tmpy0boizp7.pl:21
                          exit: possible_makers([maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14866),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_15214),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15214),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:30
                            redo(0): lists:member(maker(a,_14866),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14866),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14930),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_15278),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15278),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              fail: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                                redo(0): lists:member(pair(a,_15278),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                fail: lists:member(pair(a,_15278),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((a,_15278),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15278,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(_15278,a),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              fail: is_paired((a,_15278),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            fail: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                          redo(46): satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                          exit: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                          call: satisfies_rule(b,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(b,_15416),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                            exit: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(b,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_b,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_b([maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((b,_15764),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(b,_15764),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                fail: lists:member(pair(b,_15764),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              redo(22): is_paired((b,_15764),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                                call: lists:member(pair(_15764,b),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(c,b),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((b,c),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_b([maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:31
                            redo(0): lists:member(maker(b,_15416),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(b,_15416),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(b,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_b,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): lists:member(maker(a,_14930),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14930),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            redo(0): maker_type(_6308) @ /tmp/tmpy0boizp7.pl:22
                            exit: maker_type(cellini) @ /tmp/tmpy0boizp7.pl:22
                          exit: possible_makers([maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /tmp/tmpy0boizp7.pl:27
                          call: possible_pairing(_4652) @ <dynamic>:0
                            call: _4652=[pair(a,b),pair(c,d)] @ <dynamic>:0
                            exit: [pair(a,b),pair(c,d)]=[pair(a,b),pair(c,d)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14930),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ <dynamic>:0
                              call: is_paired((a,_15278),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15278),[pair(a,b),pair(c,d)]) @ <dynamic>:0
                                exit: lists:member(pair(a,b),[pair(a,b),pair(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,b),[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(b,cellini),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],[pair(a,b),pair(c,d)]) @ /tmp/tmpy0boizp7.pl:30
                            redo(0): lists:member(maker(a,_14930),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14930),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,b),pair(c,d)]) @ <dynamic>:0
                          redo(26): possible_pairing(_4652) @ /tmp/tmpy0boizp7.pl:28
                            call: _4652=[pair(a,d),pair(c,b)] @ <dynamic>:0
                            exit: [pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)] @ <dynamic>:0
                          exit: possible_pairing([pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:28
                          call: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                            call: lists:member(maker(a,_14994),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                            exit: lists:member(maker(a,cellini),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            call: cellini==bellini @ <dynamic>:0
                            fail: cellini==bellini @ <dynamic>:0
                          redo(27): satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:35
                            call: cellini==cellini @ <dynamic>:0
                            exit: cellini==cellini @ <dynamic>:0
                            call: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ <dynamic>:0
                              call: is_paired((a,_15342),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                call: lists:member(pair(a,_15342),[pair(a,d),pair(c,b)]) @ <dynamic>:0
                                exit: lists:member(pair(a,d),[pair(a,d),pair(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              exit: is_paired((a,d),[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:29
                              call: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(maker(d,cellini),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: stmt_a([maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],[pair(a,d),pair(c,b)]) @ /tmp/tmpy0boizp7.pl:30
                            redo(0): lists:member(maker(a,_14994),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            fail: lists:member(maker(a,_14994),[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)]) @ <dynamic>:0
                          fail: satisfies_rule(a,[maker(a,cellini),maker(b,cellini),maker(c,cellini),maker(d,cellini)],stmt_a,[pair(a,d),pair(c,b)]) @ <dynamic>:0
                        fail: solve(_4650,_4652) @ <dynamic>:0
--- Fin de traza cruda ---
INFO: Checkpoint guardado: checkpoints/misa_j_trace_cycle0_Recordamos_que_Bellini_siempre_ponía_a_sus_cofres_.pkl

--- Ejecutando MMRC ---


-------------------------------------------------------------------

--- Pregunta a Gemini (general) ---
Prompt: 
        Como experto en lógica y razonamiento, necesito que analices el siguiente problema y su solución:

        PROBLEMA ORIGINAL:
        
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas, mientras que Cellini siempre les ponía inscripciones falsas.En algunos museos podemos ver parejas de cofres —uno de oro y otro de plata— que en un principio se hicieron y se vendieron como juego. La verdad es que la familia Bellini y la Cellini eran íntimas y que a veces colaboraban en algunas de estas parejas; aunque cada cofre lo hiciera siempre una sola persona, dentro de la pareja un cofre podía hacerlo uno y el otro otro diferente. Ambas familias se divertían muchísimo haciendo estas parejas de manera que la inteligente posteridad pudiera adivinar —o adivinar parcialmente— quiénes habían sido los autores.  Habían aparecido cuatro cofres, dos de oro y dos de plata; se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja. Me los enseñaron y pronto pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra (que consistía, entre otras cosas, en una excelente caja de botellas de Chianti) y un beso de una de las florentinas más maravillosas que haya existido nunca He aquí los cuatro cofres:
    Cofre A (Oro)
    EL COFRE DE PLATA ES OBRA DE UN CELLINI
    Cofre B (Plata)
    EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON
    DE BELLINI
    Cofre C (Oro)
    EL COFRE DE ORO ES OBRA DE UN BELLINI
    Cofre D (Plata)
    EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE
    ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI

    Tenemos ahora un problema:
    ¿Quién hizo cada uno de los cofres?
    

        CLAUSULAS USADAS:
        ['maker_type(bellini).', 'maker_type(cellini).', 'gold(a).', 'gold(c).', 'silver(b).', 'silver(d).', 'possible_makers(Makers) :- Makers = [maker(a, Ma), maker(b, Mb), maker(c, Mc), maker(d, Md)], maker_type(Ma), maker_type(Mb), maker_type(Mc), maker_type(Md).', 'possible_pairing(Pairing) :- (Pairing = [pair(a,b), pair(c,d)]) ; (Pairing = [pair(a,d), pair(c,b)]).', 'is_paired((X, Y), Pairing) :- member(pair(X, Y), Pairing) ; member(pair(Y, X), Pairing).', 'stmt_a(Makers, Pairing) :- is_paired((a, SilverA), Pairing), member(maker(SilverA, cellini), Makers).', 'stmt_b(Makers, Pairing) :- is_paired((b, GoldB), Pairing), (member(maker(b, cellini), Makers) ; (member(maker(b, bellini), Makers), member(maker(GoldB, bellini), Makers))).', 'exactly_one_gold_is_bellini(Makers) :- member(maker(a, Ma), Makers), member(maker(c, Mc), Makers), ((Ma = bellini, Mc = cellini) ; (Ma = cellini, Mc = bellini)).', 'stmt_c(Makers, _Pairing) :- exactly_one_gold_is_bellini(Makers).', 'stmt_d(Makers, _Pairing) :- exactly_one_gold_is_bellini(Makers).', 'satisfies_rule(Chest, Makers, StmtPredicate, Args) :- member(maker(Chest, Maker), Makers), (Maker == bellini -> call(StmtPredicate, Makers, Args) ; Maker == cellini -> \\+ call(StmtPredicate, Makers, Args)).', 'solve(Makers, Pairing) :- possible_makers(Makers), possible_pairing(Pairing), satisfies_rule(a, Makers, stmt_a, Pairing), satisfies_rule(b, Makers, stmt_b, Pairing), satisfies_rule(c, Makers, stmt_c, Pairing), satisfies_rule(d, Makers, stmt_d, Pairing).']

        RAMAS DE PENSAMIENTOS EXITOSAS:
        [
  {
    "nombre": "root",
    "veracidad": "",
    "valor": [
      {
        "nombre": "solve(_4650,_4652)",
        "veracidad": "verde",
        "valor": [
          {
            "nombre": "possible_makers(_4650)",
            "veracidad": "verde",
            "valor": [
              {
                "nombre": "maker_type(_6272)",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "maker_type(cellini)",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "maker_type(_6284)",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "maker_type(bellini)",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "maker_type(_6296)",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "maker_type(bellini)",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "maker_type(_6308)",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "maker_type(bellini)",
                    "veracidad": "verde"
                  }
                ]
              }
            ]
          },
          {
            "nombre": "possible_pairing(_4652)",
            "veracidad": "verde",
            "valor": [
              {
                "nombre": "_4652=[pair(a,d),pair(c,b)]",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "[pair(a,d),pair(c,b)]=[pair(a,d),pair(c,b)]",
                    "veracidad": "verde"
                  }
                ]
              }
            ]
          },
          {
            "nombre": "satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)])",
            "veracidad": "verde",
            "valor": [
              {
                "nombre": "satisfies_rule(a,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_a,[pair(a,d),pair(c,b)])",
                "veracidad": "verde"
              }
            ]
          },
          {
            "nombre": "satisfies_rule(b,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_b,[pair(a,d),pair(c,b)])",
            "veracidad": "verde",
            "valor": [
              {
                "nombre": "lists:member(maker(b,_15288),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "bellini==bellini",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "bellini==bellini",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "stmt_b([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                    "veracidad": "verde",
                    "valor": [
                      {
                        "nombre": "lists:member(maker(b,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                        "veracidad": "verde"
                      }
                    ]
                  },
                  {
                    "nombre": "lists:member(maker(c,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                    "veracidad": "verde",
                    "valor": [
                      {
                        "nombre": "lists:member(maker(c,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                        "veracidad": "verde"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "nombre": "satisfies_rule(c,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_c,[pair(a,d),pair(c,b)])",
            "veracidad": "verde",
            "valor": [
              {
                "nombre": "lists:member(maker(c,_16376),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(maker(c,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "bellini==bellini",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "bellini==bellini",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "stmt_c([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "exactly_one_gold_is_bellini([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                    "veracidad": "verde",
                    "valor": [
                      {
                        "nombre": "lists:member(maker(a,_16702),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                        "veracidad": "verde",
                        "valor": [
                          {
                            "nombre": "lists:member(maker(a,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                            "veracidad": "verde"
                          }
                        ]
                      },
                      {
                        "nombre": "lists:member(maker(c,_16830),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                        "veracidad": "verde",
                        "valor": [
                          {
                            "nombre": "lists:member(maker(c,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                            "veracidad": "verde"
                          }
                        ]
                      },
                      {
                        "nombre": "cellini=bellini",
                        "veracidad": "rojo",
                        "valor": [
                          {
                            "nombre": "cellini=bellini",
                            "veracidad": "rojo"
                          }
                        ]
                      },
                      {
                        "nombre": "cellini=cellini",
                        "veracidad": "verde",
                        "valor": [
                          {
                            "nombre": "cellini=cellini",
                            "veracidad": "verde"
                          }
                        ]
                      },
                      {
                        "nombre": "bellini=bellini",
                        "veracidad": "verde",
                        "valor": [
                          {
                            "nombre": "bellini=bellini",
                            "veracidad": "verde"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "nombre": "satisfies_rule(d,[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],stmt_d,[pair(a,d),pair(c,b)])",
            "veracidad": "verde",
            "valor": [
              {
                "nombre": "lists:member(maker(d,_17458),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(maker(d,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "bellini==bellini",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "bellini==bellini",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "stmt_d([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)],[pair(a,d),pair(c,b)])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "exactly_one_gold_is_bellini([maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                    "veracidad": "verde",
                    "valor": [
                      {
                        "nombre": "lists:member(maker(a,_17784),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                        "veracidad": "verde",
                        "valor": [
                          {
                            "nombre": "lists:member(maker(a,cellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                            "veracidad": "verde"
                          }
                        ]
                      },
                      {
                        "nombre": "lists:member(maker(c,_17912),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                        "veracidad": "verde",
                        "valor": [
                          {
                            "nombre": "lists:member(maker(c,bellini),[maker(a,cellini),maker(b,bellini),maker(c,bellini),maker(d,bellini)])",
                            "veracidad": "verde"
                          }
                        ]
                      },
                      {
                        "nombre": "cellini=bellini",
                        "veracidad": "rojo",
                        "valor": [
                          {
                            "nombre": "cellini=bellini",
                            "veracidad": "rojo"
                          }
                        ]
                      },
                      {
                        "nombre": "cellini=cellini",
                        "veracidad": "verde",
                        "valor": [
                          {
                            "nombre": "cellini=cellini",
                            "veracidad": "verde"
                          }
                        ]
                      },
                      {
                        "nombre": "bellini=bellini",
                        "veracidad": "verde",
                        "valor": [
                          {
                            "nombre": "bellini=bellini",
                            "veracidad": "verde"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
]

        ANÁLISIS INICIAL LLM:
        % Define possible makers
maker_type(bellini).
maker_type(cellini).

% Define chest types
gold(a).
gold(c).
silver(b).
silver(d).

% Define possible maker assignments (all 16 combinations)
possible_makers(Makers) :-
    Makers = [maker(a, Ma), maker(b, Mb), maker(c, Mc), maker(d, Md)],
    maker_type(Ma), maker_type(Mb), maker_type(Mc), maker_type(Md).

% Define possible pairings (2 combinations)
possible_pairing(Pairing) :-
    (Pairing = [pair(a,b), pair(c,d)]) ; (Pairing = [pair(a,d), pair(c,b)]).

% Helper to find the chest paired with X in a given Pairing
is_paired((X, Y), Pairing) :-
    member(pair(X, Y), Pairing) ;
    member(pair(Y, X), Pairing).

% Statement A: "The silver chest paired with Cofre A is by Cellini."
% Interpretation: Refers to its paired silver chest.
stmt_a(Makers, Pairing) :-
    is_paired((a, SilverA), Pairing), % Find SilverA paired with a
    member(maker(SilverA, cellini), Makers).

% Statement B: "Cofre B is by Cellini OR both Cofre B and its paired gold chest are by Bellini."
% Interpretation: Standard, refers to itself and its paired gold chest.
stmt_b(Makers, Pairing) :-
    is_paired((b, GoldB), Pairing), % Find GoldB paired with b
    (
        member(maker(b, cellini), Makers) ;
        (
            member(maker(b, bellini), Makers),
            member(maker(GoldB, bellini), Makers)
        )
    ).

% Statement C & D: "EL COFRE DE ORO ES OBRA DE UN BELLINI"
% Interpretation: "Exactly one gold chest (A or C) is by Bellini."
exactly_one_gold_is_bellini(Makers) :-
    member(maker(a, Ma), Makers),
    member(maker(c, Mc), Makers),
    ((Ma = bellini, Mc = cellini) ; (Ma = cellini, Mc = bellini)).

stmt_c(Makers, _Pairing) :- exactly_one_gold_is_bellini(Makers).
stmt_d(Makers, _Pairing) :- exactly_one_gold_is_bellini(Makers).

% Rule: Bellini makes true statements, Cellini makes false statements.
% satisfies_rule(Chest, Makers, StatementPredicate, Args)
% Chest: The chest being checked (a, b, c, or d).
% Makers: The list of maker assignments.
% StatementPredicate: The predicate representing the chest's statement (e.g., stmt_a).
% Args: Arguments needed by the StatementPredicate (e.g., Pairing for A and B).

satisfies_rule(Chest, Makers, StmtPredicate, Args) :-
    member(maker(Chest, Maker), Makers),
    (
        Maker == bellini -> call(StmtPredicate, Makers, Args) % Bellini's statement must be true
        ;
        Maker == cellini -> 
           (\+ call(StmtPredicate, Makers, Args)) % Cellini's statement must be false
    ).

% Main query to find the solution
% Find Makers and Pairing that satisfy the rules for all chests.
% The query will bind Makers and Pairing to the solution.
% Query: ?- solve(Makers, Pairing).

solve(Makers, Pairing) :-
    possible_makers(Makers),
    possible_pairing(Pairing),
    satisfies_rule(a, Makers, stmt_a, Pairing),
    satisfies_rule(b, Makers, stmt_b, Pairing),
    satisfies_rule(c, Makers, stmt_c, Pairing),
    satisfies_rule(d, Makers, stmt_d, Pairing).

% Example query to get the solution:
% ?- solve(Makers, Pairing).
% This will output the Makers list and the Pairing list.
% The expected output for Makers is [maker(a, cellini), maker(b, bellini), maker(c, bellini), maker(d, bellini)].
% The expected output for Pairing is [pair(c,b), pair(a,d)].

        INSTRUCCIONES:
        1. Analiza las ramas de pensamientos que llevaron a una solución exitosa
        2. Formula una respuesta bien argumentada y clara al problema original
        3. Explica paso a paso cómo se llegó a esta solución
        4. Asegúrate de que la respuesta sea comprensible para alguien sin conocimientos técnicos de lógica formal

        Por favor, proporciona una respuesta estructurada que incluya:
        - La respuesta directa al problema
        - La justificación lógica paso a paso
        - Una explicación clara del razonamiento utilizado
        - Un resumen siendo contundente y breve con la pregunta que se te presentó al principio.
        

-------------------------------------------------------------------

-------------------------------------------------------------------
Respuesta de Gemini: ¡Excelente! Como experto en lógica, analizaré el problema, las cláusulas utilizadas y el rastro exitoso para proporcionar una respuesta clara y justificada.

**Resumen Contundente y Breve**

La pregunta era determinar quién hizo cada uno de los cuatro cofres (A, B, C, D) y cómo estaban emparejados. La solución encontrada, validada por el proceso lógico, es que el Cofre A fue hecho por Cellini, y los Cofres B, C y D fueron hechos por Bellini. Los cofres estaban emparejados de la siguiente manera: el Cofre A (Oro) con el Cofre D (Plata), y el Cofre C (Oro) con el Cofre B (Plata).

**La Respuesta Directa al Problema**

*   **Cofre A (Oro):** Hecho por Cellini
*   **Cofre B (Plata):** Hecho por Bellini
*   **Cofre C (Oro):** Hecho por Bellini
*   **Cofre D (Plata):** Hecho por Bellini
*   **Emparejamiento:** Cofre A está emparejado con Cofre D, y Cofre C está emparejado con Cofre B.

**Justificación Lógica Paso a Paso**

El problema se resuelve explorando sistemáticamente todas las posibles combinaciones de quién pudo haber hecho cada cofre (Bellini o Cellini) y cuáles eran las dos posibles parejas de cofres (A con B y C con D, o A con D y C con B). Para cada combinación, se verifica si las inscripciones en cada cofre cumplen la regla: si el cofre fue hecho por Bellini, su inscripción debe ser verdadera; si fue hecho por Cellini, su inscripción debe ser falsa.

El rastro de pensamiento exitoso nos muestra la combinación específica de autores y emparejamiento que satisface todas las condiciones. Analicemos cómo esta combinación pasa la prueba:

*   **La Combinación Propuesta (encontrada por la lógica):**
    *   Autores: A (Cellini), B (Bellini), C (Bellini), D (Bellini).
    *   Emparejamiento: A con D, C con B.

*   **Análisis de Cada Cofre con esta Combinación:**

    1.  **Cofre A (Oro):**
        *   **Autor Propuesto:** Cellini.
        *   **Regla para Cellini:** Su inscripción debe ser FALSA.
        *   **Inscripción en A:** "EL COFRE DE PLATA ES OBRA DE UN CELLINI".
        *   **Interpretación de la Inscripción:** Se refiere al cofre de plata que está emparejado con A. Según el emparejamiento propuesto, A está emparejado con D (Plata). La inscripción, por lo tanto, dice "EL COFRE D ES OBRA DE UN CELLINI".
        *   **Verificación de la Verdad/Falsedad:** ¿Es el Cofre D obra de un Cellini? Según el autor propuesto, D es obra de Bellini. Por lo tanto, la afirmación "EL COFRE D ES OBRA DE UN CELLINI" es FALSA.
        *   **Cumple la Regla?** Sí. El cofre A es de Cellini y su inscripción es Falsa. Esto es consistente.

    2.  **Cofre B (Plata):**
        *   **Autor Propuesto:** Bellini.
        *   **Regla para Bellini:** Su inscripción debe ser VERDADERA.
        *   **Inscripción en B:** "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI".
        *   **Interpretación de la Inscripción:** "EL COFRE B ES OBRA DE UN CELLINI O [EL COFRE B Y SU COFRE DE ORO PAREJA] SON AMBOS DE BELLINI". Según el emparejamiento propuesto, B está emparejado con C (Oro). La inscripción, por lo tanto, dice "EL COFRE B ES OBRA DE UN CELLINI O [EL COFRE B Y EL COFRE C] SON AMBOS DE BELLINI".
        *   **Verificación de la Verdad/Falsedad:** Es una declaración OR (Disyunción). Para que sea Verdadera, al menos una parte debe ser Verdadera.
            *   Parte 1: "¿Es el Cofre B obra de un Cellini?" Según el autor propuesto, B es obra de Bellini. Esto es FALSO.
            *   Parte 2: "¿Son el Cofre B y el Cofre C ambos de Bellini?" Según los autores propuestos, B es de Bellini y C es de Bellini. Ambos son de Bellini. Esto es VERDADERO.
            *   Resultado: FALSO (Parte 1) OR VERDADERO (Parte 2) = VERDADERO. La inscripción es VERDADERA.
        *   **Cumple la Regla?** Sí. El cofre B es de Bellini y su inscripción es Verdadera. Esto es consistente.

    3.  **Cofre C (Oro):**
        *   **Autor Propuesto:** Bellini.
        *   **Regla para Bellini:** Su inscripción debe ser VERDADERA.
        *   **Inscripción en C:** "EL COFRE DE ORO ES OBRA DE UN BELLINI".
        *   **Interpretación de la Inscripción:** Basado en cómo se define `stmt_c` y `stmt_d` en las cláusulas (ambas llaman a `exactly_one_gold_is_bellini`), la interpretación lógica es que esta inscripción se refiere a que *exactamente uno* de los dos cofres de oro (A o C) es obra de Bellini.
        *   **Verificación de la Verdad/Falsedad:** Los cofres de oro son A y C. Según los autores propuestos, A es de Cellini y C es de Bellini. ¿Es exactamente uno de ellos obra de Bellini? Sí, solo C lo es. Por lo tanto, la afirmación "Exactamente uno de los cofres de oro es obra de un Bellini" es VERDADERA.
        *   **Cumple la Regla?** Sí. El cofre C es de Bellini y su inscripción es Verdadera. Esto es consistente.

    4.  **Cofre D (Plata):**
        *   **Autor Propuesto:** Bellini.
        *   **Regla para Bellini:** Su inscripción debe ser VERDADERA.
        *   **Inscripción en D:** "EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI".
        *   **Interpretación de la Inscripción:** Es una declaración AND (Conjunción). Para que sea Verdadera, ambas partes deben ser Verdaderas.
            *   Parte 1: "EL COFRE DE ORO ES OBRA DE UN BELLINI". Al igual que con el cofre C, la interpretación lógica (basada en las cláusulas) es que esto significa que *exactamente uno* de los dos cofres de oro (A o C) es obra de Bellini. Como vimos en el punto 3, A es de Cellini y C es de Bellini, por lo que exactamente uno es de Bellini. Esta parte es VERDADERA.
            *   Parte 2: "POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI". Esta parte es una afirmación muy general. "Estos cofres" se refiere a los cuatro. Todos los cofres fueron hechos por Bellini o Cellini (o sus hijos, aunque la solución solo considera Bellini/Cellini padres). Como todos los cofres son por definición hechos por uno de ellos, esta afirmación es trivialmente VERDADERA.
            *   Resultado: VERDADERO (Parte 1) AND VERDADERO (Parte 2) = VERDADERO. La inscripción es VERDADERA.
        *   **Cumple la Regla?** Sí. El cofre D es de Bellini y su inscripción es Verdadera. Esto es consistente.

Como la combinación propuesta de autores y emparejamiento satisface la regla de Bellini/Cellini para *todos* los cofres, esta es la solución correcta. La herramienta lógica (Prolog, en este caso) exploró las posibilidades y encontró esta única combinación que cumple todas las condiciones simultáneamente.

**Explicación Clara del Razonamiento Utilizado**

El razonamiento se basa en la lógica deductiva y la exploración de posibilidades.

1.  **Identificar las Reglas Fundamentales:** Bellini siempre dice la verdad; Cellini siempre miente (dice lo falso).
2.  **Identificar las Incógnitas:** Quién hizo cada cofre (4 cofres, 2 opciones cada uno = 16 combinaciones) y cómo están emparejados (2 pares, 2 maneras de formarlos = 2 combinaciones). En total, 16 * 2 = 32 posibles escenarios completos (autores + emparejamiento).
3.  **Interpretar las Inscripciones:** Entender qué afirma realmente cada cofre. Esto requiere cuidado, especialmente con las inscripciones C y D, que parecen referirse a la condición general sobre los cofres de oro. La interpretación clave, sugerida por la implementación lógica, es que C y D afirman que "exactamente uno de los cofres de oro (A o C) fue hecho por Bellini". La inscripción de A se refiere a su cofre de plata emparejado, y la de B se refiere a sí mismo y a su cofre de oro emparejado.
4.  **Verificación de Escenarios:** Para cada uno de los 32 posibles escenarios, se hace una verificación:
    *   Se mira quién es el autor del cofre en ese escenario.
    *   Se evalúa la verdad o falsedad de la inscripción del cofre *basada en ese mismo escenario* (es decir, quiénes son los autores mencionados en la inscripción y cómo están emparejados los cofres en ese escenario).
    *   Se compara la verdad/falsedad de la inscripción con la regla del autor: Si el autor es Bellini, la inscripción *debe* ser Verdadera. Si el autor es Cellini, la inscripción *debe* ser Falsa.
    *   Si esta comparación falla para *cualquier* cofre en el escenario, se descarta ese escenario.
5.  **Encontrar la Solución:** El proceso continúa hasta encontrar un escenario donde la verificación es exitosa para *todos* los cofres simultáneamente. Este escenario es la solución del problema. La traza muestra que solo un escenario, el descrito en la respuesta directa, cumple con todas estas condiciones.

En esencia, es como probar diferentes llaves en una cerradura compleja; solo una combinación de llaves (la combinación de autores y emparejamiento) abrirá todas las cerraduras (satisfará las reglas de cada cofre). El análisis lógico o el programa de lógica son las herramientas que prueban las llaves de manera eficiente.

**Resumen Final**

Se me presentó el problema de identificar a los autores y el emparejamiento de cuatro cofres con inscripciones, sabiendo que Bellini siempre dice la verdad y Cellini siempre miente. Utilizando las definiciones lógicas proporcionadas, que representaban las reglas y las inscripciones, el análisis de las ramas de pensamiento exitosas revela que la única combinación que satisface todas las condiciones es que el Cofre A fue hecho por Cellini, y los Cofres B, C y D por Bellini, con el Cofre A emparejado con el D y el Cofre C emparejado con el B.

-------------------------------------------------------------------


INFO: Checkpoint guardado: checkpoints/mmrc_result_cycle0_Recordamos_que_Bellini_siempre_ponía_a_sus_cofres_.pkl
INFO: Historial del LLM guardado: checkpoints/llm_history_
____Recordamos_que_Bellini_siempre_ponía_a_sus_co_20250617_152603.pkl

=== RESULTADO DEL ANÁLISIS MMRC ===
✅ SE ENCONTRÓ UNA SOLUCIÓN EXITOSA

TODOS LOS PROBLEMAS CONFIGURADOS PROCESADOS.
