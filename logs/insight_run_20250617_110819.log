
======================================================================
PROCESANDO PROBLEMA: "
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas,..."
======================================================================
INFO: Historial del LLM cargado: checkpoints/llm_history_
____Recordamos_que_Bellini_siempre_ponía_a_sus_co_20250614_155534.pkl
INFO: Checkpoint cargado: checkpoints/mfsa_kr_store_Recordamos_que_Bellini_siempre_ponía_a_sus_cofres_.pkl
INFO: Historial del LLM cargado: checkpoints/llm_history_
____Recordamos_que_Bellini_siempre_ponía_a_sus_co_20250614_155534.pkl
INFO: MFSA omitido, KR-Store cargado desde checkpoint.

--- CICLO DE REFINAMIENTO 1 / 3 ---

--- Ejecutando MISA-J (CFCS) ---
Programa Prolog: autor(bellini).
autor(cellini).
inscripcion_verdadera(a) :- hecho_por(b, cellini).
inscripcion_verdadera(a) :- hecho_por(d, cellini).
inscripcion_verdadera(b) :- hecho_por(b, cellini).
inscripcion_verdadera(b) :- hecho_por(b, bellini), hecho_por(d, bellini).
inscripcion_verdadera(c) :- hecho_por(a, bellini).
inscripcion_verdadera(c) :- hecho_por(c, bellini).
inscripcion_verdadera(d) :- hecho_por(a, bellini).
inscripcion_verdadera(d) :- hecho_por(c, bellini).
solucion_revisada(AutorA, AutorB, AutorC, AutorD) :- member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], es_estado_consistente(Estado).
get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).
inscripcion_verdadera_en(a, Estado) :- get_autor(b, cellini, Estado) ; get_autor(d, cellini, Estado).
inscripcion_verdadera_en(b, Estado) :- get_autor(b, cellini, Estado) ; (get_autor(b, bellini, Estado), get_autor(d, bellini, Estado)).
inscripcion_verdadera_en(c, Estado) :- get_autor(a, bellini, Estado) ; get_autor(c, bellini, Estado).
inscripcion_verdadera_en(d, Estado) :- get_autor(a, bellini, Estado) ; get_autor(c, bellini, Estado).
es_estado_consistente(Estado) :- (get_autor(a, bellini, Estado) <-> inscripcion_verdadera_en(a, Estado)), (get_autor(b, bellini, Estado) <-> inscripcion_verdadera_en(b, Estado)), (get_autor(c, bellini, Estado) <-> inscripcion_verdadera_en(c, Estado)), (get_autor(d, bellini, Estado) <-> inscripcion_verdadera_en(d, Estado)).
(A <-> B) :- (A, B) ; (\+ A, \+ B).
--- Traza cruda de Prolog ---
ERROR: /tmp/tmpp5rtb75z.pl:38:3: Syntax error: Operator expected
                    call: catch((solucion_revisada(_4650,_4652,_4654,_4656),fail),_4668,(format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[_4668]),fail)) @ <dynamic>:0
                        call: solucion_revisada(_4650,_4652,_4654,_4656) @ <dynamic>:0
                          call: lists:member(_4650,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4652,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4654,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15486=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          exception(error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_15700))): es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                        exception(error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_15700))): solucion_revisada(_4650,_4652,_4654,_4656) @ /tmp/tmpp5rtb75z.pl:31
                        call: format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_148))]) @ <dynamic>:0
### CAUGHT_EXCEPTION ###
error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_148))
### END_EXCEPTION ###
                        exit: format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_148))]) @ <dynamic>:0
                        call: fail @ <dynamic>:0
--- Fin de traza cruda ---
INFO: Checkpoint guardado: checkpoints/misa_j_trace_cycle0_Recordamos_que_Bellini_siempre_ponía_a_sus_cofres_.pkl

--- Ejecutando MMRC ---


-------------------------------------------------------------------

--- Pregunta a Gemini (general) ---
Prompt: 
        Como experto en lógica y razonamiento, necesito que analices por qué no se pudo resolver el siguiente problema:

        PROBLEMA ORIGINAL:
        
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas, mientras que Cellini siempre les ponía inscripciones falsas.En algunos museos podemos ver parejas de cofres —uno de oro y otro de plata— que en un principio se hicieron y se vendieron como juego. La verdad es que la familia Bellini y la Cellini eran íntimas y que a veces colaboraban en algunas de estas parejas; aunque cada cofre lo hiciera siempre una sola persona, dentro de la pareja un cofre podía hacerlo uno y el otro otro diferente. Ambas familias se divertían muchísimo haciendo estas parejas de manera que la inteligente posteridad pudiera adivinar —o adivinar parcialmente— quiénes habían sido los autores.  Habían aparecido cuatro cofres, dos de oro y dos de plata; se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja. Me los enseñaron y pronto pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra (que consistía, entre otras cosas, en una excelente caja de botellas de Chianti) y un beso de una de las florentinas más maravillosas que haya existido nunca He aquí los cuatro cofres:
    Cofre A (Oro)
    EL COFRE DE PLATA ES OBRA DE UN CELLINI
    Cofre B (Plata)
    EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON
    DE BELLINI
    Cofre C (Oro)
    EL COFRE DE ORO ES OBRA DE UN BELLINI
    Cofre D (Plata)
    EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE
    ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI

    Tenemos ahora un problema:
    ¿Quién hizo cada uno de los cofres?
    

        CLAUSULAS USADAS:
        ['autor(bellini).', 'autor(cellini).', 'inscripcion_verdadera(a) :- hecho_por(b, cellini).', 'inscripcion_verdadera(a) :- hecho_por(d, cellini).', 'inscripcion_verdadera(b) :- hecho_por(b, cellini).', 'inscripcion_verdadera(b) :- hecho_por(b, bellini), hecho_por(d, bellini).', 'inscripcion_verdadera(c) :- hecho_por(a, bellini).', 'inscripcion_verdadera(c) :- hecho_por(c, bellini).', 'inscripcion_verdadera(d) :- hecho_por(a, bellini).', 'inscripcion_verdadera(d) :- hecho_por(c, bellini).', 'solucion_revisada(AutorA, AutorB, AutorC, AutorD) :- member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], es_estado_consistente(Estado).', 'get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).', 'inscripcion_verdadera_en(a, Estado) :- get_autor(b, cellini, Estado) ; get_autor(d, cellini, Estado).', 'inscripcion_verdadera_en(b, Estado) :- get_autor(b, cellini, Estado) ; (get_autor(b, bellini, Estado), get_autor(d, bellini, Estado)).', 'inscripcion_verdadera_en(c, Estado) :- get_autor(a, bellini, Estado) ; get_autor(c, bellini, Estado).', 'inscripcion_verdadera_en(d, Estado) :- get_autor(a, bellini, Estado) ; get_autor(c, bellini, Estado).', 'es_estado_consistente(Estado) :- (get_autor(a, bellini, Estado) <-> inscripcion_verdadera_en(a, Estado)), (get_autor(b, bellini, Estado) <-> inscripcion_verdadera_en(b, Estado)), (get_autor(c, bellini, Estado) <-> inscripcion_verdadera_en(c, Estado)), (get_autor(d, bellini, Estado) <-> inscripcion_verdadera_en(d, Estado)).', '(A <-> B) :- (A, B) ; (\\+ A, \\+ B).']

        RAMAS DE PENSAMIENTO MÁS PROMETEDORAS:
        [
  {
    "nombre": "root",
    "veracidad": "",
    "valor": [
      {
        "nombre": "catch((solucion_revisada(_4650,_4652,_4654,_4656),fail),_4668,(format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[_4668]),fail))",
        "veracidad": "",
        "valor": [
          {
            "nombre": "solucion_revisada(_4650,_4652,_4654,_4656)",
            "veracidad": "",
            "valor": [
              {
                "nombre": "lists:member(_4650,[bellini,cellini])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(bellini,[bellini,cellini])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "lists:member(_4652,[bellini,cellini])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(bellini,[bellini,cellini])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "lists:member(_4654,[bellini,cellini])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(bellini,[bellini,cellini])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "lists:member(_4656,[bellini,cellini])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(bellini,[bellini,cellini])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "_15486=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_148))])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_148))])",
                    "veracidad": "verde"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
]

        ANÁLISIS INICIAL LLM:
        None

        CONTEXTO:
        El sistema de razonamiento lógico no pudo encontrar una solución exitosa. Todas las ramas de pensamiento terminaron sin éxito.
        

        INSTRUCCIONES:
        1. Analiza las ramas de pensamiento que más se acercaron al éxito
        2. Identifica posibles errores en:
        - Las premisas del problema (¿faltan premisas importantes?)
        - Las premisas formuladas (¿hay premisas incorrectas o mal interpretadas?)
        - La lógica implementada (¿hay problemas en el razonamiento?)
        - Inconsistencias o contradicciones en las premisas
        

        3. Proporciona sugerencias específicas para:
        - Premisas que podrían estar faltando
        - Premisas que podrían estar mal formuladas
        - Mejoras en la lógica de razonamiento
        - Resolución de inconsistencias
        

        Por favor, proporciona un análisis estructurado que incluya:
        - Diagnóstico del problema principal
        - Análisis detallado de las ramas más prometedoras
        
        - Sugerencias específicas de mejora
        - Recomendaciones para futuras iteraciones
        4. Genera un programa de prolog:
        - Vuelve a escribir el programa pero corrige los errores anteriormente explicados.
        - Esto es sumamente importante: La corrección semántica y sintáctica del programa Prolog es crucial, ya que la verdad de tu hipótesis se deduce de la capacidad del programa para probarla. Asegúrate de que el código esté bien escrito y refleje lógicamente el problema y tu solución propuesta.
        - Para modelar implicaciones lógicas en Prolog de forma declarativa, usa la negación para expresar que no puede darse el caso de que el antecedente sea cierto y el consecuente falso.
        - Comenta el resultado esperado del programa pero nunca hables como si ya se hubiera ejecutado.
        

-------------------------------------------------------------------

-------------------------------------------------------------------
Respuesta de Gemini: Okay, let's break down why the initial attempt to solve the problem using Prolog failed and how to correct it.

## Análisis del Problema Original y la Lógica Implementada

El problema describe un escenario con cuatro cofres (dos de oro, dos de plata) que forman dos parejas desconocidas. Cada cofre fue hecho por un Bellini (inscripción verdadera) o un Cellini (inscripción falsa). La clave está en deducir quién hizo cada cofre basándose en las inscripciones y las reglas de las familias, *teniendo en cuenta que las parejas son inicialmente desconocidas*.

La información crucial que el problema añade es que "se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja". El protagonista "pronto pudo resolver el problema por lo que recibió unos excelentes honorarios. Pero además pudo establecer también quién había hecho cada cofre". Esto sugiere que la resolución involucra tanto determinar las parejas como los autores.

### Diagnóstico del Problema Principal

El problema fundamental con las cláusulas Prolog proporcionadas es que **no modelan las posibles parejas de cofres**. Asumen implícitamente que la interpretación de una inscripción de un cofre de oro que menciona "el cofre de plata" (Cofre A) o una inscripción de un cofre de plata que menciona "el cofre de oro" (Cofre D) puede referirse a *cualquiera* de los cofres del otro metal. Sin embargo, estas referencias deben dirigirse *específicamente* al cofre con el que está emparejado.

La segunda parte de la inscripción del Cofre B ("O LOS DOS COFRES SON DE BELLINI") y la segunda parte de la inscripción del Cofre D ("Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI") se refieren a los cofres que forman la *pareja* a la que pertenece el cofre con la inscripción.

Al no modelar las parejas, la interpretación de las inscripciones (`inscripcion_verdadera_en/2`) es incorrecta.

### Análisis Detallado de las Ramas Más Prometedoras (según el trace)

El trace proporcionado muestra el inicio de la ejecución del predicado `solucion_revisada/4`.
1.  `solucion_revisada/4` comienza generando una posible asignación de autores a los cuatro cofres (A, B, C, D). En el trace, se muestra la exploración de la posibilidad donde *todos* los cofres son hechos por Bellini (`AutorA=bellini`, `AutorB=bellini`, `AutorC=bellini`, `AutorD=bellini`).
2.  Se construye el estado `[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]`.
3.  Luego, intenta llamar al predicado `es_estado_consistente/1` con este estado.
4.  El trace reporta un `error(existence_error(procedure,es_estado_consistente/1),...)`. Esto indica que, en el entorno donde se generó el trace, el predicado `es_estado_consistente/1` no estaba definido o no era accesible en ese momento de la ejecución.

**Conclusión del Análisis del Trace:** El trace muestra que el programa falló prematuramente debido a un error de procedimiento (un predicado no encontrado) antes de poder siquiera evaluar si la lógica de consistencia era correcta o incorrecta. Sin embargo, incluso si este error de procedimiento se resolviera, el programa *aún fallaría lógicamente* porque la definición de `es_estado_consistente/1` se basa en `inscripcion_verdadera_en/2`, cuyas definiciones son incorrectas al no considerar las parejas.

### Errores Identificados

1.  **Falta de Premisas Importantes:** El modelo lógico no incluye la información crucial sobre las dos posibles configuraciones de parejas: (A con B y C con D) o (A con D y C con B).
2.  **Premisas Mal Formuladas/Interpretadas:**
    *   Las cláusulas para `inscripcion_verdadera(a)`, `inscripcion_verdadera(b)`, `inscripcion_verdadera(c)`, y `inscripcion_verdadera(d)` (y sus equivalentes `inscripcion_verdadera_en/2`) interpretan las referencias a "el cofre de plata", "el cofre de oro", y "los dos cofres" sin vincularlas a la pareja específica a la que pertenece el cofre con la inscripción.
    *   Cofre A: "EL COFRE DE PLATA ES OBRA DE UN CELLINI". Esto se refiere al cofre de plata *emparejado con A*. Las cláusulas originales (`inscripcion_verdadera(a) :- hecho_por(b, cellini).` y `inscripcion_verdadera(a) :- hecho_por(d, cellini).`) modelan una disyunción sobre cualquier cofre de plata, no sobre el cofre de plata de su pareja.
    *   Cofre B: "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI". "EL COFRE DE PLATA" es B mismo. "LOS DOS COFRES" es la pareja de B. La interpretación original (`inscripcion_verdadera(b) :- hecho_por(b, cellini).` y `inscripcion_verdadera(b) :- hecho_por(b, bellini), hecho_por(d, bellini).`) interpreta el segundo disyunto como "B y D son de Bellini", lo cual es incorrecto; debería ser "B y su pareja (el cofre de oro) son de Bellini".
    *   Cofre C: "EL COFRE DE ORO ES OBRA DE UN BELLINI". "EL COFRE DE ORO" en un cofre de oro se refiere a sí mismo (C). La interpretación original (`inscripcion_verdadera(c) :- hecho_por(a, bellini).` y `inscripcion_verdadera(c) :- hecho_por(c, bellini).`) modela una disyunción entre A y C, lo cual es incorrecto; debería ser solo C.
    *   Cofre D: "EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI". "EL COFRE DE ORO" se refiere al cofre de oro *emparejado con D*. La segunda parte "por lo menos uno de estos cofres es obra de un hijo o de Bellini o Cellini" es trivialmente cierta en este problema, ya que todos los cofres son obra de Bellini o Cellini. La interpretación original (`inscripcion_verdadera(d) :- hecho_por(a, bellini).` y `inscripcion_verdadera(d) :- hecho_por(c, bellini).`) modela una disyunción sobre cualquier cofre de oro, no sobre el cofre de oro de su pareja.
3.  **Lógica Implementada:** La estructura general de generar estados (asignaciones de autores) y luego comprobar la consistencia es correcta, *pero* el estado generado debe incluir también la información sobre la pareja, y la verificación de la consistencia debe usar las interpretaciones correctas de las inscripciones.
4.  **Procedural Error:** El `existence_error` en el trace es un problema de configuración o carga, no un error lógico del problema en sí, pero impidió que el programa alcanzara la fase de evaluación lógica completa.

### Sugerencias Específicas de Mejora

1.  **Premisas Faltantes:** Introducir un mecanismo para representar las dos posibles estructuras de parejas y considerar ambas como parte del "estado" que se verifica.
2.  **Premisas Mal Formuladas:** Re-escribir completamente las reglas que definen si una inscripción es verdadera (`inscripcion_verdadera_en/2`), asegurando que hagan referencia al cofre correcto dentro de la pareja actual.
3.  **Mejoras en la Lógica de Razonamiento:**
    *   El predicado principal (`solucion`) debe iterar no solo sobre todas las combinaciones de autores, sino también sobre las dos posibles combinaciones de parejas.
    *   La verificación de consistencia (`es_estado_consistente`) debe recibir un estado que incluya tanto las asignaciones de autores como la pareja actual.
    *   Asegurarse de que el operador `iff` (`<->`) esté correctamente definido y utilizado para aplicar la regla (Autor es Bellini Sii la inscripción es Verdadera).
4.  **Resolución de Inconsistencias:** Las inconsistencias solo surgirán cuando una combinación de autores y pareja viole la regla (Bellini=Verdadero, Cellini=Falso). La lógica corregida permitirá encontrar las combinaciones que *no* generan inconsistencias.

### Recomendaciones para Futuras Iteraciones

*   Modelar explícitamente todas las variables desconocidas en el estado del problema (autores de cada cofre y la configuración de parejas).
*   Utilizar predicados auxiliares claros para obtener información del estado (ej: obtener el autor de un cofre, obtener el cofre pareja de otro).
*   Definir las reglas de verdad de las inscripciones en función del estado completo (autores + parejas).
*   La solución es el estado (o estados) que cumplen con las reglas de consistencia para todos los cofres.

## Programa de Prolog Corregido

Aquí tienes un programa Prolog corregido que modela las parejas desconocidas y reinterpreta las inscripciones en función de la pareja considerada.

```prolog
% Definición de los posibles autores
autor(bellini).
autor(cellini).

% Definición de los cofres y su metal (no estrictamente necesario como hechos,
% pero útil para referencia si se expandiera el problema)
% cofre(a, oro).
% cofre(b, plata).
% cofre(c, oro).
% cofre(d, plata).

% Definición de las dos posibles configuraciones de parejas
% Una pareja es (CofreOro, CofrePlata)
posible_configuracion_parejas(config([pareja(a,b), pareja(c,d)])). % Pareja 1: (A,B), Pareja 2: (C,D)
posible_configuracion_parejas(config([pareja(a,d), pareja(c,b)])). % Pareja 1: (A,D), Pareja 2: (C,B)

% Un estado del problema incluye la asignación de autores y la configuración de parejas
% Estado = estado(Autores, ConfiguracionParejas)
% Autores = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)]

% Predicado auxiliar para obtener el autor de un cofre dado un estado de autores
get_autor(Cofre, Autor, AutoresEstado) :- member(cofre(Cofre, Autor), AutoresEstado).

% Predicado auxiliar para obtener el cofre emparejado con uno dado, según la configuración de parejas
get_cofre_pareja(Cofre, CofrePareja, config(ListaParejas)) :-
    % Buscar la pareja que contiene Cofre
    member(pareja(Cofre1, Cofre2), ListaParejas),
    % Determinar cuál es el cofre pareja
    (Cofre == Cofre1 -> CofrePareja = Cofre2 ; Cofre == Cofre2 -> CofrePareja = Cofre1).

% Predicados para determinar si la inscripción de un cofre es verdadera en un estado dado
% Esto depende de la asignación de autores y, para A, B y D, de la configuración de parejas.

% Inscripción Cofre A (Oro): "EL COFRE DE PLATA ES OBRA DE UN CELLINI"
% Se refiere al cofre de plata que forma pareja con A.
inscripcion_verdadera_en(a, estado(Autores, ConfiguracionParejas)) :-
    get_cofre_pareja(a, CofrePlataPareja, ConfiguracionParejas), % Obtener el cofre de plata emparejado con A
    get_autor(CofrePlataPareja, cellini, Autores). % Verificar si ese cofre de plata es de Cellini

% Inscripción Cofre B (Plata): "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI"
% "EL COFRE DE PLATA" se refiere a B mismo. "LOS DOS COFRES" se refiere a la pareja de B (B y su cofre de oro pareja).
inscripcion_verdadera_en(b, estado(Autores, ConfiguracionParejas)) :-
    % Parte 1: EL COFRE DE PLATA (B) ES OBRA DE UN CELLINI
    get_autor(b, cellini, Autores)
    ; % Disyunción lógica (OR)
    (   % Parte 2: LOS DOS COFRES (B y su pareja de oro) SON DE BELLINI
        get_cofre_pareja(b, CofreOroPareja, ConfiguracionParejas), % Obtener el cofre de oro emparejado con B
        get_autor(b, bellini, Autores), % B es de Bellini
        get_autor(CofreOroPareja, bellini, Autores) % Y su pareja de oro es de Bellini
    ).

% Inscripción Cofre C (Oro): "EL COFRE DE ORO ES OBRA DE UN BELLINI"
% Se refiere al cofre de oro C mismo (ya que C es un cofre de oro).
inscripcion_verdadera_en(c, estado(Autores, _)) :- % La configuración de parejas no afecta esta inscripción
    get_autor(c, bellini, Autores). % Verificar si C es de Bellini

% Inscripción Cofre D (Plata): "EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI"
% "EL COFRE DE ORO" se refiere al cofre de oro que forma pareja con D.
% La segunda parte ("Y por lo menos uno de estos cofres es obra de un hijo o de Bellini o Cellini")
% es trivialmente cierta en este problema, ya que todos los cofres son hechos por Bellini o Cellini.
% Por lo tanto, la inscripción es verdadera si y solo si la primera parte es verdadera.
inscripcion_verdadera_en(d, estado(Autores, ConfiguracionParejas)) :-
    get_cofre_pareja(d, CofreOroPareja, ConfiguracionParejas), % Obtener el cofre de oro emparejado con D
    get_autor(CofreOroPareja, bellini, Autores). % Verificar si ese cofre de oro es de Bellini

% Definición del bicondicional lógico A <-> B.
% A es verdadero si y solo si B es verdadero.
% Implementado como (A AND B) OR (NOT A AND NOT B)
iff(A, B) :- (A, B) ; (\+ A, \+ B).

% Predicado para verificar si un estado completo (autores + parejas) es consistente
% Un estado es consistente si para cada cofre:
% El autor es Bellini <-> La inscripción en ese cofre es verdadera en ese estado.
es_estado_consistente(Estado) :-
    Estado = estado(Autores, _), % Extraemos la lista de autores para acceder a ellos fácilmente
    % Regla para Cofre A
    get_autor(a, AutorA, Autores),
    iff(AutorA = bellini, inscripcion_verdadera_en(a, Estado)),
    % Regla para Cofre B
    get_autor(b, AutorB, Autores),
    iff(AutorB = bellini, inscripcion_verdadera_en(b, Estado)),
    % Regla para Cofre C
    get_autor(c, AutorC, Autores),
    iff(AutorC = bellini, inscripcion_verdadera_en(c, Estado)),
    % Regla para Cofre D
    get_autor(d, AutorD, Autores),
    iff(AutorD = bellini, inscripcion_verdadera_en(d, Estado)).

% Predicado principal para encontrar la(s) solución(es)
% Una solución es una asignación de autores para A, B, C, D y una configuración de parejas
% tal que el estado resultante sea consistente.
solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas) :-
    % 1. Generar todas las posibles asignaciones de autores (2^4 = 16 combinaciones)
    member(AutorA, [bellini, cellini]),
    member(AutorB, [bellini, cellini]),
    member(AutorC, [bellini, cellini]),
    member(AutorD, [bellini, cellini]),

    % 2. Generar todas las posibles configuraciones de parejas (2 combinaciones)
    posible_configuracion_parejas(ConfiguracionParejas),

    % 3. Formular el estado completo del problema
    Autores = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)],
    Estado = estado(Autores, ConfiguracionParejas),

    % 4. Verificar si este estado es consistente con las reglas
    es_estado_consistente(Estado).

% Predicado para consultar la solución y mostrarla de forma amigable
% Usamos findall/3 para encontrar todas las soluciones y luego imprimirlas.
% Si sabemos que hay una única solución (como sugiere el problema),
% podemos usar once/1 o simplemente permitir que se encuentre una y parar (con !).
% Encontrar todas asegura que no hay otras y confirma la unicidad si solo aparece una.

encontrar_y_mostrar_soluciones :-
    findall(
        solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas),
        solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas),
        ListaSoluciones
    ),
    (   ListaSoluciones = []
    ->  format('No se encontraron soluciones consistentes.~n', [])
    ;   format('Solucion(es) encontrada(s):~n', []),
        imprimir_soluciones(ListaSoluciones)
    ).

imprimir_soluciones([]).
imprimir_soluciones([solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas)|Resto]) :-
    format('  Autores: A=~w, B=~w, C=~w, D=~w~n', [AutorA, AutorB, AutorC, AutorD]),
    format('  Emparejamiento: ~w~n', [ConfiguracionParejas]),
    format('--------------------~n', []),
    imprimir_soluciones(Resto).

% Para ejecutar y encontrar la solución, consulta:
% ?- encontrar_y_mostrar_soluciones.
% O si esperas una sola solución y quieres la primera:
% ?- solucion(A, B, C, D, P).
```

### Comentario sobre el Resultado Esperado del Programa

Basándome en la lógica del problema y el programa corregido, espero que la consulta `?- encontrar_y_mostrar_soluciones.` encuentre y muestre **una única solución**. Esta solución consistirá en:

1.  Una asignación específica de `bellini` o `cellini` a cada uno de los cofres A, B, C y D (`AutorA`, `AutorB`, `AutorC`, `AutorD`).
2.  Una de las dos posibles configuraciones de parejas (`config([pareja(a,b), pareja(c,d)])` o `config([pareja(a,d), pareja(c,b)])`).

El programa explorará sistemáticamente las 32 combinaciones posibles (16 de autores * 2 de parejas) y aplicará las reglas de consistencia para filtrar aquellas que no son válidas. La(s) combinación(es) que sobrevivan serán la(s) solución(es) al problema. Dado que el problema original implica que la solución fue única y permitió deducir tanto las parejas como los autores, es altamente probable que solo una de estas 32 combinaciones sea consistente con todas las inscripciones y reglas.

-------------------------------------------------------------------


INFO: Checkpoint guardado: checkpoints/mmrc_result_cycle0_Recordamos_que_Bellini_siempre_ponía_a_sus_cofres_.pkl

=== RESULTADO DEL ANÁLISIS MMRC ===
❌ NO SE ENCONTRÓ SOLUCIÓN - ANÁLISIS DE ERRORES


-------------------------------------------------------------------

--- Pregunta a Gemini JSON (general) ---
Prompt: 
        Hola, basándote en tu respuesta anterior sobre el problema de lógica, necesito que extraigas y estructures la información de la siguiente manera en un formato JSON:

        El JSON debe tener tres claves principales en el nivel raíz:

        "facts": Un array de strings, donde cada string es un hecho Prolog completo tal como lo definiste.
        "rules": Un array de strings, donde cada string es una regla Prolog completa tal como la definiste.
        "objective": Un string que represente la consulta principal de Prolog que se usaría para obtener la solución (por ejemplo, solucion(Tweedledum, Tweedledee).).

        Consejos importantes para asegurar la compatibilidad con Prolog al generar los strings de hechos y reglas:
            Átomos: Los nombres de predicados y las constantes (átomos) en Prolog deben comenzar con una letra minúscula. Si un átomo necesita contener espacios, caracteres especiales, o comenzar con una letra mayúscula, debe ir entre comillas simples (ej: 'Yo soy Fidel', 'Luna').
            Variables: Las variables en Prolog siempre comienzan con una letra mayúscula o un guion bajo (ej: Dia, Hermano, _Ignorado).
            Sintaxis de Hechos: Asegúrate de que cada hecho termine con un punto (.). Ejemplo: miente_leon(lunes).
            Sintaxis de Reglas: Las reglas deben seguir el formato cabeza :- cuerpo., donde cabeza es la conclusión, :- significa "si", y cuerpo puede ser una o más metas separadas por comas (,) que representan una conjunción lógica. Cada regla debe terminar con un punto (.). Ejemplo: dice_verdad(leon, Dia) :- + miente_leon(Dia).
            Strings dentro de Prolog: Las frases como "Yo soy Fidel" deben ser tratadas como átomos en Prolog, es decir, encerradas en comillas simples si contienen espacios o mayúsculas no iniciales (ej: 'Yo soy Fidel').
            Escapado en JSON: Dado que los hechos y reglas de Prolog serán strings dentro de un JSON, si alguna vez usaras comillas dobles dentro de tu código Prolog (lo cual es menos común para átomos que las comillas simples), necesitarían ser escapadas (") dentro del string JSON. Usar comillas simples para los átomos Prolog evita este problema. Las barras invertidas () en Prolog (como en + para negación) son caracteres válidos y no necesitan doble escapado a menos que el propio string JSON lo requiera para el carácter .
            Los símbolos correctos de prolog son: \+ para negación, :- para implicación, ; para disyunción, . para final de cláusula, = para unificación, \= para desigualdad.
            Evita usar el \ innecesariamente puesto a que por si solo es un error de sintaxis

        Problema original:
            
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas, mientras que Cellini siempre les ponía inscripciones falsas.En algunos museos podemos ver parejas de cofres —uno de oro y otro de plata— que en un principio se hicieron y se vendieron como juego. La verdad es que la familia Bellini y la Cellini eran íntimas y que a veces colaboraban en algunas de estas parejas; aunque cada cofre lo hiciera siempre una sola persona, dentro de la pareja un cofre podía hacerlo uno y el otro otro diferente. Ambas familias se divertían muchísimo haciendo estas parejas de manera que la inteligente posteridad pudiera adivinar —o adivinar parcialmente— quiénes habían sido los autores.  Habían aparecido cuatro cofres, dos de oro y dos de plata; se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja. Me los enseñaron y pronto pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra (que consistía, entre otras cosas, en una excelente caja de botellas de Chianti) y un beso de una de las florentinas más maravillosas que haya existido nunca He aquí los cuatro cofres:
    Cofre A (Oro)
    EL COFRE DE PLATA ES OBRA DE UN CELLINI
    Cofre B (Plata)
    EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON
    DE BELLINI
    Cofre C (Oro)
    EL COFRE DE ORO ES OBRA DE UN BELLINI
    Cofre D (Plata)
    EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE
    ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI

    Tenemos ahora un problema:
    ¿Quién hizo cada uno de los cofres?
    

        Por favor, procesa la siguiente respuesta tuya y genera el JSON:
        Tu respuesta: 
            Okay, let's break down why the initial attempt to solve the problem using Prolog failed and how to correct it.

## Análisis del Problema Original y la Lógica Implementada

El problema describe un escenario con cuatro cofres (dos de oro, dos de plata) que forman dos parejas desconocidas. Cada cofre fue hecho por un Bellini (inscripción verdadera) o un Cellini (inscripción falsa). La clave está en deducir quién hizo cada cofre basándose en las inscripciones y las reglas de las familias, *teniendo en cuenta que las parejas son inicialmente desconocidas*.

La información crucial que el problema añade es que "se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja". El protagonista "pronto pudo resolver el problema por lo que recibió unos excelentes honorarios. Pero además pudo establecer también quién había hecho cada cofre". Esto sugiere que la resolución involucra tanto determinar las parejas como los autores.

### Diagnóstico del Problema Principal

El problema fundamental con las cláusulas Prolog proporcionadas es que **no modelan las posibles parejas de cofres**. Asumen implícitamente que la interpretación de una inscripción de un cofre de oro que menciona "el cofre de plata" (Cofre A) o una inscripción de un cofre de plata que menciona "el cofre de oro" (Cofre D) puede referirse a *cualquiera* de los cofres del otro metal. Sin embargo, estas referencias deben dirigirse *específicamente* al cofre con el que está emparejado.

La segunda parte de la inscripción del Cofre B ("O LOS DOS COFRES SON DE BELLINI") y la segunda parte de la inscripción del Cofre D ("Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI") se refieren a los cofres que forman la *pareja* a la que pertenece el cofre con la inscripción.

Al no modelar las parejas, la interpretación de las inscripciones (`inscripcion_verdadera_en/2`) es incorrecta.

### Análisis Detallado de las Ramas Más Prometedoras (según el trace)

El trace proporcionado muestra el inicio de la ejecución del predicado `solucion_revisada/4`.
1.  `solucion_revisada/4` comienza generando una posible asignación de autores a los cuatro cofres (A, B, C, D). En el trace, se muestra la exploración de la posibilidad donde *todos* los cofres son hechos por Bellini (`AutorA=bellini`, `AutorB=bellini`, `AutorC=bellini`, `AutorD=bellini`).
2.  Se construye el estado `[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]`.
3.  Luego, intenta llamar al predicado `es_estado_consistente/1` con este estado.
4.  El trace reporta un `error(existence_error(procedure,es_estado_consistente/1),...)`. Esto indica que, en el entorno donde se generó el trace, el predicado `es_estado_consistente/1` no estaba definido o no era accesible en ese momento de la ejecución.

**Conclusión del Análisis del Trace:** El trace muestra que el programa falló prematuramente debido a un error de procedimiento (un predicado no encontrado) antes de poder siquiera evaluar si la lógica de consistencia era correcta o incorrecta. Sin embargo, incluso si este error de procedimiento se resolviera, el programa *aún fallaría lógicamente* porque la definición de `es_estado_consistente/1` se basa en `inscripcion_verdadera_en/2`, cuyas definiciones son incorrectas al no considerar las parejas.

### Errores Identificados

1.  **Falta de Premisas Importantes:** El modelo lógico no incluye la información crucial sobre las dos posibles configuraciones de parejas: (A con B y C con D) o (A con D y C con B).
2.  **Premisas Mal Formuladas/Interpretadas:**
    *   Las cláusulas para `inscripcion_verdadera(a)`, `inscripcion_verdadera(b)`, `inscripcion_verdadera(c)`, y `inscripcion_verdadera(d)` (y sus equivalentes `inscripcion_verdadera_en/2`) interpretan las referencias a "el cofre de plata", "el cofre de oro", y "los dos cofres" sin vincularlas a la pareja específica a la que pertenece el cofre con la inscripción.
    *   Cofre A: "EL COFRE DE PLATA ES OBRA DE UN CELLINI". Esto se refiere al cofre de plata *emparejado con A*. Las cláusulas originales (`inscripcion_verdadera(a) :- hecho_por(b, cellini).` y `inscripcion_verdadera(a) :- hecho_por(d, cellini).`) modelan una disyunción sobre cualquier cofre de plata, no sobre el cofre de plata de su pareja.
    *   Cofre B: "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI". "EL COFRE DE PLATA" es B mismo. "LOS DOS COFRES" es la pareja de B. La interpretación original (`inscripcion_verdadera(b) :- hecho_por(b, cellini).` y `inscripcion_verdadera(b) :- hecho_por(b, bellini), hecho_por(d, bellini).`) interpreta el segundo disyunto como "B y D son de Bellini", lo cual es incorrecto; debería ser "B y su pareja (el cofre de oro) son de Bellini".
    *   Cofre C: "EL COFRE DE ORO ES OBRA DE UN BELLINI". "EL COFRE DE ORO" en un cofre de oro se refiere a sí mismo (C). La interpretación original (`inscripcion_verdadera(c) :- hecho_por(a, bellini).` y `inscripcion_verdadera(c) :- hecho_por(c, bellini).`) modela una disyunción entre A y C, lo cual es incorrecto; debería ser solo C.
    *   Cofre D: "EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI". "EL COFRE DE ORO" se refiere al cofre de oro *emparejado con D*. La segunda parte "por lo menos uno de estos cofres es obra de un hijo o de Bellini o Cellini" es trivialmente cierta en este problema, ya que todos los cofres son obra de Bellini o Cellini. La interpretación original (`inscripcion_verdadera(d) :- hecho_por(a, bellini).` y `inscripcion_verdadera(d) :- hecho_por(c, bellini).`) modela una disyunción sobre cualquier cofre de oro, no sobre el cofre de oro de su pareja.
3.  **Lógica Implementada:** La estructura general de generar estados (asignaciones de autores) y luego comprobar la consistencia es correcta, *pero* el estado generado debe incluir también la información sobre la pareja, y la verificación de la consistencia debe usar las interpretaciones correctas de las inscripciones.
4.  **Procedural Error:** El `existence_error` en el trace es un problema de configuración o carga, no un error lógico del problema en sí, pero impidió que el programa alcanzara la fase de evaluación lógica completa.

### Sugerencias Específicas de Mejora

1.  **Premisas Faltantes:** Introducir un mecanismo para representar las dos posibles estructuras de parejas y considerar ambas como parte del "estado" que se verifica.
2.  **Premisas Mal Formuladas:** Re-escribir completamente las reglas que definen si una inscripción es verdadera (`inscripcion_verdadera_en/2`), asegurando que hagan referencia al cofre correcto dentro de la pareja actual.
3.  **Mejoras en la Lógica de Razonamiento:**
    *   El predicado principal (`solucion`) debe iterar no solo sobre todas las combinaciones de autores, sino también sobre las dos posibles combinaciones de parejas.
    *   La verificación de consistencia (`es_estado_consistente`) debe recibir un estado que incluya tanto las asignaciones de autores como la pareja actual.
    *   Asegurarse de que el operador `iff` (`<->`) esté correctamente definido y utilizado para aplicar la regla (Autor es Bellini Sii la inscripción es Verdadera).
4.  **Resolución de Inconsistencias:** Las inconsistencias solo surgirán cuando una combinación de autores y pareja viole la regla (Bellini=Verdadero, Cellini=Falso). La lógica corregida permitirá encontrar las combinaciones que *no* generan inconsistencias.

### Recomendaciones para Futuras Iteraciones

*   Modelar explícitamente todas las variables desconocidas en el estado del problema (autores de cada cofre y la configuración de parejas).
*   Utilizar predicados auxiliares claros para obtener información del estado (ej: obtener el autor de un cofre, obtener el cofre pareja de otro).
*   Definir las reglas de verdad de las inscripciones en función del estado completo (autores + parejas).
*   La solución es el estado (o estados) que cumplen con las reglas de consistencia para todos los cofres.

## Programa de Prolog Corregido

Aquí tienes un programa Prolog corregido que modela las parejas desconocidas y reinterpreta las inscripciones en función de la pareja considerada.

```prolog
% Definición de los posibles autores
autor(bellini).
autor(cellini).

% Definición de los cofres y su metal (no estrictamente necesario como hechos,
% pero útil para referencia si se expandiera el problema)
% cofre(a, oro).
% cofre(b, plata).
% cofre(c, oro).
% cofre(d, plata).

% Definición de las dos posibles configuraciones de parejas
% Una pareja es (CofreOro, CofrePlata)
posible_configuracion_parejas(config([pareja(a,b), pareja(c,d)])). % Pareja 1: (A,B), Pareja 2: (C,D)
posible_configuracion_parejas(config([pareja(a,d), pareja(c,b)])). % Pareja 1: (A,D), Pareja 2: (C,B)

% Un estado del problema incluye la asignación de autores y la configuración de parejas
% Estado = estado(Autores, ConfiguracionParejas)
% Autores = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)]

% Predicado auxiliar para obtener el autor de un cofre dado un estado de autores
get_autor(Cofre, Autor, AutoresEstado) :- member(cofre(Cofre, Autor), AutoresEstado).

% Predicado auxiliar para obtener el cofre emparejado con uno dado, según la configuración de parejas
get_cofre_pareja(Cofre, CofrePareja, config(ListaParejas)) :-
    % Buscar la pareja que contiene Cofre
    member(pareja(Cofre1, Cofre2), ListaParejas),
    % Determinar cuál es el cofre pareja
    (Cofre == Cofre1 -> CofrePareja = Cofre2 ; Cofre == Cofre2 -> CofrePareja = Cofre1).

% Predicados para determinar si la inscripción de un cofre es verdadera en un estado dado
% Esto depende de la asignación de autores y, para A, B y D, de la configuración de parejas.

% Inscripción Cofre A (Oro): "EL COFRE DE PLATA ES OBRA DE UN CELLINI"
% Se refiere al cofre de plata que forma pareja con A.
inscripcion_verdadera_en(a, estado(Autores, ConfiguracionParejas)) :-
    get_cofre_pareja(a, CofrePlataPareja, ConfiguracionParejas), % Obtener el cofre de plata emparejado con A
    get_autor(CofrePlataPareja, cellini, Autores). % Verificar si ese cofre de plata es de Cellini

% Inscripción Cofre B (Plata): "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI"
% "EL COFRE DE PLATA" se refiere a B mismo. "LOS DOS COFRES" se refiere a la pareja de B (B y su cofre de oro pareja).
inscripcion_verdadera_en(b, estado(Autores, ConfiguracionParejas)) :-
    % Parte 1: EL COFRE DE PLATA (B) ES OBRA DE UN CELLINI
    get_autor(b, cellini, Autores)
    ; % Disyunción lógica (OR)
    (   % Parte 2: LOS DOS COFRES (B y su pareja de oro) SON DE BELLINI
        get_cofre_pareja(b, CofreOroPareja, ConfiguracionParejas), % Obtener el cofre de oro emparejado con B
        get_autor(b, bellini, Autores), % B es de Bellini
        get_autor(CofreOroPareja, bellini, Autores) % Y su pareja de oro es de Bellini
    ).

% Inscripción Cofre C (Oro): "EL COFRE DE ORO ES OBRA DE UN BELLINI"
% Se refiere al cofre de oro C mismo (ya que C es un cofre de oro).
inscripcion_verdadera_en(c, estado(Autores, _)) :- % La configuración de parejas no afecta esta inscripción
    get_autor(c, bellini, Autores). % Verificar si C es de Bellini

% Inscripción Cofre D (Plata): "EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI"
% "EL COFRE DE ORO" se refiere al cofre de oro que forma pareja con D.
% La segunda parte ("Y por lo menos uno de estos cofres es obra de un hijo o de Bellini o Cellini")
% es trivialmente cierta en este problema, ya que todos los cofres son hechos por Bellini o Cellini.
% Por lo tanto, la inscripción es verdadera si y solo si la primera parte es verdadera.
inscripcion_verdadera_en(d, estado(Autores, ConfiguracionParejas)) :-
    get_cofre_pareja(d, CofreOroPareja, ConfiguracionParejas), % Obtener el cofre de oro emparejado con D
    get_autor(CofreOroPareja, bellini, Autores). % Verificar si ese cofre de oro es de Bellini

% Definición del bicondicional lógico A <-> B.
% A es verdadero si y solo si B es verdadero.
% Implementado como (A AND B) OR (NOT A AND NOT B)
iff(A, B) :- (A, B) ; (\+ A, \+ B).

% Predicado para verificar si un estado completo (autores + parejas) es consistente
% Un estado es consistente si para cada cofre:
% El autor es Bellini <-> La inscripción en ese cofre es verdadera en ese estado.
es_estado_consistente(Estado) :-
    Estado = estado(Autores, _), % Extraemos la lista de autores para acceder a ellos fácilmente
    % Regla para Cofre A
    get_autor(a, AutorA, Autores),
    iff(AutorA = bellini, inscripcion_verdadera_en(a, Estado)),
    % Regla para Cofre B
    get_autor(b, AutorB, Autores),
    iff(AutorB = bellini, inscripcion_verdadera_en(b, Estado)),
    % Regla para Cofre C
    get_autor(c, AutorC, Autores),
    iff(AutorC = bellini, inscripcion_verdadera_en(c, Estado)),
    % Regla para Cofre D
    get_autor(d, AutorD, Autores),
    iff(AutorD = bellini, inscripcion_verdadera_en(d, Estado)).

% Predicado principal para encontrar la(s) solución(es)
% Una solución es una asignación de autores para A, B, C, D y una configuración de parejas
% tal que el estado resultante sea consistente.
solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas) :-
    % 1. Generar todas las posibles asignaciones de autores (2^4 = 16 combinaciones)
    member(AutorA, [bellini, cellini]),
    member(AutorB, [bellini, cellini]),
    member(AutorC, [bellini, cellini]),
    member(AutorD, [bellini, cellini]),

    % 2. Generar todas las posibles configuraciones de parejas (2 combinaciones)
    posible_configuracion_parejas(ConfiguracionParejas),

    % 3. Formular el estado completo del problema
    Autores = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)],
    Estado = estado(Autores, ConfiguracionParejas),

    % 4. Verificar si este estado es consistente con las reglas
    es_estado_consistente(Estado).

% Predicado para consultar la solución y mostrarla de forma amigable
% Usamos findall/3 para encontrar todas las soluciones y luego imprimirlas.
% Si sabemos que hay una única solución (como sugiere el problema),
% podemos usar once/1 o simplemente permitir que se encuentre una y parar (con !).
% Encontrar todas asegura que no hay otras y confirma la unicidad si solo aparece una.

encontrar_y_mostrar_soluciones :-
    findall(
        solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas),
        solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas),
        ListaSoluciones
    ),
    (   ListaSoluciones = []
    ->  format('No se encontraron soluciones consistentes.~n', [])
    ;   format('Solucion(es) encontrada(s):~n', []),
        imprimir_soluciones(ListaSoluciones)
    ).

imprimir_soluciones([]).
imprimir_soluciones([solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas)|Resto]) :-
    format('  Autores: A=~w, B=~w, C=~w, D=~w~n', [AutorA, AutorB, AutorC, AutorD]),
    format('  Emparejamiento: ~w~n', [ConfiguracionParejas]),
    format('--------------------~n', []),
    imprimir_soluciones(Resto).

% Para ejecutar y encontrar la solución, consulta:
% ?- encontrar_y_mostrar_soluciones.
% O si esperas una sola solución y quieres la primera:
% ?- solucion(A, B, C, D, P).
```

### Comentario sobre el Resultado Esperado del Programa

Basándome en la lógica del problema y el programa corregido, espero que la consulta `?- encontrar_y_mostrar_soluciones.` encuentre y muestre **una única solución**. Esta solución consistirá en:

1.  Una asignación específica de `bellini` o `cellini` a cada uno de los cofres A, B, C y D (`AutorA`, `AutorB`, `AutorC`, `AutorD`).
2.  Una de las dos posibles configuraciones de parejas (`config([pareja(a,b), pareja(c,d)])` o `config([pareja(a,d), pareja(c,b)])`).

El programa explorará sistemáticamente las 32 combinaciones posibles (16 de autores * 2 de parejas) y aplicará las reglas de consistencia para filtrar aquellas que no son válidas. La(s) combinación(es) que sobrevivan serán la(s) solución(es) al problema. Dado que el problema original implica que la solución fue única y permitió deducir tanto las parejas como los autores, es altamente probable que solo una de estas 32 combinaciones sea consistente con todas las inscripciones y reglas.
        

-------------------------------------------------------------------

-------------------------------------------------------------------
Respuesta JSON de Gemini: {
  "facts": [
    "autor(bellini).",
    "autor(cellini).",
    "posible_configuracion_parejas(config([pareja(a,b), pareja(c,d)])).",
    "posible_configuracion_parejas(config([pareja(a,d), pareja(c,b)]))."
  ],
  "rules": [
    "get_autor(Cofre, Autor, AutoresEstado) :- member(cofre(Cofre, Autor), AutoresEstado).",
    "get_cofre_pareja(Cofre, CofrePareja, config(ListaParejas)) :- member(pareja(Cofre1, Cofre2), ListaParejas), (Cofre == Cofre1 -> CofrePareja = Cofre2 ; Cofre == Cofre2 -> CofrePareja = Cofre1).",
    "inscripcion_verdadera_en(a, estado(Autores, ConfiguracionParejas)) :- get_cofre_pareja(a, CofrePlataPareja, ConfiguracionParejas), get_autor(CofrePlataPareja, cellini, Autores).",
    "inscripcion_verdadera_en(b, estado(Autores, ConfiguracionParejas)) :- get_autor(b, cellini, Autores) ; (get_cofre_pareja(b, CofreOroPareja, ConfiguracionParejas), get_autor(b, bellini, Autores), get_autor(CofreOroPareja, bellini, Autores)).",
    "inscripcion_verdadera_en(c, estado(Autores, _)) :- get_autor(c, bellini, Autores).",
    "inscripcion_verdadera_en(d, estado(Autores, ConfiguracionParejas)) :- get_cofre_pareja(d, CofreOroPareja, ConfiguracionParejas), get_autor(CofreOroPareja, bellini, Autores).",
    "iff(A, B) :- (A, B) ; (\\+ A, \\+ B).",
    "es_estado_consistente(Estado) :- Estado = estado(Autores, _), get_autor(a, AutorA, Autores), iff(AutorA = bellini, inscripcion_verdadera_en(a, Estado)), get_autor(b, AutorB, Autores), iff(AutorB = bellini, inscripcion_verdadera_en(b, Estado)), get_autor(c, AutorC, Autores), iff(AutorC = bellini, inscripcion_verdadera_en(c, Estado)), get_autor(d, AutorD, Autores), iff(AutorD = bellini, inscripcion_verdadera_en(d, Estado)).",
    "solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas) :- member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), posible_configuracion_parejas(ConfiguracionParejas), Autores = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], Estado = estado(Autores, ConfiguracionParejas), es_estado_consistente(Estado).",
    "encontrar_y_mostrar_soluciones :- findall( solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas), solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas), ListaSoluciones ), ( ListaSoluciones = [] -> format('No se encontraron soluciones consistentes.~n', []) ; format('Solucion(es) encontrada(s):~n', []), imprimir_soluciones(ListaSoluciones) ).",
    "imprimir_soluciones([]).",
    "imprimir_soluciones([solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas)|Resto]) :- format('  Autores: A=~w, B=~w, C=~w, D=~w~n', [AutorA, AutorB, AutorC, AutorD]), format('  Emparejamiento: ~w~n', [ConfiguracionParejas]), format('--------------------~n', []), imprimir_soluciones(Resto)."
  ],
  "objetive": [
    "encontrar_y_mostrar_soluciones."
  ]
}

-------------------------------------------------------------------


MFSA: Cláusulas del Problema Extraídas: 16

--- Cláusulas Extraídas ---

Cláusulas Objetivo:
- encontrar_y_mostrar_soluciones.

Cláusulas del Problema:
- autor(bellini).
- autor(cellini).
- posible_configuracion_parejas(config([pareja(a,b), pareja(c,d)])).
- posible_configuracion_parejas(config([pareja(a,d), pareja(c,b)])).
- get_autor(Cofre, Autor, AutoresEstado) :- member(cofre(Cofre, Autor), AutoresEstado).
- get_cofre_pareja(Cofre, CofrePareja, config(ListaParejas)) :- member(pareja(Cofre1, Cofre2), ListaParejas), (Cofre == Cofre1 -> CofrePareja = Cofre2 ; Cofre == Cofre2 -> CofrePareja = Cofre1).
- inscripcion_verdadera_en(a, estado(Autores, ConfiguracionParejas)) :- get_cofre_pareja(a, CofrePlataPareja, ConfiguracionParejas), get_autor(CofrePlataPareja, cellini, Autores).
- inscripcion_verdadera_en(b, estado(Autores, ConfiguracionParejas)) :- get_autor(b, cellini, Autores) ; (get_cofre_pareja(b, CofreOroPareja, ConfiguracionParejas), get_autor(b, bellini, Autores), get_autor(CofreOroPareja, bellini, Autores)).
- inscripcion_verdadera_en(c, estado(Autores, _)) :- get_autor(c, bellini, Autores).
- inscripcion_verdadera_en(d, estado(Autores, ConfiguracionParejas)) :- get_cofre_pareja(d, CofreOroPareja, ConfiguracionParejas), get_autor(CofreOroPareja, bellini, Autores).
- iff(A, B) :- (A, B) ; (\+ A, \+ B).
- es_estado_consistente(Estado) :- Estado = estado(Autores, _), get_autor(a, AutorA, Autores), iff(AutorA = bellini, inscripcion_verdadera_en(a, Estado)), get_autor(b, AutorB, Autores), iff(AutorB = bellini, inscripcion_verdadera_en(b, Estado)), get_autor(c, AutorC, Autores), iff(AutorC = bellini, inscripcion_verdadera_en(c, Estado)), get_autor(d, AutorD, Autores), iff(AutorD = bellini, inscripcion_verdadera_en(d, Estado)).
- solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas) :- member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), posible_configuracion_parejas(ConfiguracionParejas), Autores = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], Estado = estado(Autores, ConfiguracionParejas), es_estado_consistente(Estado).
- encontrar_y_mostrar_soluciones :- findall( solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas), solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas), ListaSoluciones ), ( ListaSoluciones = [] -> format('No se encontraron soluciones consistentes.~n', []) ; format('Solucion(es) encontrada(s):~n', []), imprimir_soluciones(ListaSoluciones) ).
- imprimir_soluciones([]).
- imprimir_soluciones([solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas)|Resto]) :- format('  Autores: A=~w, B=~w, C=~w, D=~w~n', [AutorA, AutorB, AutorC, AutorD]), format('  Emparejamiento: ~w~n', [ConfiguracionParejas]), format('--------------------~n', []), imprimir_soluciones(Resto).

Axiomas Base:
--- Formalización Completada ---
KR-Store:
  Axiomas Base: 0
  Cláusulas del Problema: 16
  Cláusulas Objetivo: 1

--- CICLO DE REFINAMIENTO 2 / 3 ---

--- Ejecutando MISA-J (CFCS) ---
Programa Prolog: autor(bellini).
autor(cellini).
posible_configuracion_parejas(config([pareja(a,b), pareja(c,d)])).
posible_configuracion_parejas(config([pareja(a,d), pareja(c,b)])).
get_autor(Cofre, Autor, AutoresEstado) :- member(cofre(Cofre, Autor), AutoresEstado).
get_cofre_pareja(Cofre, CofrePareja, config(ListaParejas)) :- member(pareja(Cofre1, Cofre2), ListaParejas), (Cofre == Cofre1 -> CofrePareja = Cofre2 ; Cofre == Cofre2 -> CofrePareja = Cofre1).
inscripcion_verdadera_en(a, estado(Autores, ConfiguracionParejas)) :- get_cofre_pareja(a, CofrePlataPareja, ConfiguracionParejas), get_autor(CofrePlataPareja, cellini, Autores).
inscripcion_verdadera_en(b, estado(Autores, ConfiguracionParejas)) :- get_autor(b, cellini, Autores) ; (get_cofre_pareja(b, CofreOroPareja, ConfiguracionParejas), get_autor(b, bellini, Autores), get_autor(CofreOroPareja, bellini, Autores)).
inscripcion_verdadera_en(c, estado(Autores, _)) :- get_autor(c, bellini, Autores).
inscripcion_verdadera_en(d, estado(Autores, ConfiguracionParejas)) :- get_cofre_pareja(d, CofreOroPareja, ConfiguracionParejas), get_autor(CofreOroPareja, bellini, Autores).
iff(A, B) :- (A, B) ; (\+ A, \+ B).
es_estado_consistente(Estado) :- Estado = estado(Autores, _), get_autor(a, AutorA, Autores), iff(AutorA = bellini, inscripcion_verdadera_en(a, Estado)), get_autor(b, AutorB, Autores), iff(AutorB = bellini, inscripcion_verdadera_en(b, Estado)), get_autor(c, AutorC, Autores), iff(AutorC = bellini, inscripcion_verdadera_en(c, Estado)), get_autor(d, AutorD, Autores), iff(AutorD = bellini, inscripcion_verdadera_en(d, Estado)).
solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas) :- member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), posible_configuracion_parejas(ConfiguracionParejas), Autores = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], Estado = estado(Autores, ConfiguracionParejas), es_estado_consistente(Estado).
encontrar_y_mostrar_soluciones :- findall( solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas), solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas), ListaSoluciones ), ( ListaSoluciones = [] -> format('No se encontraron soluciones consistentes.~n', []) ; format('Solucion(es) encontrada(s):~n', []), imprimir_soluciones(ListaSoluciones) ).
imprimir_soluciones([]).
imprimir_soluciones([solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas)|Resto]) :- format('  Autores: A=~w, B=~w, C=~w, D=~w~n', [AutorA, AutorB, AutorC, AutorD]), format('  Emparejamiento: ~w~n', [ConfiguracionParejas]), format('--------------------~n', []), imprimir_soluciones(Resto).
--- Salida Estándar de Prolog (stdout) ---
No se encontraron soluciones consistentes.

--- Traza cruda de Prolog ---
                        call: encontrar_y_mostrar_soluciones @ <dynamic>:0
                          call: findall(solucion(_6204,_6206,_6208,_6210,_6212),solucion(_6204,_6206,_6208,_6210,_6212),_6226) @ <dynamic>:0
                                  call: solucion(_6204,_6206,_6208,_6210,_6212) @ <dynamic>:0
                                    call: lists:member(_6204,[bellini,cellini]) @ <dynamic>:0
                                    exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: lists:member(_6206,[bellini,cellini]) @ <dynamic>:0
                                    exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: lists:member(_6208,[bellini,cellini]) @ <dynamic>:0
                                    exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: lists:member(_6210,[bellini,cellini]) @ <dynamic>:0
                                    exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _13904=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14054=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14210,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14210),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14666,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14722,_14724),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14666=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14722,_14724),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14666,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==d @ <dynamic>:0
                                            fail: a==d @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14666,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14210),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14210),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14210,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _13968=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14118=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14274,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14274),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14730,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14786,_14788),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14730=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14786,_14788),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14730,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==b @ <dynamic>:0
                                            fail: a==b @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14730,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14274),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14274),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14274,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                    redo(0): lists:member(_6210,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _13976=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14126=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14282,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14282),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14738,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14794,_14796),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14738=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14794,_14796),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14738,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==d @ <dynamic>:0
                                            fail: a==d @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14738,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14282),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14282),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14282,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _14040=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14190=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14346,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14346),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14802,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14858,_14860),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14802=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:27
                                      exit: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_15608,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_15608),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        redo(23): inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:28
                                          call: get_cofre_pareja(b,_16130,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_16186,_16188),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==a @ <dynamic>:0
                                            fail: b==a @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_16130,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==d @ <dynamic>:0
                                            fail: b==d @ <dynamic>:0
                                            redo(0): lists:member(pareja(_16186,_16188),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==c @ <dynamic>:0
                                            fail: b==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_16130,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==b @ <dynamic>:0
                                            exit: b==b @ <dynamic>:0
                                            call: _16130=c @ <dynamic>:0
                                            exit: c=c @ <dynamic>:0
                                          exit: get_cofre_pareja(b,c,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                          call: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:28
                                      exit: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(c,_17318,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(c,_17318),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(c,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(c,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(c,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:29
                                      exit: iff(bellini=bellini,inscripcion_verdadera_en(c,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(d,_18136,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(d,_18136),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(d,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(d,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(d,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(d,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(d,_18624,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_18680,_18682),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: d==a @ <dynamic>:0
                                            fail: d==a @ <dynamic>:0
                                          redo(32): get_cofre_pareja(d,_18624,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: d==d @ <dynamic>:0
                                            exit: d==d @ <dynamic>:0
                                            call: _18624=a @ <dynamic>:0
                                            exit: a=a @ <dynamic>:0
                                          exit: get_cofre_pareja(d,a,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(d,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:30
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(d,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                            redo(0): lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(c,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(c,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(c,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(c,_17318),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(c,_17318),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(c,_17318,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_15608),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_15608),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_15608,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14858,_14860),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14802,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==b @ <dynamic>:0
                                            fail: a==b @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14802,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14346),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14346),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14346,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                    redo(0): lists:member(_6208,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: lists:member(_6210,[bellini,cellini]) @ <dynamic>:0
                                    exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _13976=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14126=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14282,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14282),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14738,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14794,_14796),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14738=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14794,_14796),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14738,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==d @ <dynamic>:0
                                            fail: a==d @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14738,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14282),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14282),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14282,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _14040=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14190=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14346,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14346),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14802,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14858,_14860),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14802=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14858,_14860),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14802,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==b @ <dynamic>:0
                                            fail: a==b @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14802,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14346),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14346),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14346,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                    redo(0): lists:member(_6210,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _14048=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14198=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14354,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14354),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14810,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14866,_14868),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14810=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14866,_14868),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14810,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==d @ <dynamic>:0
                                            fail: a==d @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14810,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14354),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14354),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14354,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _14112=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14262=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14418,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14418),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14874,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14930,_14932),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14874=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:27
                                      exit: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_15680,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_15680),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        redo(23): inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:28
                                          call: get_cofre_pareja(b,_16202,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_16258,_16260),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==a @ <dynamic>:0
                                            fail: b==a @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_16202,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==d @ <dynamic>:0
                                            fail: b==d @ <dynamic>:0
                                            redo(0): lists:member(pareja(_16258,_16260),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==c @ <dynamic>:0
                                            fail: b==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_16202,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==b @ <dynamic>:0
                                            exit: b==b @ <dynamic>:0
                                            call: _16202=c @ <dynamic>:0
                                            exit: c=c @ <dynamic>:0
                                          exit: get_cofre_pareja(b,c,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                          call: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_15680),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_15680),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_15680,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14930,_14932),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14874,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==b @ <dynamic>:0
                                            fail: a==b @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14874,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14418),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14418),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14418,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                    redo(0): lists:member(_6206,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: lists:member(_6208,[bellini,cellini]) @ <dynamic>:0
                                    exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: lists:member(_6210,[bellini,cellini]) @ <dynamic>:0
                                    exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _13976=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14126=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14282,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14282),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14738,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14794,_14796),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14738=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:27
                                      exit: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_15544,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_15544),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:28
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_15544),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_15544),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_15544,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14794,_14796),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14738,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==d @ <dynamic>:0
                                            fail: a==d @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14738,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14282),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14282),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14282,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _14040=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14190=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14346,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14346),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14802,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14858,_14860),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14802=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14858,_14860),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14802,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==b @ <dynamic>:0
                                            fail: a==b @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14802,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14346),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14346),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14346,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                    redo(0): lists:member(_6210,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _14048=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14198=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14354,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14354),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14810,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14866,_14868),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14810=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:27
                                      exit: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_15616,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_15616),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:28
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_15616),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_15616),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_15616,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14866,_14868),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14810,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==d @ <dynamic>:0
                                            fail: a==d @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14810,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14354),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14354),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14354,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _14112=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14262=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14418,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14418),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14874,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14930,_14932),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14874=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:27
                                      exit: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_15680,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_15680),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:28
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_15680),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_15680),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_15680,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14930,_14932),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14874,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==b @ <dynamic>:0
                                            fail: a==b @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14874,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14418),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14418),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14418,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                    redo(0): lists:member(_6208,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: lists:member(_6210,[bellini,cellini]) @ <dynamic>:0
                                    exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _14048=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14198=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14354,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14354),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14810,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14866,_14868),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14810=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:27
                                      exit: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_15616,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_15616),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:28
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_15616),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_15616),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_15616,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14866,_14868),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14810,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==d @ <dynamic>:0
                                            fail: a==d @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14810,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14354),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14354),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14354,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _14112=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14262=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14418,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14418),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14874,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14930,_14932),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14874=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14930,_14932),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14874,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==b @ <dynamic>:0
                                            fail: a==b @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14874,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14418),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14418),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14418,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                    redo(0): lists:member(_6210,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _14120=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14270=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14426,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14426),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14882,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14938,_14940),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14882=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:27
                                      exit: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_15688,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_15688),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:28
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_15688),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_15688),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_15688,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14938,_14940),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14882,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==d @ <dynamic>:0
                                            fail: a==d @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14882,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14426),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14426),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14426,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _14184=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14334=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14490,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14490),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14946,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_15002,_15004),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14946=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:27
                                      exit: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_15752,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_15752),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:28
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_15752),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_15752),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_15752,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_15002,_15004),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14946,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==b @ <dynamic>:0
                                            fail: a==b @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14946,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14490),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14490),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14490,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                    redo(0): lists:member(_6204,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: lists:member(_6206,[bellini,cellini]) @ <dynamic>:0
                                    exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: lists:member(_6208,[bellini,cellini]) @ <dynamic>:0
                                    exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: lists:member(_6210,[bellini,cellini]) @ <dynamic>:0
                                    exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _13976=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14126=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14282,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14282),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14770,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14826,_14828),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14770=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14826,_14828),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14770,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==d @ <dynamic>:0
                                            fail: a==d @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14770,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(25): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                      exit: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_14846,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_14846),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        redo(23): inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:28
                                          call: get_cofre_pareja(b,_15368,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_15424,_15426),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==a @ <dynamic>:0
                                            fail: b==a @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_15368,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==b @ <dynamic>:0
                                            exit: b==b @ <dynamic>:0
                                            call: _15368=a @ <dynamic>:0
                                            exit: a=a @ <dynamic>:0
                                          exit: get_cofre_pareja(b,a,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                          call: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_15424,_15426),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==c @ <dynamic>:0
                                            fail: b==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_15368,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==d @ <dynamic>:0
                                            fail: b==d @ <dynamic>:0
                                          fail: get_cofre_pareja(b,_15368,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_14846),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_14846),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_14846,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14282),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14282),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14282,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _14040=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14190=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14346,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14346),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14834,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14890,_14892),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14834=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14890,_14892),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14834,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==b @ <dynamic>:0
                                            fail: a==b @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14834,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(25): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      exit: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_14910,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_14910),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        redo(23): inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:28
                                          call: get_cofre_pareja(b,_15432,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_15488,_15490),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==a @ <dynamic>:0
                                            fail: b==a @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_15432,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==d @ <dynamic>:0
                                            fail: b==d @ <dynamic>:0
                                            redo(0): lists:member(pareja(_15488,_15490),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==c @ <dynamic>:0
                                            fail: b==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_15432,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==b @ <dynamic>:0
                                            exit: b==b @ <dynamic>:0
                                            call: _15432=c @ <dynamic>:0
                                            exit: c=c @ <dynamic>:0
                                          exit: get_cofre_pareja(b,c,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                          call: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:28
                                      exit: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(c,_16620,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(c,_16620),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(c,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(c,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(c,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:29
                                      exit: iff(bellini=bellini,inscripcion_verdadera_en(c,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(d,_17438,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(d,_17438),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(d,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(d,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(d,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(d,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(d,_17894,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_17950,_17952),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: d==a @ <dynamic>:0
                                            fail: d==a @ <dynamic>:0
                                          redo(32): get_cofre_pareja(d,_17894,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: d==d @ <dynamic>:0
                                            exit: d==d @ <dynamic>:0
                                            call: _17894=a @ <dynamic>:0
                                            exit: a=a @ <dynamic>:0
                                          exit: get_cofre_pareja(d,a,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_17950,_17952),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: d==c @ <dynamic>:0
                                            fail: d==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(d,_17894,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: d==b @ <dynamic>:0
                                            fail: d==b @ <dynamic>:0
                                          fail: get_cofre_pareja(d,_17894,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(d,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(d,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(d,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                            redo(0): lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(c,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(c,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(c,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(c,_16620),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(c,_16620),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(c,_16620,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_14910),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_14910),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_14910,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14346),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14346),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14346,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                    redo(0): lists:member(_6210,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _14048=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14198=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14354,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14354),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14842,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14898,_14900),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14842=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14898,_14900),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14842,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==d @ <dynamic>:0
                                            fail: a==d @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14842,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(25): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                      exit: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_14918,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_14918),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        redo(23): inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:28
                                          call: get_cofre_pareja(b,_15440,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_15496,_15498),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==a @ <dynamic>:0
                                            fail: b==a @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_15440,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==b @ <dynamic>:0
                                            exit: b==b @ <dynamic>:0
                                            call: _15440=a @ <dynamic>:0
                                            exit: a=a @ <dynamic>:0
                                          exit: get_cofre_pareja(b,a,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                          call: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_15496,_15498),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==c @ <dynamic>:0
                                            fail: b==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_15440,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==d @ <dynamic>:0
                                            fail: b==d @ <dynamic>:0
                                          fail: get_cofre_pareja(b,_15440,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_14918),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_14918),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_14918,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14354),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14354),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14354,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _14112=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14262=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14418,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14418),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14906,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14962,_14964),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14906=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:27
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14418),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14418),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14418,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                    redo(0): lists:member(_6208,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: lists:member(_6210,[bellini,cellini]) @ <dynamic>:0
                                    exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _14048=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14198=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14354,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14354),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14842,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14898,_14900),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14842=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14898,_14900),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14842,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==d @ <dynamic>:0
                                            fail: a==d @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14842,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(25): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                      exit: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_14918,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_14918),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        redo(23): inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:28
                                          call: get_cofre_pareja(b,_15440,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_15496,_15498),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==a @ <dynamic>:0
                                            fail: b==a @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_15440,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==b @ <dynamic>:0
                                            exit: b==b @ <dynamic>:0
                                            call: _15440=a @ <dynamic>:0
                                            exit: a=a @ <dynamic>:0
                                          exit: get_cofre_pareja(b,a,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                          call: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_15496,_15498),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==c @ <dynamic>:0
                                            fail: b==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_15440,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==d @ <dynamic>:0
                                            fail: b==d @ <dynamic>:0
                                          fail: get_cofre_pareja(b,_15440,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_14918),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_14918),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_14918,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14354),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14354),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14354,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _14112=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14262=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14418,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14418),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14906,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14962,_14964),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14906=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14962,_14964),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14906,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==b @ <dynamic>:0
                                            fail: a==b @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14906,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(25): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      exit: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_14982,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_14982),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        redo(23): inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:28
                                          call: get_cofre_pareja(b,_15504,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_15560,_15562),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==a @ <dynamic>:0
                                            fail: b==a @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_15504,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==d @ <dynamic>:0
                                            fail: b==d @ <dynamic>:0
                                            redo(0): lists:member(pareja(_15560,_15562),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==c @ <dynamic>:0
                                            fail: b==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_15504,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==b @ <dynamic>:0
                                            exit: b==b @ <dynamic>:0
                                            call: _15504=c @ <dynamic>:0
                                            exit: c=c @ <dynamic>:0
                                          exit: get_cofre_pareja(b,c,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                          call: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_14982),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_14982),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_14982,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14418),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14418),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14418,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                    redo(0): lists:member(_6210,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _14120=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14270=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14426,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14426),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14914,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14970,_14972),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14914=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14970,_14972),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14914,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==d @ <dynamic>:0
                                            fail: a==d @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14914,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(25): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                      exit: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_14990,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_14990),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        redo(23): inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:28
                                          call: get_cofre_pareja(b,_15512,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_15568,_15570),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==a @ <dynamic>:0
                                            fail: b==a @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_15512,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==b @ <dynamic>:0
                                            exit: b==b @ <dynamic>:0
                                            call: _15512=a @ <dynamic>:0
                                            exit: a=a @ <dynamic>:0
                                          exit: get_cofre_pareja(b,a,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                          call: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            fail: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                          fail: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_15568,_15570),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,d),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: b==c @ <dynamic>:0
                                            fail: b==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(b,_15512,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                            call: b==d @ <dynamic>:0
                                            fail: b==d @ <dynamic>:0
                                          fail: get_cofre_pareja(b,_15512,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      redo(9): iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: bellini=bellini @ <dynamic>:0
                                        exit: bellini=bellini @ <dynamic>:0
                                      fail: iff(bellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_14990),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_14990),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_14990,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14426),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14426),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14426,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _14184=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14334=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14490,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14490),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14978,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_15034,_15036),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14978=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:27
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14490),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14490),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14490,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                    redo(0): lists:member(_6206,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: lists:member(_6208,[bellini,cellini]) @ <dynamic>:0
                                    exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: lists:member(_6210,[bellini,cellini]) @ <dynamic>:0
                                    exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _14048=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14198=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14354,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14354),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14842,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14898,_14900),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14842=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:27
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14354),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14354),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14354,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _14112=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14262=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14418,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14418),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14906,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14962,_14964),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14906=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_14962,_14964),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14906,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==b @ <dynamic>:0
                                            fail: a==b @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14906,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(25): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      exit: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_14982,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_14982),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:28
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_14982),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_14982),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_14982,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14418),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14418),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14418,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                    redo(0): lists:member(_6210,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _14120=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14270=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14426,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14426),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14914,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14970,_14972),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14914=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:27
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14426),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14426),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14426,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _14184=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14334=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14490,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14490),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14978,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_15034,_15036),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14978=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:27
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14490),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14490),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14490,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                    redo(0): lists:member(_6208,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: lists:member(_6210,[bellini,cellini]) @ <dynamic>:0
                                    exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _14120=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14270=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14426,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14426),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14914,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_14970,_14972),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14914=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:27
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14426),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14426),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14426,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _14184=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                                    call: _14334=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14490,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14490),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14978,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_15034,_15036),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14978=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            fail: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                          fail: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            redo(0): lists:member(pareja(_15034,_15036),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            exit: lists:member(pareja(c,b),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==c @ <dynamic>:0
                                            fail: a==c @ <dynamic>:0
                                          redo(32): get_cofre_pareja(a,_14978,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                            call: a==b @ <dynamic>:0
                                            fail: a==b @ <dynamic>:0
                                          fail: get_cofre_pareja(a,_14978,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                        fail: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      redo(25): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      exit: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                      call: get_autor(b,_15054,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(b,_15054),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:28
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(b,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(b,_15054),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(b,_15054),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(b,_15054,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14490),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14490),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14490,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                    redo(0): lists:member(_6210,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                    call: posible_configuracion_parejas(_6212) @ <dynamic>:0
                                    exit: posible_configuracion_parejas(config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:23
                                    call: _14192=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14342=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                      call: get_autor(a,_14498,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14498),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_14986,config([pareja(a,b),pareja(c,d)])) @ <dynamic>:0
                                            call: lists:member(pareja(_15042,_15044),[pareja(a,b),pareja(c,d)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,b),[pareja(a,b),pareja(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _14986=b @ <dynamic>:0
                                            exit: b=b @ <dynamic>:0
                                          exit: get_cofre_pareja(a,b,config([pareja(a,b),pareja(c,d)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ /tmp/tmp74plpg67.pl:27
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14498),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14498),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14498,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,b),pareja(c,d)]))) @ <dynamic>:0
                                    redo(0): posible_configuracion_parejas(_6212) @ /tmp/tmp74plpg67.pl:24
                                    exit: posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:24
                                    call: _14256=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                                    call: _14406=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    exit: estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                    call: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                      call: get_autor(a,_14562,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        call: lists:member(cofre(a,_14562),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                        exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                      exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                      call: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(9): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: cellini=bellini @ <dynamic>:0
                                        fail: cellini=bellini @ <dynamic>:0
                                      redo(17): iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ /tmp/tmp74plpg67.pl:31
                                        call: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                          call: get_cofre_pareja(a,_15050,config([pareja(a,d),pareja(c,b)])) @ <dynamic>:0
                                            call: lists:member(pareja(_15106,_15108),[pareja(a,d),pareja(c,b)]) @ <dynamic>:0
                                            exit: lists:member(pareja(a,d),[pareja(a,d),pareja(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                            call: a==a @ <dynamic>:0
                                            exit: a==a @ <dynamic>:0
                                            call: _15050=d @ <dynamic>:0
                                            exit: d=d @ <dynamic>:0
                                          exit: get_cofre_pareja(a,d,config([pareja(a,d),pareja(c,b)])) @ /tmp/tmp74plpg67.pl:26
                                          call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                            exit: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                          exit: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmp74plpg67.pl:25
                                        exit: inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ /tmp/tmp74plpg67.pl:27
                                      fail: iff(cellini=bellini,inscripcion_verdadera_en(a,estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))) @ <dynamic>:0
                                        redo(0): lists:member(cofre(a,_14562),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                        fail: lists:member(cofre(a,_14562),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                      fail: get_autor(a,_14562,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                    fail: es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))) @ <dynamic>:0
                                  fail: solucion(_6204,_6206,_6208,_6210,_6212) @ <dynamic>:0
                          exit: findall(solucion(_6204,_6206,_6208,_6210,_6212),user:solucion(_6204,_6206,_6208,_6210,_6212),[]) @ /usr/lib/swi-prolog/boot/bags.pl:91
                          call: []=[] @ <dynamic>:0
                          exit: []=[] @ <dynamic>:0
                          call: format('No se encontraron soluciones consistentes.~n',[]) @ <dynamic>:0
                          exit: format('No se encontraron soluciones consistentes.~n',[]) @ <dynamic>:0
                        exit: encontrar_y_mostrar_soluciones @ /tmp/tmp74plpg67.pl:34
                        call: fail @ <dynamic>:0
                        fail: fail @ <dynamic>:0
--- Fin de traza cruda ---
INFO: Checkpoint guardado: checkpoints/misa_j_trace_cycle1_Recordamos_que_Bellini_siempre_ponía_a_sus_cofres_.pkl

--- Ejecutando MMRC ---


-------------------------------------------------------------------

--- Pregunta a Gemini (general) ---
Prompt: 
        Como experto en lógica y razonamiento, necesito que analices el siguiente problema y su solución:

        PROBLEMA ORIGINAL:
        
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas, mientras que Cellini siempre les ponía inscripciones falsas.En algunos museos podemos ver parejas de cofres —uno de oro y otro de plata— que en un principio se hicieron y se vendieron como juego. La verdad es que la familia Bellini y la Cellini eran íntimas y que a veces colaboraban en algunas de estas parejas; aunque cada cofre lo hiciera siempre una sola persona, dentro de la pareja un cofre podía hacerlo uno y el otro otro diferente. Ambas familias se divertían muchísimo haciendo estas parejas de manera que la inteligente posteridad pudiera adivinar —o adivinar parcialmente— quiénes habían sido los autores.  Habían aparecido cuatro cofres, dos de oro y dos de plata; se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja. Me los enseñaron y pronto pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra (que consistía, entre otras cosas, en una excelente caja de botellas de Chianti) y un beso de una de las florentinas más maravillosas que haya existido nunca He aquí los cuatro cofres:
    Cofre A (Oro)
    EL COFRE DE PLATA ES OBRA DE UN CELLINI
    Cofre B (Plata)
    EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON
    DE BELLINI
    Cofre C (Oro)
    EL COFRE DE ORO ES OBRA DE UN BELLINI
    Cofre D (Plata)
    EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE
    ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI

    Tenemos ahora un problema:
    ¿Quién hizo cada uno de los cofres?
    

        CLAUSULAS USADAS:
        ['autor(bellini).', 'autor(cellini).', 'posible_configuracion_parejas(config([pareja(a,b), pareja(c,d)])).', 'posible_configuracion_parejas(config([pareja(a,d), pareja(c,b)])).', 'get_autor(Cofre, Autor, AutoresEstado) :- member(cofre(Cofre, Autor), AutoresEstado).', 'get_cofre_pareja(Cofre, CofrePareja, config(ListaParejas)) :- member(pareja(Cofre1, Cofre2), ListaParejas), (Cofre == Cofre1 -> CofrePareja = Cofre2 ; Cofre == Cofre2 -> CofrePareja = Cofre1).', 'inscripcion_verdadera_en(a, estado(Autores, ConfiguracionParejas)) :- get_cofre_pareja(a, CofrePlataPareja, ConfiguracionParejas), get_autor(CofrePlataPareja, cellini, Autores).', 'inscripcion_verdadera_en(b, estado(Autores, ConfiguracionParejas)) :- get_autor(b, cellini, Autores) ; (get_cofre_pareja(b, CofreOroPareja, ConfiguracionParejas), get_autor(b, bellini, Autores), get_autor(CofreOroPareja, bellini, Autores)).', 'inscripcion_verdadera_en(c, estado(Autores, _)) :- get_autor(c, bellini, Autores).', 'inscripcion_verdadera_en(d, estado(Autores, ConfiguracionParejas)) :- get_cofre_pareja(d, CofreOroPareja, ConfiguracionParejas), get_autor(CofreOroPareja, bellini, Autores).', 'iff(A, B) :- (A, B) ; (\\+ A, \\+ B).', 'es_estado_consistente(Estado) :- Estado = estado(Autores, _), get_autor(a, AutorA, Autores), iff(AutorA = bellini, inscripcion_verdadera_en(a, Estado)), get_autor(b, AutorB, Autores), iff(AutorB = bellini, inscripcion_verdadera_en(b, Estado)), get_autor(c, AutorC, Autores), iff(AutorC = bellini, inscripcion_verdadera_en(c, Estado)), get_autor(d, AutorD, Autores), iff(AutorD = bellini, inscripcion_verdadera_en(d, Estado)).', 'solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas) :- member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), posible_configuracion_parejas(ConfiguracionParejas), Autores = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], Estado = estado(Autores, ConfiguracionParejas), es_estado_consistente(Estado).', "encontrar_y_mostrar_soluciones :- findall( solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas), solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas), ListaSoluciones ), ( ListaSoluciones = [] -> format('No se encontraron soluciones consistentes.~n', []) ; format('Solucion(es) encontrada(s):~n', []), imprimir_soluciones(ListaSoluciones) ).", 'imprimir_soluciones([]).', "imprimir_soluciones([solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas)|Resto]) :- format('  Autores: A=~w, B=~w, C=~w, D=~w~n', [AutorA, AutorB, AutorC, AutorD]), format('  Emparejamiento: ~w~n', [ConfiguracionParejas]), format('--------------------~n', []), imprimir_soluciones(Resto)."]

        RAMAS DE PENSAMIENTOS EXITOSAS:
        [
  {
    "nombre": "root",
    "veracidad": "",
    "valor": [
      {
        "nombre": "encontrar_y_mostrar_soluciones",
        "veracidad": "verde",
        "valor": [
          {
            "nombre": "findall(solucion(_6204,_6206,_6208,_6210,_6212),solucion(_6204,_6206,_6208,_6210,_6212),_6226)",
            "veracidad": "verde",
            "valor": [
              {
                "nombre": "solucion(_6204,_6206,_6208,_6210,_6212)",
                "veracidad": "rojo",
                "valor": [
                  {
                    "nombre": "lists:member(_6204,[bellini,cellini])",
                    "veracidad": "verde",
                    "valor": [
                      {
                        "nombre": "lists:member(cellini,[bellini,cellini])",
                        "veracidad": "verde"
                      }
                    ]
                  },
                  {
                    "nombre": "lists:member(_6206,[bellini,cellini])",
                    "veracidad": "verde",
                    "valor": [
                      {
                        "nombre": "lists:member(cellini,[bellini,cellini])",
                        "veracidad": "verde"
                      }
                    ]
                  },
                  {
                    "nombre": "lists:member(_6208,[bellini,cellini])",
                    "veracidad": "verde",
                    "valor": [
                      {
                        "nombre": "lists:member(cellini,[bellini,cellini])",
                        "veracidad": "verde"
                      }
                    ]
                  },
                  {
                    "nombre": "lists:member(_6210,[bellini,cellini])",
                    "veracidad": "verde",
                    "valor": [
                      {
                        "nombre": "lists:member(cellini,[bellini,cellini])",
                        "veracidad": "verde"
                      }
                    ]
                  },
                  {
                    "nombre": "posible_configuracion_parejas(_6212)",
                    "veracidad": "verde",
                    "valor": [
                      {
                        "nombre": "posible_configuracion_parejas(config([pareja(a,d),pareja(c,b)]))",
                        "veracidad": "verde"
                      }
                    ]
                  },
                  {
                    "nombre": "_14256=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]",
                    "veracidad": "verde",
                    "valor": [
                      {
                        "nombre": "[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]",
                        "veracidad": "verde"
                      }
                    ]
                  },
                  {
                    "nombre": "_14406=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))",
                    "veracidad": "verde",
                    "valor": [
                      {
                        "nombre": "estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))=estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)]))",
                        "veracidad": "verde"
                      }
                    ]
                  },
                  {
                    "nombre": "es_estado_consistente(estado([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],config([pareja(a,d),pareja(c,b)])))",
                    "veracidad": "rojo",
                    "valor": [
                      {
                        "nombre": "get_autor(a,_14562,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)])",
                        "veracidad": "rojo",
                        "valor": [
                          {
                            "nombre": "lists:member(cofre(a,_14562),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)])",
                            "veracidad": "rojo",
                            "valor": [
                              {
                                "nombre": "lists:member(cofre(a,_14562),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)])",
                                "veracidad": "rojo"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "nombre": "[]=[]",
            "veracidad": "verde",
            "valor": [
              {
                "nombre": "[]=[]",
                "veracidad": "verde"
              }
            ]
          },
          {
            "nombre": "format('No se encontraron soluciones consistentes.~n',[])",
            "veracidad": "verde",
            "valor": [
              {
                "nombre": "format('No se encontraron soluciones consistentes.~n',[])",
                "veracidad": "verde"
              }
            ]
          }
        ]
      }
    ]
  }
]

        ANÁLISIS INICIAL LLM:
        Okay, procedamos con el análisis sistemático y la resolución del problema de lógica.

**1. Entendimiento del Problema**

El problema presenta cuatro cofres (dos de oro: A y C; dos de plata: B y D) con inscripciones, hechos por dos posibles autores (Bellini o Cellini). La regla clave es la relación entre el autor y la veracidad de la inscripción: Bellini siempre escribe la verdad, Cellini siempre escribe mentiras. No se conoce la pareja original de cada cofre (uno de oro y uno de plata), pero el problema de determinar los autores fue resuelto sin esta información, lo que implica que las inscripciones no dependen de la pareja desconocida. Debemos determinar el autor de cada cofre basándonos únicamente en esta información.

Extraigamos y modelemos cada declaración:

*   **Regla Global 1:** Bellini pone inscripciones verdaderas.
*   **Regla Global 2:** Cellini pone inscripciones falsas.
    *   *Modelación:* Un cofre fue hecho por Bellini si y solo si su inscripción es verdadera. Un cofre fue hecho por Cellini si y solo si su inscripción es falsa. Esto implica que un cofre no puede ser hecho por Bellini y Cellini a la vez, y cada cofre debe ser hecho por uno de ellos.

*   **Cofre A (Oro):**
    *   *Premisa 3:* El cofre A tiene la inscripción: "EL COFRE DE PLATA ES OBRA DE UN CELLINI".
    *   *Interpretación necesaria para la solubilidad sin conocer parejas:* Dado que hay dos cofres de plata (B y D) y la inscripción se refiere a "EL COFRE DE PLATA" en singular, y la solución fue hallada sin conocer las parejas, la interpretación más plausible es que la inscripción se refiere a que *al menos uno* de los cofres de plata (B o D) es obra de un Cellini. Si se refiriera a "el otro cofre de plata" en la pareja, no podríamos resolverlo. Si se refiriera a "todos los cofres de plata", el singular sería incorrecto. Si se refiriera a "un cofre de plata específico, sin importar cuál", la verdad de la inscripción sería indeterminada. La interpretación "al menos uno" es la que permite derivar una solución única.
    *   *Modelación (Sentencia Prolog):* La inscripción del cofre A es verdadera si y solo si (el cofre B es obra de Cellini O el cofre D es obra de Cellini).
        `inscripcion_verdadera(a) :- (hecho_por(b, cellini) ; hecho_por(d, cellini)).`

*   **Cofre B (Plata):**
    *   *Premisa 4:* El cofre B tiene la inscripción: "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI".
    *   *Interpretación necesaria:* Aquí "EL COFRE DE PLATA" podría referirse a B mismo o a D. "LOS DOS COFRES" podría referirse a B y su pareja, B y D (los dos de plata), A y B (los dos mezclados), etc. Siguiendo la lógica que permite la solubilidad sin conocer parejas y buscando la interpretación más coherente con la estructura "X o Y", donde X parece ser una propiedad del cofre que lleva la inscripción ("El cofre de plata" - B) y Y una propiedad de un conjunto de cofres, la interpretación que resultó exitosa en el pre-análisis es que "EL COFRE DE PLATA" se refiere a B, y "LOS DOS COFRES" se refiere a los dos cofres de plata (B y D).
    *   *Modelación (Sentencia Prolog):* La inscripción del cofre B es verdadera si y solo si (el cofre B es obra de Cellini O (el cofre B es obra de Bellini Y el cofre D es obra de Bellini)).
        `inscripcion_verdadera(b) :- (hecho_por(b, cellini) ; (hecho_por(b, bellini), hecho_por(d, bellini))).`

*   **Cofre C (Oro):**
    *   *Premisa 5:* El cofre C tiene la inscripción: "EL COFRE DE ORO ES OBRA DE UN BELLINI".
    *   *Interpretación necesaria:* Similar al cofre A, la interpretación más plausible es que *al menos uno* de los cofres de oro (A o C) es obra de un Bellini.
    *   *Modelación (Sentencia Prolog):* La inscripción del cofre C es verdadera si y solo si (el cofre A es obra de Bellini O el cofre C es obra de Bellini).
        `inscripcion_verdadera(c) :- (hecho_por(a, bellini) ; hecho_por(c, bellini)).`

*   **Cofre D (Plata):**
    *   *Premisa 6:* El cofre D tiene la inscripción: "EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI".
    *   *Interpretación necesaria:* La segunda parte "POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI" significa que al menos uno de los cuatro cofres fue hecho por Bellini o Cellini. Dado que todos los cofres fueron hechos por Bellini o Cellini según el contexto del problema, esta parte de la inscripción es una tautología (siempre verdadera) en este universo lógico. Por lo tanto, la verdad de la inscripción D depende únicamente de la primera parte: "EL COFRE DE ORO ES OBRA DE UN BELLINI". Al igual que en C, esto se interpreta como que *al menos uno* de los cofres de oro (A o C) es obra de un Bellini.
    *   *Modelación (Sentencia Prolog):* La inscripción del cofre D es verdadera si y solo si (el cofre A es obra de Bellini O el cofre C es obra de Bellini).
        `inscripcion_verdadera(d) :- (hecho_por(a, bellini) ; hecho_por(c, bellini)).`

*   **Premisa Implícita 7:** Cada cofre fue hecho por exactamente uno de los autores (Bellini o Cellini).
    *   *Modelación:* Para cada cofre X, `hecho_por(X, bellini)` es verdadero si y solo si `not(hecho_por(X, cellini))`. Y `hecho_por(X, cellini)` es verdadero si y solo si `not(hecho_por(X, bellini))`.
    *   Esto se modelará en Prolog vinculando el autor a la verdad de la inscripción: `hecho_por(X, bellini) :- inscripcion_verdadera(X).` y `hecho_por(X, cellini) :- \+ inscripcion_verdadera(X).`

**Resumen de sentencias Prolog modeladas (a partir de las premisas e interpretaciones necesarias):**

1.  `hecho_por(X, bellini) :- inscripcion_verdadera(X).`
2.  `hecho_por(X, cellini) :- \+ inscripcion_verdadera(X).`
3.  `inscripcion_verdadera(a) :- (hecho_por(b, cellini) ; hecho_por(d, cellini)).`
4.  `inscripcion_verdadera(b) :- (hecho_por(b, cellini) ; (hecho_por(b, bellini), hecho_por(d, bellini))).`
5.  `inscripcion_verdadera(c) :- (hecho_por(a, bellini) ; hecho_por(c, bellini)).`
6.  `inscripcion_verdadera(d) :- (hecho_por(a, bellini) ; hecho_por(c, bellini)).`

*(Nota: La interpretación de las inscripciones, especialmente B, es crucial y se basa en la suposición de que el problema tiene una solución única derivable sin conocer las parejas. La interpretación "al menos uno" para las referencias a cofres de un tipo genérico y la interpretación específica para B son las que permiten el razonamiento deductivo posterior).*

**2. Análisis e Inferencia Preliminar**

Basándonos en las sentencias modeladas, realicemos inferencias paso a paso:

*   Observamos que las inscripciones de C y D tienen la misma condición de verdad: `(hecho_por(a, bellini) ; hecho_por(c, bellini))`.
*   Por lo tanto, `inscripcion_verdadera(c)` es verdadera si y solo si `inscripcion_verdadera(d)` es verdadera.
*   Según las reglas 1 y 2, si las inscripciones de C y D tienen el mismo valor de verdad, entonces C y D deben tener el mismo autor. O ambos son Bellini, o ambos son Cellini.

*   Consideremos la inscripción de B: `inscripcion_verdadera(b) :- (hecho_por(b, cellini) ; (hecho_por(b, bellini), hecho_por(d, bellini))).`
*   Según las reglas 1 y 2, `hecho_por(b, bellini)` es verdadero si y solo si `inscripcion_verdadera(b)` es verdadera. `hecho_por(b, cellini)` es verdadero si y solo si `\+ inscripcion_verdadera(b)` es verdadera (es decir, `hecho_por(b, cellini)` es verdadero si y solo si `hecho_por(b, bellini)` es falso).
*   Sustituyendo en la condición de verdad de B: `hecho_por(b, bellini)` es verdadero si y solo si (`\+ hecho_por(b, bellini)` ES VERDADERO O (`hecho_por(b, bellini)` ES VERDADERO Y `hecho_por(d, bellini)` ES VERDADERO)).
*   Llamemos P = `hecho_por(b, bellini)` y Q = `hecho_por(d, bellini)`. La equivalencia es `P <=> (\+ P ; (P, Q))`.
*   Simplificando la parte derecha: `\+ P ; (P, Q)` es lógicamente equivalente a `(\+ P ; P) , (\+ P ; Q)`, que es `true , (\+ P ; Q)`, o simplemente `\+ P ; Q`.
*   Así, la equivalencia para B es `P <=> (\+ P ; Q)`.
*   Esto es `(P => (\+ P ; Q)) Y ((\+ P ; Q) => P)`.
*   `P => (\+ P ; Q)` es `\+ P ; (\+ P ; Q)`, que es `\+ P ; Q` (si P es verdadero, Q debe ser verdadero).
*   `(\+ P ; Q) => P` es `\+ (\+ P ; Q) ; P`, que es `(P Y \+ Q) ; P`. Por absorción, esto se simplifica a `P`.
*   Por lo tanto, la equivalencia `P <=> (\+ P ; Q)` es equivalente a `(\+ P ; Q) Y P`.
*   Esto solo puede ser verdadero si P es verdadero. Si P es falso, `(true ; Q) Y false` es `true Y false` que es falso.
*   Si P es verdadero, la condición es `(false ; Q) Y true`, que es `Q Y true`, o simplemente `Q`.
*   Así, `P <=> (\+ P ; Q)` se simplifica a `P Y Q`.
*   En términos de autores: `hecho_por(b, bellini)` es verdadero Y `hecho_por(d, bellini)` es verdadero.
*   Conclusión: El cofre B fue hecho por Bellini Y el cofre D fue hecho por Bellini.

*   Acabamos de deducir que D fue hecho por Bellini.
*   Como C y D tienen el mismo autor, y D fue hecho por Bellini, entonces C también debe haber sido hecho por Bellini.
*   Hasta ahora: B es Bellini, D es Bellini, C es Bellini.

*   Ahora usemos la inscripción de A: `inscripcion_verdadera(a) :- (hecho_por(b, cellini) ; hecho_por(d, cellini)).`
*   Según las reglas 1 y 2, A es Bellini si y solo si `inscripcion_verdadera(a)` es verdadera. A es Cellini si y solo si `\+ inscripcion_verdadera(a)` es verdadera.
*   Sabemos que B es Bellini, por lo tanto NO es Cellini (`hecho_por(b, cellini)` es falso).
*   Sabemos que D es Bellini, por lo tanto NO es Cellini (`hecho_por(d, cellini)` es falso).
*   La condición de verdad para A es `(false ; false)`, que es falso.
*   Por lo tanto, `inscripcion_verdadera(a)` es falsa.
*   Si la inscripción de A es falsa, A fue hecho por Cellini.

*   Resumamos las deducciones:
    1.  De la inscripción B, inferimos que B es Bellini y D es Bellini.
    2.  De que C y D tienen el mismo autor y D es Bellini, inferimos que C es Bellini.
    3.  De que B y D no son Cellini, y la inscripción A dice que al menos un plata es Cellini, inferimos que la inscripción A es falsa.
    4.  De que la inscripción A es falsa, inferimos que A es Cellini.

*   Validemos con las inscripciones de C y D (que comparten la condición de verdad `(hecho_por(a, bellini) ; hecho_por(c, bellini))`).
    *   Nuestra deducción dice que A es Cellini (entonces `hecho_por(a, bellini)` es falso) y C es Bellini (`hecho_por(c, bellini)` es verdadero).
    *   La condición de verdad es `(false ; true)`, que es verdadero.
    *   Por lo tanto, `inscripcion_verdadera(c)` es verdadera, y `inscripcion_verdadera(d)` es verdadera.
    *   Esto es consistente con nuestra deducción de que C es Bellini (inscripción verdadera) y D es Bellini (inscripción verdadera).

*   Todas las condiciones parecen ser consistentes con esta asignación de autores.

**3. Hipótesis de Solución**

Basado en el análisis e inferencias lógicas, la hipótesis de solución es la siguiente:
*   El cofre A (Oro) fue hecho por Cellini.
*   El cofre B (Plata) fue hecho por Bellini.
*   El cofre C (Oro) fue hecho por Bellini.
*   El cofre D (Plata) fue hecho por Bellini.

**4. Comprobación Formal con Prolog**

Vamos a crear un programa en Prolog que modele las reglas y las inscripciones. Utilizaremos un enfoque de "generar y probar" o, más eficientemente, definiremos las relaciones y dejaremos que Prolog encuentre la asignación de autores que satisface todas las restricciones. Usaremos negación como fallo (`\+`) para modelar la falsedad de una inscripción o la no autoría por parte de un maker.

```prolog
% Problema de Logica: Los Cofres de Bellini y Cellini

% Definición de los autores posibles
autor(bellini).
autor(cellini).

% Regla Global: Un cofre X es hecho por Bellini si y solo si su inscripcion es verdadera.
% Regla Global: Un cofre X es hecho por Cellini si y solo si su inscripcion es falsa (no verdadera).
% Modelamos la implicacion en ambas direcciones (X es Bellini <=> Inscripcion Verdadera)
% mediante una relacion mutua entre hecho_por/2 y inscripcion_verdadera/1.
% Prolog resolvera encontrando una asignacion de hecho_por/2 que sea consistente
% con la definicion de inscripcion_verdadera/1 y estas reglas.

% Definicion de si un cofre es hecho por Bellini o Cellini.
% Estas son las relaciones que buscamos determinar.
% hecho_por(Cofre, Autor).

% Definicion de la verdad de la inscripcion de cada cofre,
% basada en la interpretacion del paso 1.

% Inscripcion A (Oro): "EL COFRE DE PLATA ES OBRA DE UN CELLINI"
% Interpretacion: Al menos un cofre de plata (B o D) es obra de Cellini.
inscripcion_verdadera(a) :- hecho_por(b, cellini).
inscripcion_verdadera(a) :- hecho_por(d, cellini).

% Inscripcion B (Plata): "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI"
% Interpretacion: (B es Cellini) O (B es Bellini Y D es Bellini).
inscripcion_verdadera(b) :- hecho_por(b, cellini).
inscripcion_verdadera(b) :- hecho_por(b, bellini), hecho_por(d, bellini).

% Inscripcion C (Oro): "EL COFRE DE ORO ES OBRA DE UN BELLINI"
% Interpretacion: Al menos un cofre de oro (A o C) es obra de Bellini.
inscripcion_verdadera(c) :- hecho_por(a, bellini).
inscripcion_verdadera(c) :- hecho_por(c, bellini).

% Inscripcion D (Plata): "EL COFRE DE ORO ES OBRA DE UN BELLINI y ..." (la segunda parte es tautologica)
% Interpretacion: Al menos un cofre de oro (A o C) es obra de Bellini.
inscripcion_verdadera(d) :- hecho_por(a, bellini).
inscripcion_verdadera(d) :- hecho_por(c, bellini).

% Las reglas que vinculan el autor a la verdad de la inscripcion:
% Bellini <=> Verdadero
% Cellini <=> Falso
% Para un cofre X:
% (hecho_por(X, bellini) Y inscripcion_verdadera(X)) O (hecho_por(X, cellini) Y \+ inscripcion_verdadera(X))
% Ademas, cada cofre debe ser hecho por exactamente un autor.
% Combinamos esto en un predicado de consistencia.

consistente :-
    % Cofre A
    ( hecho_por(a, bellini) -> inscripcion_verdadera(a) ), % Si A es Bellini, su inscripcion debe ser verdadera
    ( hecho_por(a, cellini) -> \+ inscripcion_verdadera(a) ), % Si A es Cellini, su inscripcion debe ser falsa
    % Cofre B
    ( hecho_por(b, bellini) -> inscripcion_verdadera(b) ),
    ( hecho_por(b, cellini) -> \+ inscripcion_verdadera(b) ),
    % Cofre C
    ( hecho_por(c, bellini) -> inscripcion_verdadera(c) ),
    ( hecho_por(c, cellini) -> \+ inscripcion_verdadera(c) ),
    % Cofre D
    ( hecho_por(d, bellini) -> inscripcion_verdadera(d) ),
    ( hecho_por(d, cellini) -> \+ inscripcion_verdadera(d) ),

    % Asegurar que cada cofre tiene un autor (solo Bellini o Cellini)
    % El generate_solucion predicado manejara esto al instanciar los autores.
    true. % Placeholder, la consistencia se verifica en las implicaciones de arriba

% Predicado para generar posibles soluciones y verificarlas
solucion(AutorA, AutorB, AutorC, AutorD) :-
    % Asignar un autor a cada cofre
    hecho_por(a, AutorA), autor(AutorA),
    hecho_por(b, AutorB), autor(AutorB),
    hecho_por(c, AutorC), autor(AutorC),
    hecho_por(d, AutorD), autor(AutorD),
    % Verificar que la asignacion es consistente con las reglas y inscripciones
    consistente.

% Para encontrar la solucion, hariamos la consulta:
% ?- solucion(AutorA, AutorB, AutorC, AutorD).

% NOTA: El uso de \+ (negacion como fallo) en Prolog puede ser problematico
% cuando las variables no estan completamente instanciadas.
% Un enfoque mas robusto para problemas logicos es usar clp(b) (Constraint Logic Programming over Boolean domains)
% o listar y verificar todas las 2^4 = 16 combinaciones posibles de autores.
% El codigo de arriba funcionara si Prolog explora las posibilidades de hecho_por/2
% de forma que permita que \+ funcione correctamente (usualmente despues de instanciar).
% Definamos explícitamente las posibilidades para los predicados hecho_por/2
% y usemos findall para encontrar la solución.

% Posibles asignaciones para un cofre X
es_bellini(X) :- hecho_por(X, bellini).
es_cellini(X) :- hecho_por(X, cellini).

% Relacion maker <=> truth reified
% maker_verdad(Cofre, MakerVerdadero) es verdadero si el maker del Cofre es MakerVerdadero Y su inscripcion es verdadera.
% maker_verdad(Cofre, MakerVerdadero) es falso si el maker del Cofre NO es MakerVerdadero O su inscripcion NO es verdadera.
% O mejor: usar 0/1 para representar Bellini/Cellini y Verdadero/Falso en CLP(B).

% Re-implementacion con generacion explicita de posibilidades
solucion_revisada(AutorA, AutorB, AutorC, AutorD) :-
    Miembros = [a, b, c, d],
    AutoresPosibles = [bellini, cellini],
    member(AutorA, AutoresPosibles), member(AutorB, AutoresPosibles),
    member(AutorC, AutoresPosibles), member(AutorD, AutoresPosibles),
    % Crear el estado actual de autores
    Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)],
    % Verificar consistencia del estado
    es_estado_consistente(Estado).

% Predicado auxiliar para verificar si un cofre X tiene un autor dado en un Estado
get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).

% Predicado para verificar si la inscripcion de un cofre es verdadera en un Estado
inscripcion_verdadera_en(a, Estado) :-
    get_autor(b, cellini, Estado) ; get_autor(d, cellini, Estado).

inscripcion_verdadera_en(b, Estado) :-
    get_autor(b, cellini, Estado) ; (get_autor(b, bellini, Estado), get_autor(d, bellini, Estado)).

inscripcion_verdadera_en(c, Estado) :-
    get_autor(a, bellini, Estado) ; get_autor(c, bellini, Estado).

inscripcion_verdadera_en(d, Estado) :-
    get_autor(a, bellini, Estado) ; get_autor(c, bellini, Estado).

% Predicado para verificar si un Estado completo es consistente
es_estado_consistente(Estado) :-
    % Para cada cofre, su autor debe coincidir con la verdad de su inscripcion
    (get_autor(a, bellini, Estado) <-> inscripcion_verdadera_en(a, Estado)),
    (get_autor(b, bellini, Estado) <-> inscripcion_verdadera_en(b, Estado)),
    (get_autor(c, bellini, Estado) <-> inscripcion_verdadera_en(c, Estado)),
    (get_autor(d, bellini, Estado) <-> inscripcion_verdadera_en(d, Estado)).

% Definicion del operador de equivalencia logica A <-> B
% A <-> B es equivalente a (A -> B) AND (B -> A)
% A -> B es equivalente a not A OR B
% Entonces (A <-> B) es equivalente a (not A OR B) AND (not B OR A)
% O, mas simplemente, (A AND B) OR (not A AND not B)
(A <-> B) :- (A, B) ; (\+ A, \+ B).


% Consulta para encontrar la solucion:
% ?- solucion_revisada(AutorA, AutorB, AutorC, AutorD).

```

**Resultado Esperado de la Consulta en Prolog:**

Al ejecutar la consulta `?- solucion_revisada(AutorA, AutorB, AutorC, AutorD).`, el programa Prolog explorará todas las 16 combinaciones posibles de autores para los cofres A, B, C y D. Para cada combinación, verificará si se cumplen todas las condiciones de consistencia derivadas de las reglas Bellini/Cellini y la verdad de las inscripciones. Se espera que solo una combinación de autores satisfaga todas las condiciones simultáneamente, arrojando el siguiente resultado:

```prolog
AutorA = cellini,
AutorB = bellini,
AutorC = bellini,
AutorD = bellini.
```

Esto valida formalmente la hipótesis obtenida en el paso 3, utilizando el programa Prolog como un verificador lógico de las restricciones del problema. El programa demuestra que la única asignación de autores consistente con todas las premisas (bajo la interpretación de las inscripciones necesaria para la solubilidad) es que el cofre A fue hecho por Cellini, y los cofres B, C y D fueron hechos por Bellini.

        INSTRUCCIONES:
        1. Analiza las ramas de pensamientos que llevaron a una solución exitosa
        2. Formula una respuesta bien argumentada y clara al problema original
        3. Explica paso a paso cómo se llegó a esta solución
        4. Asegúrate de que la respuesta sea comprensible para alguien sin conocimientos técnicos de lógica formal

        Por favor, proporciona una respuesta estructurada que incluya:
        - La respuesta directa al problema
        - La justificación lógica paso a paso
        - Una explicación clara del razonamiento utilizado
        - Un resumen siendo contundente y breve con la pregunta que se te presentó al principio.
        

-------------------------------------------------------------------

-------------------------------------------------------------------
Respuesta de Gemini: Claro, analicemos el problema, la solución encontrada a través del razonamiento lógico (como el que realizó el LLM en su análisis inicial) y contrastémoslo con el modelo Prolog y la traza proporcionada.

**Análisis del Problema y la Solución (Interpretación Lógica Usual)**

El problema presenta un escenario clásico de lógica con verdades y mentiras. La regla fundamental es simple: Bellini siempre dice la verdad (su inscripción es verdadera), y Cellini siempre miente (su inscripción es falsa). Tenemos cuatro cofres con inscripciones sobre sus autores. La clave está en que el problema de determinar los autores se resolvió *antes* de conocer las parejas, lo que implica que la verdad o falsedad de cada inscripción debe ser determinable basándose únicamente en los autores de los *cuatro* cofres, no en la configuración específica de las parejas. Esto requiere interpretar las inscripciones de una manera que no dependa de la pareja desconocida.

La interpretación más razonable para las inscripciones (que permite una solución única independiente de las parejas) es:
*   **Cofre A (Oro):** "EL COFRE DE PLATA ES OBRA DE UN CELLINI". Interpretación: *Al menos uno* de los cofres de plata (B o D) es obra de Cellini.
*   **Cofre B (Plata):** "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI". Interpretación: *Este cofre de plata (B)* es obra de Cellini O *los dos cofres de plata (B y D)* son obra de Bellini.
*   **Cofre C (Oro):** "EL COFRE DE ORO ES OBRA DE UN BELLINI". Interpretación: *Al menos uno* de los cofres de oro (A o C) es obra de Bellini.
*   **Cofre D (Plata):** "EL COFRE DE ORO ES OBRA DE UN BELLINI Y...". La segunda parte es una tautología (siempre verdadera en el contexto del problema), así que la verdad depende de la primera parte. Interpretación: *Al menos uno* de los cofres de oro (A o C) es obra de Bellini.

Observemos que las inscripciones de C y D son idénticas bajo esta interpretación: ambas son verdaderas si y solo si (A es Bellini O C es Bellini). Esto tiene una consecuencia inmediata: **los cofres C y D deben tener el mismo autor**. Si la inscripción es verdadera, ambos son Bellini; si es falsa, ambos son Cellini.

Ahora, centrémonos en la inscripción de B: "B es Cellini O (B es Bellini Y D es Bellini)".
*   Recordemos la regla: B es Bellini Si y Solo Si la inscripción de B es Verdadera. B es Cellini Si y Solo Si la inscripción de B es Falsa.
*   Llamemos P a la afirmación "B es Bellini" y Q a la afirmación "D es Bellini". La inscripción de B es verdadera si y solo si (NO P O (P Y Q)).
*   La regla para B se convierte en: P Si y Solo Si (NO P O (P Y Q)).
*   Simplifiquemos la expresión lógica: (NO P O (P Y Q)) es equivalente a ((NO P O P) Y (NO P O Q)), que simplifica a (VERDADERO Y (NO P O Q)), o simplemente (NO P O Q).
*   Así que la regla para B es P Si y Solo Si (NO P O Q).
*   Una proposición R es equivalente a (NO R O S) Si y Solo Si (R Y S).
*   Aplicando esto, P Si y Solo Si (NO P O Q) es equivalente a P Y Q.
*   Esto significa que la única forma en que la regla para B se cumpla es si P es verdadero Y Q es verdadero.
*   Traduciendo de vuelta: **B es Bellini Y D es Bellini**.

Hemos deducido que B es Bellini y D es Bellini.
*   Como D es Bellini y C y D tienen el mismo autor, entonces **C es Bellini**.

Ahora usemos la inscripción de A: "Al menos uno de los cofres de plata (B o D) es Cellini".
*   Nuestras deducciones nos dicen que B es Bellini y D es Bellini.
*   Por lo tanto, es FALSO que B sea Cellini, y es FALSO que D sea Cellini.
*   La condición "B es Cellini O D es Cellini" es Falsa O Falsa, que es Falsa.
*   La inscripción de A es Falsa.
*   Según la regla, si la inscripción de A es falsa, A debe ser obra de **Cellini**.

**Hipótesis de Solución basada en el razonamiento lógico (independiente del emparejamiento):**
*   Cofre A: Cellini
*   Cofre B: Bellini
*   Cofre C: Bellini
*   Cofre D: Bellini

Esta solución satisface todas las condiciones bajo la interpretación lógica que asume independencia del emparejamiento.

**Análisis de las Cláusulas Prolog Proporcionadas y la Traza**

Las cláusulas Prolog modelan las reglas y las inscripciones de una manera específica. Es crucial entender cómo interpretan las inscripciones:
*   `inscripcion_verdadera_en(a, ...)` usa `get_cofre_pareja(a, CofrePlataPareja, ...)`. Esto significa que la inscripción de A ("El cofre de plata es obra de un Cellini") se interpreta como refiriéndose *específicamente al cofre de plata que es pareja de A*.
*   `inscripcion_verdadera_en(b, ...)` usa `get_cofre_pareja(b, CofreOroPareja, ...)`. La parte "LOS DOS COFRES SON DE BELLINI" se interpreta como "(B es Bellini Y la pareja de B (que es de oro) es Bellini)". La inscripción de B se interpreta como "(B es Cellini) O (B es Bellini Y la pareja de B es Bellini)".
*   `inscripcion_verdadera_en(c, ...)` usa `get_autor(c, bellini, ...)`. Esto interpreta la inscripción de C ("El cofre de oro es obra de un Bellini") como refiriéndose *específicamente a C*.
*   `inscripcion_verdadera_en(d, ...)` usa `get_cofre_pareja(d, CofreOroPareja, ...)`. Esto interpreta la inscripción de D ("El cofre de oro es obra de un Bellini") como refiriéndose *específicamente al cofre de oro que es pareja de D*.

El predicado `es_estado_consistente` verifica, para una asignación de autores y una *configuración específica de parejas*, que la regla de Bellini/Cellini se cumple para cada cofre (autor es Bellini Sii la inscripción es verdadera).

El predicado `solucion` busca una asignación de autores *y* una configuración de parejas (`posible_configuracion_parejas`) tal que el estado combinado sea consistente. Hay dos configuraciones posibles de parejas: (A,B) con (C,D) o (A,D) con (C,B).

La traza de ejecución proporcionada muestra el resultado de llamar a `encontrar_y_mostrar_soluciones`. Esta llama a `findall` para encontrar todas las soluciones generadas por `solucion(AutorA, AutorB, AutorC, AutorD, ConfiguracionParejas)`. La traza muestra que el `findall` *no encontró ninguna solución* (`ListaSoluciones = []`), y por lo tanto, se imprimió el mensaje "No se encontraron soluciones consistentes".

Esto nos dice algo importante: **Según la interpretación de las inscripciones codificada en las cláusulas Prolog proporcionadas, no existe ninguna combinación de autores y parejas que satisfaga todas las condiciones simultáneamente.**

**Discrepancia y Conclusión**

Existe una clara discrepancia entre la solución derivada por razonamiento lógico basado en la premisa de que el problema de autores se resolvió independientemente de las parejas (llevando a A=Cellini, B=Bellini, C=Bellini, D=Bellini) y el resultado de la ejecución de Prolog con las cláusulas proporcionadas (que no encuentran ninguna solución).

La razón más probable de esta discrepancia es que la interpretación de las inscripciones en las cláusulas Prolog, al hacer que la verdad dependa de la pareja (`get_cofre_pareja`), no coincide con la interpretación necesaria para que el problema tenga una solución única e independiente del emparejamiento, tal como sugiere el texto del problema original.

El análisis inicial del LLM que dedujo la solución A=Cellini, B=Bellini, C=Bellini, D=Bellini es lógicamente sólido *bajo la interpretación de que las inscripciones se refieren al conjunto general de cofres de oro/plata o a los dos cofres de plata (B y D en el caso de B), independientemente de la pareja específica*. Esta interpretación es la que probablemente se usó en el problema original para permitir que el "experto" resolviera el problema de autores antes de conocer las parejas.

La traza Prolog simplemente confirma que, *con el modelo lógico específico implementado en esas cláusulas* (que dependen de la pareja), no se encontró ninguna combinación válida. Esto no invalida la solución lógica, sino que muestra que el modelo Prolog implementa una interpretación diferente o incorrecta de las inscripciones del problema tal como fue presentado originalmente.

**Respuesta Directa al Problema Original**

Basándonos en el razonamiento lógico que permite resolver el problema de autores sin conocer las parejas (como se indica en el texto), la solución es:
*   **Cofre A (Oro):** Obra de Cellini
*   **Cofre B (Plata):** Obra de Bellini
*   **Cofre C (Oro):** Obra de Bellini
*   **Cofre D (Plata):** Obra de Bellini

**Justificación Lógica Paso a Paso (basada en la interpretación lógica que resuelve el problema independientemente de las parejas)**

1.  **Regla Bellini/Cellini:** Un cofre es de Bellini si y solo si su inscripción es verdadera. Un cofre es de Cellini si y solo si su inscripción es falsa.
2.  **Inscripciones C y D:** Ambas dicen esencialmente "Un cofre de oro es Bellini". Interpretado como "(Cofre A es Bellini) O (Cofre C es Bellini)". Como la verdad de sus inscripciones depende de la misma condición, C y D deben tener el mismo autor (ambos Bellini si la condición es verdadera, ambos Cellini si es falsa).
3.  **Inscripción B:** Dice "El cofre de plata (B) es Cellini O los dos cofres (B y D) son Bellini". Traducido a lógica: (B es Cellini) O (B es Bellini Y D es Bellini).
4.  **Aplicando la Regla a B:** "B es Bellini" es lógicamente equivalente a "(B es Cellini) O (B es Bellini Y D es Bellini)". Usando la regla de Bellini/Cellini (B es Bellini <=> Inscripción Verdadera), esto se simplifica lógicamente a "B es Bellini Y D es Bellini".
5.  **Deducción de B y D:** Por lo tanto, se deduce directamente que el Cofre B es obra de Bellini Y el Cofre D es obra de Bellini.
6.  **Deducción de C:** Como D es Bellini y C y D deben tener el mismo autor (paso 2), el Cofre C también es obra de Bellini.
7.  **Inscripción A:** Dice "Un cofre de plata es Cellini". Interpretado como "(Cofre B es Cellini) O (Cofre D es Cellini)".
8.  **Aplicando la Deducción de B y D a Inscripción A:** Sabemos que B es Bellini (luego no es Cellini) y D es Bellini (luego no es Cellini). La condición "(B es Cellini) O (D es Cellini)" es (Falso O Falso), que es Falso. La inscripción de A es Falsa.
9.  **Deducción de A:** Según la regla (paso 1), si la inscripción de A es falsa, el Cofre A debe ser obra de Cellini.

**Resumen**

El problema se resuelve aplicando la lógica de Bellini/Cellini (verdad vs. mentira) a las inscripciones de los cofres. Interpretando las inscripciones de manera que el problema de autores no dependa de las parejas, se deduce paso a paso que los cofres B, C y D deben ser obra de Bellini, lo cual implica que la inscripción de A es falsa, revelando que el cofre A es obra de Cellini. Las cláusulas Prolog proporcionadas, sin embargo, parecen modelar una interpretación diferente de las inscripciones (dependientes de las parejas), lo que, según la traza, lleva a no encontrar ninguna solución consistente. La solución lógica coherente con el enunciado original es: A (Oro) por Cellini, B (Plata) por Bellini, C (Oro) por Bellini, D (Plata) por Bellini.

-------------------------------------------------------------------


INFO: Checkpoint guardado: checkpoints/mmrc_result_cycle1_Recordamos_que_Bellini_siempre_ponía_a_sus_cofres_.pkl
INFO: Historial del LLM guardado: checkpoints/llm_history_
____Recordamos_que_Bellini_siempre_ponía_a_sus_co_20250617_111103.pkl

=== RESULTADO DEL ANÁLISIS MMRC ===
✅ SE ENCONTRÓ UNA SOLUCIÓN EXITOSA

TODOS LOS PROBLEMAS CONFIGURADOS PROCESADOS.
