
======================================================================
PROCESANDO PROBLEMA: "
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas,..."
======================================================================
INFO: Historial del LLM cargado: checkpoints/llm_history_
____Recordamos_que_Bellini_siempre_ponía_a_sus_co_20250614_155534.pkl
INFO: Checkpoint cargado: checkpoints/mfsa_kr_store_Recordamos_que_Bellini_siempre_ponía_a_sus_cofres_.pkl
INFO: Historial del LLM cargado: checkpoints/llm_history_
____Recordamos_que_Bellini_siempre_ponía_a_sus_co_20250614_155534.pkl
INFO: MFSA omitido, KR-Store cargado desde checkpoint.

--- CICLO DE REFINAMIENTO 1 / 3 ---

--- Ejecutando MISA-J (CFCS) ---
Programa Prolog: autor(bellini).
autor(cellini).
inscripcion_verdadera(a) :- hecho_por(b, cellini).
inscripcion_verdadera(a) :- hecho_por(d, cellini).
inscripcion_verdadera(b) :- hecho_por(b, cellini).
inscripcion_verdadera(b) :- hecho_por(b, bellini), hecho_por(d, bellini).
inscripcion_verdadera(c) :- hecho_por(a, bellini).
inscripcion_verdadera(c) :- hecho_por(c, bellini).
inscripcion_verdadera(d) :- hecho_por(a, bellini).
inscripcion_verdadera(d) :- hecho_por(c, bellini).
solucion_revisada(AutorA, AutorB, AutorC, AutorD) :- member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], es_estado_consistente(Estado).
get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).
inscripcion_verdadera_en(a, Estado) :- get_autor(b, cellini, Estado) ; get_autor(d, cellini, Estado).
inscripcion_verdadera_en(b, Estado) :- get_autor(b, cellini, Estado) ; (get_autor(b, bellini, Estado), get_autor(d, bellini, Estado)).
inscripcion_verdadera_en(c, Estado) :- get_autor(a, bellini, Estado) ; get_autor(c, bellini, Estado).
inscripcion_verdadera_en(d, Estado) :- get_autor(a, bellini, Estado) ; get_autor(c, bellini, Estado).
es_estado_consistente(Estado) :- (get_autor(a, bellini, Estado) <-> inscripcion_verdadera_en(a, Estado)), (get_autor(b, bellini, Estado) <-> inscripcion_verdadera_en(b, Estado)), (get_autor(c, bellini, Estado) <-> inscripcion_verdadera_en(c, Estado)), (get_autor(d, bellini, Estado) <-> inscripcion_verdadera_en(d, Estado)).
(A <-> B) :- (A, B) ; (\+ A, \+ B).
--- Traza cruda de Prolog ---
ERROR: /tmp/tmpm2bu94pj.pl:38:3: Syntax error: Operator expected
                    call: catch((solucion_revisada(_4650,_4652,_4654,_4656),fail),_4668,(format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[_4668]),fail)) @ <dynamic>:0
                        call: solucion_revisada(_4650,_4652,_4654,_4656) @ <dynamic>:0
                          call: lists:member(_4650,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4652,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4654,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15486=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          exception(error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_15700))): es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                        exception(error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_15700))): solucion_revisada(_4650,_4652,_4654,_4656) @ /tmp/tmpm2bu94pj.pl:31
                        call: format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_148))]) @ <dynamic>:0
### CAUGHT_EXCEPTION ###
error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_148))
### END_EXCEPTION ###
                        exit: format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_148))]) @ <dynamic>:0
                        call: fail @ <dynamic>:0
--- Fin de traza cruda ---
INFO: Checkpoint guardado: checkpoints/misa_j_trace_cycle0_Recordamos_que_Bellini_siempre_ponía_a_sus_cofres_.pkl

--- Ejecutando MMRC ---


-------------------------------------------------------------------

--- Pregunta a Gemini (general) ---
Prompt: 
        Como experto en lógica y razonamiento, necesito que analices por qué no se pudo resolver el siguiente problema:

        PROBLEMA ORIGINAL:
        
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas, mientras que Cellini siempre les ponía inscripciones falsas.En algunos museos podemos ver parejas de cofres —uno de oro y otro de plata— que en un principio se hicieron y se vendieron como juego. La verdad es que la familia Bellini y la Cellini eran íntimas y que a veces colaboraban en algunas de estas parejas; aunque cada cofre lo hiciera siempre una sola persona, dentro de la pareja un cofre podía hacerlo uno y el otro otro diferente. Ambas familias se divertían muchísimo haciendo estas parejas de manera que la inteligente posteridad pudiera adivinar —o adivinar parcialmente— quiénes habían sido los autores.  Habían aparecido cuatro cofres, dos de oro y dos de plata; se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja. Me los enseñaron y pronto pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra (que consistía, entre otras cosas, en una excelente caja de botellas de Chianti) y un beso de una de las florentinas más maravillosas que haya existido nunca He aquí los cuatro cofres:
    Cofre A (Oro)
    EL COFRE DE PLATA ES OBRA DE UN CELLINI
    Cofre B (Plata)
    EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON
    DE BELLINI
    Cofre C (Oro)
    EL COFRE DE ORO ES OBRA DE UN BELLINI
    Cofre D (Plata)
    EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE
    ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI

    Tenemos ahora un problema:
    ¿Quién hizo cada uno de los cofres?
    

        CLAUSULAS USADAS:
        ['autor(bellini).', 'autor(cellini).', 'inscripcion_verdadera(a) :- hecho_por(b, cellini).', 'inscripcion_verdadera(a) :- hecho_por(d, cellini).', 'inscripcion_verdadera(b) :- hecho_por(b, cellini).', 'inscripcion_verdadera(b) :- hecho_por(b, bellini), hecho_por(d, bellini).', 'inscripcion_verdadera(c) :- hecho_por(a, bellini).', 'inscripcion_verdadera(c) :- hecho_por(c, bellini).', 'inscripcion_verdadera(d) :- hecho_por(a, bellini).', 'inscripcion_verdadera(d) :- hecho_por(c, bellini).', 'solucion_revisada(AutorA, AutorB, AutorC, AutorD) :- member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], es_estado_consistente(Estado).', 'get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).', 'inscripcion_verdadera_en(a, Estado) :- get_autor(b, cellini, Estado) ; get_autor(d, cellini, Estado).', 'inscripcion_verdadera_en(b, Estado) :- get_autor(b, cellini, Estado) ; (get_autor(b, bellini, Estado), get_autor(d, bellini, Estado)).', 'inscripcion_verdadera_en(c, Estado) :- get_autor(a, bellini, Estado) ; get_autor(c, bellini, Estado).', 'inscripcion_verdadera_en(d, Estado) :- get_autor(a, bellini, Estado) ; get_autor(c, bellini, Estado).', 'es_estado_consistente(Estado) :- (get_autor(a, bellini, Estado) <-> inscripcion_verdadera_en(a, Estado)), (get_autor(b, bellini, Estado) <-> inscripcion_verdadera_en(b, Estado)), (get_autor(c, bellini, Estado) <-> inscripcion_verdadera_en(c, Estado)), (get_autor(d, bellini, Estado) <-> inscripcion_verdadera_en(d, Estado)).', '(A <-> B) :- (A, B) ; (\\+ A, \\+ B).']

        RAMAS DE PENSAMIENTO MÁS PROMETEDORAS:
        [
  {
    "nombre": "root",
    "veracidad": "",
    "valor": [
      {
        "nombre": "catch((solucion_revisada(_4650,_4652,_4654,_4656),fail),_4668,(format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[_4668]),fail))",
        "veracidad": "",
        "valor": [
          {
            "nombre": "solucion_revisada(_4650,_4652,_4654,_4656)",
            "veracidad": "",
            "valor": [
              {
                "nombre": "lists:member(_4650,[bellini,cellini])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(bellini,[bellini,cellini])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "lists:member(_4652,[bellini,cellini])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(bellini,[bellini,cellini])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "lists:member(_4654,[bellini,cellini])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(bellini,[bellini,cellini])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "lists:member(_4656,[bellini,cellini])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(bellini,[bellini,cellini])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "_15486=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_148))])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_148))])",
                    "veracidad": "verde"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
]

        ANÁLISIS INICIAL LLM:
        None

        CONTEXTO:
        El sistema de razonamiento lógico no pudo encontrar una solución exitosa. Todas las ramas de pensamiento terminaron sin éxito.
        

        INSTRUCCIONES:
        1. Analiza las ramas de pensamiento que más se acercaron al éxito
        2. Identifica posibles errores en:
        - Las premisas del problema (¿faltan premisas importantes?)
        - Las premisas formuladas (¿hay premisas incorrectas o mal interpretadas?)
        - La lógica implementada (¿hay problemas en el razonamiento?)
        - Inconsistencias o contradicciones en las premisas
        

        3. Proporciona sugerencias específicas para:
        - Premisas que podrían estar faltando
        - Premisas que podrían estar mal formuladas
        - Mejoras en la lógica de razonamiento
        - Resolución de inconsistencias
        

        Por favor, proporciona un análisis estructurado que incluya:
        - Diagnóstico del problema principal
        - Análisis detallado de las ramas más prometedoras
        
        - Sugerencias específicas de mejora
        - Recomendaciones para futuras iteraciones
        4. Genera un programa de prolog:
        - Vuelve a escribir el programa pero corrige los errores anteriormente explicados.
        - Esto es sumamente importante: La corrección semántica y sintáctica del programa Prolog es crucial, ya que la verdad de tu hipótesis se deduce de la capacidad del programa para probarla. Asegúrate de que el código esté bien escrito y refleje lógicamente el problema y tu solución propuesta.
        - Para modelar implicaciones lógicas en Prolog de forma declarativa, usa la negación para expresar que no puede darse el caso de que el antecedente sea cierto y el consecuente falso.
        - Comenta el resultado esperado del programa pero nunca hables como si ya se hubiera ejecutado.
        

-------------------------------------------------------------------

-------------------------------------------------------------------
Respuesta de Gemini: Okay, procedamos al análisis detallado del problema, las cláusulas proporcionadas y el rastro de ejecución para determinar por qué no se pudo resolver el problema.

**1. Diagnóstico del Problema Principal**

El problema principal por el que el programa Prolog no pudo encontrar una solución, según el rastro de ejecución proporcionado, es un **error de existencia del procedimiento `es_estado_consistente/1`**. A pesar de que la definición de este predicado está listada en las "CLAUSULAS USADAS", el motor de Prolog no pudo encontrarla al intentar ejecutarla. Esto es un problema técnico de cargado o visibilidad del código, más que un error lógico profundo en el diseño (aunque también existen errores lógicos, como veremos).

Más allá de este error técnico inmediato, el análisis de las cláusulas revela un **problema lógico fundamental en la modelización de las inscripciones**. Las cláusulas proporcionadas no interpretan correctamente el contenido de las inscripciones en el contexto del problema, que involucra parejas desconocidas de cofres. Asumen relaciones fijas entre cofres (como B y D formando pareja implícitamente en la inscripción de B, o las inscripciones A, C y D refiriéndose a *cualquier* cofre de un determinado tipo en lugar de a su *pareja*). El problema original requiere deducir tanto las parejas como los autores, pero la lógica implementada solo intenta deducir los autores sin considerar explícitamente las posibles configuraciones de parejas.

**2. Análisis Detallado de las Ramas Más Prometedoras**

El rastro muestra la ejecución de `solucion_revisada/4`. Este predicado genera sistemáticamente todas las combinaciones posibles de autores (Bellini o Cellini) para los cuatro cofres (A, B, C, D). Hay 2^4 = 16 combinaciones posibles.

1.  `lists:member(_4650,[bellini,cellini])` succeed, binds `_4650` to `bellini`.
2.  `lists:member(_4652,[bellini,cellini])` succeed, binds `_4652` to `bellini`.
3.  `lists:member(_4654,[bellini,cellini])` succeed, binds `_4654` to `bellini`.
4.  `lists:member(_4656,[bellini,cellini])` succeed, binds `_4656` to `bellini`.
5.  `_15486=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]` unifies the variable `Estado` with the list representing the state where all chests are made by Bellini.

Hasta este punto, el programa está funcionando correctamente, generando una de las 16 posibles asignaciones de autores y representando este "estado" del problema.

La siguiente llamada esperada en el predicado `solucion_revisada/4` es `es_estado_consistente(Estado)`. Sin embargo, en lugar de ejecutar esta llamada, el rastro muestra:

`format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_148))])`

Este es el punto de fallo. Indica claramente que el predicado `es_estado_consistente/1` no fue encontrado o no estaba accesible para el motor de Prolog cuando `solucion_revisada/4` intentó llamarlo. La rama de pensamiento se detiene aquí con un error de ejecución. No llega a probar si la asignación "todos Bellini" es consistente ni ninguna de las otras 15 combinaciones.

**3. Identificación de Posibles Errores**

Basado en el rastro y las cláusulas:

*   **Errores en las premisas del problema (¿faltan premisas importantes?)**: Sí, falta modelar explícitamente las posibles parejas de cofres. El problema indica que los cofres A y C son de oro, y B y D son de plata, y que se formaron dos juegos (parejas de oro+plata). Las posibles configuraciones de pareja son:
    1.  (A con B) y (C con D)
    2.  (A con D) y (C con B)
    La lógica actual no considera estas parejas, lo cual es crucial porque las inscripciones a menudo se refieren a la *pareja* del cofre, no a *cualquier* cofre de un tipo particular, y definitivamente no asumen una pareja fija como B y D.
*   **Errores en las premisas formuladas (¿hay premisas incorrectas o mal interpretadas?)**: Sí, la interpretación de las inscripciones en las cláusulas `inscripcion_verdadera/1` e `inscripcion_verdadera_en/2` es incorrecta o demasiado simplificada:
    *   **Cofre A (Oro) - Inscripción: "EL COFRE DE PLATA ES OBRA DE UN CELLINI"**: La cláusula `inscripcion_verdadera_en(a, Estado) :- get_autor(b, cellini, Estado) ; get_autor(d, cellini, Estado).` la interpreta como "cualquier cofre de plata (B o D) es de Cellini". Dado que A es oro, su inscripción probablemente se refiere a su *pareja de plata*. La verdad de la inscripción de A depende de quién hizo el cofre de plata *con el que A forma pareja*.
    *   **Cofre B (Plata) - Inscripción: "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI"**: La cláusula `inscripcion_verdadera_en(b, Estado) :- get_autor(b, cellini, Estado) ; (get_autor(b, bellini, Estado), get_autor(d, bellini, Estado)).` es particularmente errónea.
        *   Interpreta "EL COFRE DE PLATA" como el cofre B (`get_autor(b, cellini, Estado)`). Esto es plausible, la inscripción podría referirse a sí misma.
        *   Interpreta "LOS DOS COFRES" como el cofre B *y el cofre D* (`get_autor(b, bellini, Estado), get_autor(d, bellini, Estado)`). Esto asume incorrectamente que B está emparejado con D, lo cual es una de las cosas que se debe deducir (o, en este modelo simplificado, no está contemplado en absoluto). "Los dos cofres" se refiere al cofre B *y su pareja* (que es un cofre de oro, A o C).
    *   **Cofre C (Oro) - Inscripción: "EL COFRE DE ORO ES OBRA DE UN BELLINI"**: La cláusula `inscripcion_verdadera_en(c, Estado) :- get_autor(a, bellini, Estado) ; get_autor(c, bellini, Estado).` la interpreta como "cualquier cofre de oro (A o C) es de Bellini". Dado que C es oro y la inscripción dice "EL COFRE DE ORO", lo más natural es que se refiera a *sí mismo*.
    *   **Cofre D (Plata) - Inscripción: "EL COFRE DE ORO ES OBRA DE UN BELLINI..."**: La cláusula `inscripcion_verdadera_en(d, Estado) :- get_autor(a, bellini, Estado) ; get_autor(c, bellini, Estado).` la interpreta como "cualquier cofre de oro (A o C) es de Bellini". Dado que D es plata, su inscripción probablemente se refiere a su *pareja de oro*. La verdad de la inscripción de D depende de quién hizo el cofre de oro *con el que D forma pareja*.
    *   La segunda parte de la inscripción D ("Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI") es trivial, ya que todos los cofres son obra de Bellini o Cellini. Esta parte no añade restricciones significativas y puede ser ignorada para la lógica.
*   **Errores en la lógica implementada (¿hay problemas en el razonamiento?)**: La estructura básica de la comprobación de consistencia (`Autor es Bellini <-> Inscripción es Verdadera`) es correcta, modelada con el operador `<->`. Sin embargo, la lógica falla porque las condiciones de verdad de las inscripciones (`inscripcion_verdadera_en`) están mal definidas al no tener en cuenta las parejas.
*   **Inconsistencias o contradicciones en las premisas**: Las premisas *tal como están formuladas* (con la interpretación incorrecta de las inscripciones) pueden no tener una solución consistente, no porque haya una contradicción inherente en el problema original, sino porque el modelo de Prolog no representa fielmente el problema.

**4. Sugerencias Específicas de Mejora**

*   **Premisas que podrían estar faltando**: Es fundamental añadir la consideración de las posibles configuraciones de pareja. El programa debe iterar a través de las posibles parejas y, para cada configuración, buscar una asignación de autores que sea consistente con las inscripciones *bajo esa configuración de pareja*.
*   **Premisas que podrían estar mal formuladas**:
    *   Reformular `inscripcion_verdadera_en/3` (ahora necesitará el estado *y* la configuración de parejas) para reflejar que las inscripciones se refieren a la *pareja* del cofre o al cofre *mismo*, según corresponda.
        *   A (Oro): Inscripción verdadera si su pareja de plata es Cellini.
        *   B (Plata): Inscripción verdadera si B es Cellini O su pareja de oro es Bellini.
        *   C (Oro): Inscripción verdadera si C es Bellini.
        *   D (Plata): Inscripción verdadera si su pareja de oro es Bellini.
*   **Mejoras en la lógica de razonamiento**: El predicado de solución principal debe incluir un paso para seleccionar una configuración de parejas posible antes de intentar encontrar los autores y verificar la consistencia.
*   **Resolución de inconsistencias**: Corregir la formulación de las inscripciones basadas en parejas debería permitir encontrar la solución consistente que existe en el problema original.

**5. Recomendaciones para Futuras Iteraciones**

1.  Modelar explícitamente las posibles configuraciones de parejas (A-B, C-D o A-D, C-B).
2.  Modificar la lógica de comprobación de la verdad de cada inscripción (`inscripcion_verdadera_en`) para que dependa de la configuración de parejas actual que se está probando, usando un predicado auxiliar como `get_partner/3`.
3.  El predicado principal de solución debe iterar sobre las configuraciones de pareja, y para cada una, iterar sobre las posibles asignaciones de autores, verificando la consistencia.

**Programa Prolog Corregido**

Basado en el análisis anterior, se propone el siguiente programa corregido que modela las parejas y las interpreta correctamente en las inscripciones.

```prolog
% Definición de los autores posibles
autor(bellini).
autor(cellini).

% Definición de los cofres
cofre(a, oro).
cofre(b, plata).
cofre(c, oro).
cofre(d, plata).

% Definición de las posibles configuraciones de parejas
% Hay dos cofres de oro (A, C) y dos de plata (B, D).
% Cada pareja es un cofre de oro y uno de plata.
% Las posibles parejas son (A con B y C con D) o (A con D y C con B).
posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]]).

% Predicado auxiliar para obtener la pareja de un cofre dada una configuracion
get_partner(Cofre, Partner, Pairings) :-
    member((Cofre, Partner), Pairings).
get_partner(Cofre, Partner, Pairings) :- % Handle cases where the pair is listed in reverse
    member((Partner, Cofre), Pairings).

% Predicado auxiliar para obtener el autor de un cofre en un estado dado
get_autor(Cofre, Autor, Estado) :-
    member(cofre(Cofre, Autor), Estado).

% Definición de si una inscripción es verdadera dado el estado (autores) y las parejas
% La verdad depende de quién hizo el cofre y quién hizo el cofre(s) mencionado(s).

% Cofre A (Oro): "EL COFRE DE PLATA ES OBRA DE UN CELLINI"
% Se refiere a su pareja de plata.
inscripcion_verdadera_en(a, Estado, Pairings) :-
    get_partner(a, SilverPartner, Pairings),
    get_autor(SilverPartner, cellini, Estado).

% Cofre B (Plata): "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI"
% Se refiere a sí mismo (el cofre de plata) O a su pareja (B y su pareja de oro).
inscripcion_verdadera_en(b, Estado, Pairings) :-
    get_autor(b, cellini, Estado) % El cofre de plata (B) es obra de un Cellini
    ;
    ( get_autor(b, bellini, Estado), get_partner(b, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado) ).
    % O los dos cofres (B y su pareja de oro) son de Bellini.

% Cofre C (Oro): "EL COFRE DE ORO ES OBRA DE UN BELLINI"
% Se refiere a sí mismo.
inscripcion_verdadera_en(c, Estado, Pairings) :-
    get_autor(c, bellini, Estado).

% Cofre D (Plata): "EL COFRE DE ORO ES OBRA DE UN BELLINI"
% Se refiere a su pareja de oro. (Ignoramos la parte redundante "Y POR LO MENOS UNO...")
inscripcion_verdadera_en(d, Estado, Pairings) :-
    get_partner(d, GoldPartner, Pairings),
    get_autor(GoldPartner, bellini, Estado).

% Definición de la equivalencia lógica
% (A <-> B) es verdadero si A y B son ambos verdaderos o ambos falsos
log_equiv(A, B) :- (A, B) ; (\+ A, \+ B).

% Predicado para verificar si un estado (asignación de autores) es consistente
% con una configuración de parejas dada las reglas Bellini/Cellini.
% Un estado es consistente si para cada cofre:
% Si el autor es Bellini, la inscripción es verdadera.
% Si el autor es Cellini, la inscripción es falsa.
es_estado_consistente(Estado, Pairings) :-
    % Regla para cofre A
    get_autor(a, AutorA, Estado),
    (AutorA = bellini) `log_equiv` inscripcion_verdadera_en(a, Estado, Pairings),
    % Regla para cofre B
    get_autor(b, AutorB, Estado),
    (AutorB = bellini) `log_equiv` inscripcion_verdadera_en(b, Estado, Pairings),
    % Regla para cofre C
    get_autor(c, AutorC, Estado),
    (AutorC = bellini) `log_equiv` inscripcion_verdadera_en(c, Estado, Pairings),
    % Regla para cofre D
    get_autor(d, AutorD, Estado),
    (AutorD = bellini) `log_equiv` inscripcion_verdadera_en(d, Estado, Pairings).

% Predicado principal para encontrar la solución
% Busca una configuración de parejas y una asignación de autores
% que sea consistente.
% La solución incluye los autores y la configuración de parejas.
solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :-
    posibles_parejas(AllPairings),
    member(Pairings, AllPairings),             % Prueba una configuración de parejas
    member(AutorA, [bellini, cellini]),       % Prueba autor para A
    member(AutorB, [bellini, cellini]),       % Prueba autor para B
    member(AutorC, [bellini, cellini]),       % Prueba autor para C
    member(AutorD, [bellini, cellini]),       % Prueba autor para D
    Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)],
    es_estado_consistente(Estado, Pairings).   % Verifica si la asignación es consistente con las parejas

% Para ejecutar y encontrar la(s) solución(es):
% ?- solucion(AutorA, AutorB, AutorC, AutorD, Pairings).
```

**Resultado Esperado del Programa Corregido**

Se espera que al ejecutar la consulta `solucion(AutorA, AutorB, AutorC, AutorD, Pairings).`, el programa explore las combinaciones de parejas y autores. Debería encontrar una (o más, si el problema tiene múltiples soluciones) combinación de asignaciones de autores para A, B, C, y D, junto con una de las dos posibles configuraciones de parejas, que satisfaga todas las condiciones de consistencia (autor Bellini <-> inscripción verdadera, autor Cellini <-> inscripción falsa) para los cuatro cofres bajo esa configuración de parejas. El resultado será una instanciación de `AutorA`, `AutorB`, `AutorC`, `AutorD` y `Pairings` que representa la solución del problema. Por ejemplo: `AutorA = bellini, AutorB = cellini, AutorC = cellini, AutorD = bellini, Pairings = [(a, b), (c, d)]` (este es un ejemplo hipotético, no la solución real, que el programa debe encontrar). El programa corregido modela fielmente las restricciones del problema, incluidas las parejas desconocidas y la interpretación correcta de las inscripciones.

-------------------------------------------------------------------


INFO: Checkpoint guardado: checkpoints/mmrc_result_cycle0_Recordamos_que_Bellini_siempre_ponía_a_sus_cofres_.pkl

=== RESULTADO DEL ANÁLISIS MMRC ===
❌ NO SE ENCONTRÓ SOLUCIÓN - ANÁLISIS DE ERRORES


-------------------------------------------------------------------

--- Pregunta a Gemini JSON (general) ---
Prompt: 
        Hola, basándote en tu respuesta anterior sobre el problema de lógica, necesito que extraigas y estructures la información de la siguiente manera en un formato JSON:

        El JSON debe tener tres claves principales en el nivel raíz:

        "facts": Un array de strings, donde cada string es un hecho Prolog completo tal como lo definiste.
        "rules": Un array de strings, donde cada string es una regla Prolog completa tal como la definiste.
        "objective": Un string que represente la consulta principal de Prolog que se usaría para obtener la solución (por ejemplo, solucion(Tweedledum, Tweedledee).).

        Consejos importantes para asegurar la compatibilidad con Prolog al generar los strings de hechos y reglas:
            Átomos: Los nombres de predicados y las constantes (átomos) en Prolog deben comenzar con una letra minúscula. Si un átomo necesita contener espacios, caracteres especiales, o comenzar con una letra mayúscula, debe ir entre comillas simples (ej: 'Yo soy Fidel', 'Luna').
            Variables: Las variables en Prolog siempre comienzan con una letra mayúscula o un guion bajo (ej: Dia, Hermano, _Ignorado).
            Sintaxis de Hechos: Asegúrate de que cada hecho termine con un punto (.). Ejemplo: miente_leon(lunes).
            Sintaxis de Reglas: Las reglas deben seguir el formato cabeza :- cuerpo., donde cabeza es la conclusión, :- significa "si", y cuerpo puede ser una o más metas separadas por comas (,) que representan una conjunción lógica. Cada regla debe terminar con un punto (.). Ejemplo: dice_verdad(leon, Dia) :- + miente_leon(Dia).
            Strings dentro de Prolog: Las frases como "Yo soy Fidel" deben ser tratadas como átomos en Prolog, es decir, encerradas en comillas simples si contienen espacios o mayúsculas no iniciales (ej: 'Yo soy Fidel').
            Escapado en JSON: Dado que los hechos y reglas de Prolog serán strings dentro de un JSON, si alguna vez usaras comillas dobles dentro de tu código Prolog (lo cual es menos común para átomos que las comillas simples), necesitarían ser escapadas (") dentro del string JSON. Usar comillas simples para los átomos Prolog evita este problema. Las barras invertidas () en Prolog (como en + para negación) son caracteres válidos y no necesitan doble escapado a menos que el propio string JSON lo requiera para el carácter .
            Los símbolos correctos de prolog son: \+ para negación, :- para implicación, ; para disyunción, . para final de cláusula, = para unificación, \= para desigualdad.
            Evita usar el \ innecesariamente puesto a que por si solo es un error de sintaxis

        Problema original:
            
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas, mientras que Cellini siempre les ponía inscripciones falsas.En algunos museos podemos ver parejas de cofres —uno de oro y otro de plata— que en un principio se hicieron y se vendieron como juego. La verdad es que la familia Bellini y la Cellini eran íntimas y que a veces colaboraban en algunas de estas parejas; aunque cada cofre lo hiciera siempre una sola persona, dentro de la pareja un cofre podía hacerlo uno y el otro otro diferente. Ambas familias se divertían muchísimo haciendo estas parejas de manera que la inteligente posteridad pudiera adivinar —o adivinar parcialmente— quiénes habían sido los autores.  Habían aparecido cuatro cofres, dos de oro y dos de plata; se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja. Me los enseñaron y pronto pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra (que consistía, entre otras cosas, en una excelente caja de botellas de Chianti) y un beso de una de las florentinas más maravillosas que haya existido nunca He aquí los cuatro cofres:
    Cofre A (Oro)
    EL COFRE DE PLATA ES OBRA DE UN CELLINI
    Cofre B (Plata)
    EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON
    DE BELLINI
    Cofre C (Oro)
    EL COFRE DE ORO ES OBRA DE UN BELLINI
    Cofre D (Plata)
    EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE
    ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI

    Tenemos ahora un problema:
    ¿Quién hizo cada uno de los cofres?
    

        Por favor, procesa la siguiente respuesta tuya y genera el JSON:
        Tu respuesta: 
            Okay, procedamos al análisis detallado del problema, las cláusulas proporcionadas y el rastro de ejecución para determinar por qué no se pudo resolver el problema.

**1. Diagnóstico del Problema Principal**

El problema principal por el que el programa Prolog no pudo encontrar una solución, según el rastro de ejecución proporcionado, es un **error de existencia del procedimiento `es_estado_consistente/1`**. A pesar de que la definición de este predicado está listada en las "CLAUSULAS USADAS", el motor de Prolog no pudo encontrarla al intentar ejecutarla. Esto es un problema técnico de cargado o visibilidad del código, más que un error lógico profundo en el diseño (aunque también existen errores lógicos, como veremos).

Más allá de este error técnico inmediato, el análisis de las cláusulas revela un **problema lógico fundamental en la modelización de las inscripciones**. Las cláusulas proporcionadas no interpretan correctamente el contenido de las inscripciones en el contexto del problema, que involucra parejas desconocidas de cofres. Asumen relaciones fijas entre cofres (como B y D formando pareja implícitamente en la inscripción de B, o las inscripciones A, C y D refiriéndose a *cualquier* cofre de un determinado tipo en lugar de a su *pareja*). El problema original requiere deducir tanto las parejas como los autores, pero la lógica implementada solo intenta deducir los autores sin considerar explícitamente las posibles configuraciones de parejas.

**2. Análisis Detallado de las Ramas Más Prometedoras**

El rastro muestra la ejecución de `solucion_revisada/4`. Este predicado genera sistemáticamente todas las combinaciones posibles de autores (Bellini o Cellini) para los cuatro cofres (A, B, C, D). Hay 2^4 = 16 combinaciones posibles.

1.  `lists:member(_4650,[bellini,cellini])` succeed, binds `_4650` to `bellini`.
2.  `lists:member(_4652,[bellini,cellini])` succeed, binds `_4652` to `bellini`.
3.  `lists:member(_4654,[bellini,cellini])` succeed, binds `_4654` to `bellini`.
4.  `lists:member(_4656,[bellini,cellini])` succeed, binds `_4656` to `bellini`.
5.  `_15486=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]` unifies the variable `Estado` with the list representing the state where all chests are made by Bellini.

Hasta este punto, el programa está funcionando correctamente, generando una de las 16 posibles asignaciones de autores y representando este "estado" del problema.

La siguiente llamada esperada en el predicado `solucion_revisada/4` es `es_estado_consistente(Estado)`. Sin embargo, en lugar de ejecutar esta llamada, el rastro muestra:

`format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/1),context(solucion_revisada/4,_148))])`

Este es el punto de fallo. Indica claramente que el predicado `es_estado_consistente/1` no fue encontrado o no estaba accesible para el motor de Prolog cuando `solucion_revisada/4` intentó llamarlo. La rama de pensamiento se detiene aquí con un error de ejecución. No llega a probar si la asignación "todos Bellini" es consistente ni ninguna de las otras 15 combinaciones.

**3. Identificación de Posibles Errores**

Basado en el rastro y las cláusulas:

*   **Errores en las premisas del problema (¿faltan premisas importantes?)**: Sí, falta modelar explícitamente las posibles parejas de cofres. El problema indica que los cofres A y C son de oro, y B y D son de plata, y que se formaron dos juegos (parejas de oro+plata). Las posibles configuraciones de pareja son:
    1.  (A con B) y (C con D)
    2.  (A con D) y (C con B)
    La lógica actual no considera estas parejas, lo cual es crucial porque las inscripciones a menudo se refieren a la *pareja* del cofre, no a *cualquier* cofre de un tipo particular, y definitivamente no asumen una pareja fija como B y D.
*   **Errores en las premisas formuladas (¿hay premisas incorrectas o mal interpretadas?)**: Sí, la interpretación de las inscripciones en las cláusulas `inscripcion_verdadera/1` e `inscripcion_verdadera_en/2` es incorrecta o demasiado simplificada:
    *   **Cofre A (Oro) - Inscripción: "EL COFRE DE PLATA ES OBRA DE UN CELLINI"**: La cláusula `inscripcion_verdadera_en(a, Estado) :- get_autor(b, cellini, Estado) ; get_autor(d, cellini, Estado).` la interpreta como "cualquier cofre de plata (B o D) es de Cellini". Dado que A es oro, su inscripción probablemente se refiere a su *pareja de plata*. La verdad de la inscripción de A depende de quién hizo el cofre de plata *con el que A forma pareja*.
    *   **Cofre B (Plata) - Inscripción: "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI"**: La cláusula `inscripcion_verdadera_en(b, Estado) :- get_autor(b, cellini, Estado) ; (get_autor(b, bellini, Estado), get_autor(d, bellini, Estado)).` es particularmente errónea.
        *   Interpreta "EL COFRE DE PLATA" como el cofre B (`get_autor(b, cellini, Estado)`). Esto es plausible, la inscripción podría referirse a sí misma.
        *   Interpreta "LOS DOS COFRES" como el cofre B *y el cofre D* (`get_autor(b, bellini, Estado), get_autor(d, bellini, Estado)`). Esto asume incorrectamente que B está emparejado con D, lo cual es una de las cosas que se debe deducir (o, en este modelo simplificado, no está contemplado en absoluto). "Los dos cofres" se refiere al cofre B *y su pareja* (que es un cofre de oro, A o C).
    *   **Cofre C (Oro) - Inscripción: "EL COFRE DE ORO ES OBRA DE UN BELLINI"**: La cláusula `inscripcion_verdadera_en(c, Estado) :- get_autor(a, bellini, Estado) ; get_autor(c, bellini, Estado).` la interpreta como "cualquier cofre de oro (A o C) es de Bellini". Dado que C es oro y la inscripción dice "EL COFRE DE ORO", lo más natural es que se refiera a *sí mismo*.
    *   **Cofre D (Plata) - Inscripción: "EL COFRE DE ORO ES OBRA DE UN BELLINI..."**: La cláusula `inscripcion_verdadera_en(d, Estado) :- get_autor(a, bellini, Estado) ; get_autor(c, bellini, Estado).` la interpreta como "cualquier cofre de oro (A o C) es de Bellini". Dado que D es plata, su inscripción probablemente se refiere a su *pareja de oro*. La verdad de la inscripción de D depende de quién hizo el cofre de oro *con el que D forma pareja*.
    *   La segunda parte de la inscripción D ("Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI") es trivial, ya que todos los cofres son obra de Bellini o Cellini. Esta parte no añade restricciones significativas y puede ser ignorada para la lógica.
*   **Errores en la lógica implementada (¿hay problemas en el razonamiento?)**: La estructura básica de la comprobación de consistencia (`Autor es Bellini <-> Inscripción es Verdadera`) es correcta, modelada con el operador `<->`. Sin embargo, la lógica falla porque las condiciones de verdad de las inscripciones (`inscripcion_verdadera_en`) están mal definidas al no tener en cuenta las parejas.
*   **Inconsistencias o contradicciones en las premisas**: Las premisas *tal como están formuladas* (con la interpretación incorrecta de las inscripciones) pueden no tener una solución consistente, no porque haya una contradicción inherente en el problema original, sino porque el modelo de Prolog no representa fielmente el problema.

**4. Sugerencias Específicas de Mejora**

*   **Premisas que podrían estar faltando**: Es fundamental añadir la consideración de las posibles configuraciones de pareja. El programa debe iterar a través de las posibles parejas y, para cada configuración, buscar una asignación de autores que sea consistente con las inscripciones *bajo esa configuración de pareja*.
*   **Premisas que podrían estar mal formuladas**:
    *   Reformular `inscripcion_verdadera_en/3` (ahora necesitará el estado *y* la configuración de parejas) para reflejar que las inscripciones se refieren a la *pareja* del cofre o al cofre *mismo*, según corresponda.
        *   A (Oro): Inscripción verdadera si su pareja de plata es Cellini.
        *   B (Plata): Inscripción verdadera si B es Cellini O su pareja de oro es Bellini.
        *   C (Oro): Inscripción verdadera si C es Bellini.
        *   D (Plata): Inscripción verdadera si su pareja de oro es Bellini.
*   **Mejoras en la lógica de razonamiento**: El predicado de solución principal debe incluir un paso para seleccionar una configuración de parejas posible antes de intentar encontrar los autores y verificar la consistencia.
*   **Resolución de inconsistencias**: Corregir la formulación de las inscripciones basadas en parejas debería permitir encontrar la solución consistente que existe en el problema original.

**5. Recomendaciones para Futuras Iteraciones**

1.  Modelar explícitamente las posibles configuraciones de parejas (A-B, C-D o A-D, C-B).
2.  Modificar la lógica de comprobación de la verdad de cada inscripción (`inscripcion_verdadera_en`) para que dependa de la configuración de parejas actual que se está probando, usando un predicado auxiliar como `get_partner/3`.
3.  El predicado principal de solución debe iterar sobre las configuraciones de pareja, y para cada una, iterar sobre las posibles asignaciones de autores, verificando la consistencia.

**Programa Prolog Corregido**

Basado en el análisis anterior, se propone el siguiente programa corregido que modela las parejas y las interpreta correctamente en las inscripciones.

```prolog
% Definición de los autores posibles
autor(bellini).
autor(cellini).

% Definición de los cofres
cofre(a, oro).
cofre(b, plata).
cofre(c, oro).
cofre(d, plata).

% Definición de las posibles configuraciones de parejas
% Hay dos cofres de oro (A, C) y dos de plata (B, D).
% Cada pareja es un cofre de oro y uno de plata.
% Las posibles parejas son (A con B y C con D) o (A con D y C con B).
posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]]).

% Predicado auxiliar para obtener la pareja de un cofre dada una configuracion
get_partner(Cofre, Partner, Pairings) :-
    member((Cofre, Partner), Pairings).
get_partner(Cofre, Partner, Pairings) :- % Handle cases where the pair is listed in reverse
    member((Partner, Cofre), Pairings).

% Predicado auxiliar para obtener el autor de un cofre en un estado dado
get_autor(Cofre, Autor, Estado) :-
    member(cofre(Cofre, Autor), Estado).

% Definición de si una inscripción es verdadera dado el estado (autores) y las parejas
% La verdad depende de quién hizo el cofre y quién hizo el cofre(s) mencionado(s).

% Cofre A (Oro): "EL COFRE DE PLATA ES OBRA DE UN CELLINI"
% Se refiere a su pareja de plata.
inscripcion_verdadera_en(a, Estado, Pairings) :-
    get_partner(a, SilverPartner, Pairings),
    get_autor(SilverPartner, cellini, Estado).

% Cofre B (Plata): "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI"
% Se refiere a sí mismo (el cofre de plata) O a su pareja (B y su pareja de oro).
inscripcion_verdadera_en(b, Estado, Pairings) :-
    get_autor(b, cellini, Estado) % El cofre de plata (B) es obra de un Cellini
    ;
    ( get_autor(b, bellini, Estado), get_partner(b, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado) ).
    % O los dos cofres (B y su pareja de oro) son de Bellini.

% Cofre C (Oro): "EL COFRE DE ORO ES OBRA DE UN BELLINI"
% Se refiere a sí mismo.
inscripcion_verdadera_en(c, Estado, Pairings) :-
    get_autor(c, bellini, Estado).

% Cofre D (Plata): "EL COFRE DE ORO ES OBRA DE UN BELLINI"
% Se refiere a su pareja de oro. (Ignoramos la parte redundante "Y POR LO MENOS UNO...")
inscripcion_verdadera_en(d, Estado, Pairings) :-
    get_partner(d, GoldPartner, Pairings),
    get_autor(GoldPartner, bellini, Estado).

% Definición de la equivalencia lógica
% (A <-> B) es verdadero si A y B son ambos verdaderos o ambos falsos
log_equiv(A, B) :- (A, B) ; (\+ A, \+ B).

% Predicado para verificar si un estado (asignación de autores) es consistente
% con una configuración de parejas dada las reglas Bellini/Cellini.
% Un estado es consistente si para cada cofre:
% Si el autor es Bellini, la inscripción es verdadera.
% Si el autor es Cellini, la inscripción es falsa.
es_estado_consistente(Estado, Pairings) :-
    % Regla para cofre A
    get_autor(a, AutorA, Estado),
    (AutorA = bellini) `log_equiv` inscripcion_verdadera_en(a, Estado, Pairings),
    % Regla para cofre B
    get_autor(b, AutorB, Estado),
    (AutorB = bellini) `log_equiv` inscripcion_verdadera_en(b, Estado, Pairings),
    % Regla para cofre C
    get_autor(c, AutorC, Estado),
    (AutorC = bellini) `log_equiv` inscripcion_verdadera_en(c, Estado, Pairings),
    % Regla para cofre D
    get_autor(d, AutorD, Estado),
    (AutorD = bellini) `log_equiv` inscripcion_verdadera_en(d, Estado, Pairings).

% Predicado principal para encontrar la solución
% Busca una configuración de parejas y una asignación de autores
% que sea consistente.
% La solución incluye los autores y la configuración de parejas.
solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :-
    posibles_parejas(AllPairings),
    member(Pairings, AllPairings),             % Prueba una configuración de parejas
    member(AutorA, [bellini, cellini]),       % Prueba autor para A
    member(AutorB, [bellini, cellini]),       % Prueba autor para B
    member(AutorC, [bellini, cellini]),       % Prueba autor para C
    member(AutorD, [bellini, cellini]),       % Prueba autor para D
    Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)],
    es_estado_consistente(Estado, Pairings).   % Verifica si la asignación es consistente con las parejas

% Para ejecutar y encontrar la(s) solución(es):
% ?- solucion(AutorA, AutorB, AutorC, AutorD, Pairings).
```

**Resultado Esperado del Programa Corregido**

Se espera que al ejecutar la consulta `solucion(AutorA, AutorB, AutorC, AutorD, Pairings).`, el programa explore las combinaciones de parejas y autores. Debería encontrar una (o más, si el problema tiene múltiples soluciones) combinación de asignaciones de autores para A, B, C, y D, junto con una de las dos posibles configuraciones de parejas, que satisfaga todas las condiciones de consistencia (autor Bellini <-> inscripción verdadera, autor Cellini <-> inscripción falsa) para los cuatro cofres bajo esa configuración de parejas. El resultado será una instanciación de `AutorA`, `AutorB`, `AutorC`, `AutorD` y `Pairings` que representa la solución del problema. Por ejemplo: `AutorA = bellini, AutorB = cellini, AutorC = cellini, AutorD = bellini, Pairings = [(a, b), (c, d)]` (este es un ejemplo hipotético, no la solución real, que el programa debe encontrar). El programa corregido modela fielmente las restricciones del problema, incluidas las parejas desconocidas y la interpretación correcta de las inscripciones.
        

-------------------------------------------------------------------

-------------------------------------------------------------------
Respuesta JSON de Gemini: {
  "facts": [
    "autor(bellini).",
    "autor(cellini).",
    "cofre(a, oro).",
    "cofre(b, plata).",
    "cofre(c, oro).",
    "cofre(d, plata).",
    "posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]])."
  ],
  "rules": [
    "get_partner(Cofre, Partner, Pairings) :- member((Cofre, Partner), Pairings).",
    "get_partner(Cofre, Partner, Pairings) :- member((Partner, Cofre), Pairings).",
    "get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).",
    "inscripcion_verdadera_en(a, Estado, Pairings) :- get_partner(a, SilverPartner, Pairings), get_autor(SilverPartner, cellini, Estado).",
    "inscripcion_verdadera_en(b, Estado, Pairings) :- get_autor(b, cellini, Estado) ; ( get_autor(b, bellini, Estado), get_partner(b, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado) ).",
    "inscripcion_verdadera_en(c, Estado, Pairings) :- get_autor(c, bellini, Estado).",
    "inscripcion_verdadera_en(d, Estado, Pairings) :- get_partner(d, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado).",
    "log_equiv(A, B) :- (A, B) ; (\\+ A, \\+ B).",
    "es_estado_consistente(Estado, Pairings) :- get_autor(a, AutorA, Estado), (AutorA = bellini) log_equiv inscripcion_verdadera_en(a, Estado, Pairings), get_autor(b, AutorB, Estado), (AutorB = bellini) log_equiv inscripcion_verdadera_en(b, Estado, Pairings), get_autor(c, AutorC, Estado), (AutorC = bellini) log_equiv inscripcion_verdadera_en(c, Estado, Pairings), get_autor(d, AutorD, Estado), (AutorD = bellini) log_equiv inscripcion_verdadera_en(d, Estado, Pairings).",
    "solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :- posibles_parejas(AllPairings), member(Pairings, AllPairings), member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], es_estado_consistente(Estado, Pairings)."
  ],
  "objetive": [
    "solucion(AutorA, AutorB, AutorC, AutorD, Pairings)."
  ]
}

-------------------------------------------------------------------


MFSA: Cláusulas del Problema Extraídas: 17

--- Cláusulas Extraídas ---

Cláusulas Objetivo:
- solucion(AutorA, AutorB, AutorC, AutorD, Pairings).

Cláusulas del Problema:
- autor(bellini).
- autor(cellini).
- cofre(a, oro).
- cofre(b, plata).
- cofre(c, oro).
- cofre(d, plata).
- posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]]).
- get_partner(Cofre, Partner, Pairings) :- member((Cofre, Partner), Pairings).
- get_partner(Cofre, Partner, Pairings) :- member((Partner, Cofre), Pairings).
- get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).
- inscripcion_verdadera_en(a, Estado, Pairings) :- get_partner(a, SilverPartner, Pairings), get_autor(SilverPartner, cellini, Estado).
- inscripcion_verdadera_en(b, Estado, Pairings) :- get_autor(b, cellini, Estado) ; ( get_autor(b, bellini, Estado), get_partner(b, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado) ).
- inscripcion_verdadera_en(c, Estado, Pairings) :- get_autor(c, bellini, Estado).
- inscripcion_verdadera_en(d, Estado, Pairings) :- get_partner(d, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado).
- log_equiv(A, B) :- (A, B) ; (\+ A, \+ B).
- es_estado_consistente(Estado, Pairings) :- get_autor(a, AutorA, Estado), (AutorA = bellini) log_equiv inscripcion_verdadera_en(a, Estado, Pairings), get_autor(b, AutorB, Estado), (AutorB = bellini) log_equiv inscripcion_verdadera_en(b, Estado, Pairings), get_autor(c, AutorC, Estado), (AutorC = bellini) log_equiv inscripcion_verdadera_en(c, Estado, Pairings), get_autor(d, AutorD, Estado), (AutorD = bellini) log_equiv inscripcion_verdadera_en(d, Estado, Pairings).
- solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :- posibles_parejas(AllPairings), member(Pairings, AllPairings), member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], es_estado_consistente(Estado, Pairings).

Axiomas Base:
--- Formalización Completada ---
KR-Store:
  Axiomas Base: 0
  Cláusulas del Problema: 17
  Cláusulas Objetivo: 1

--- CICLO DE REFINAMIENTO 2 / 3 ---

--- Ejecutando MISA-J (CFCS) ---
Programa Prolog: autor(bellini).
autor(cellini).
cofre(a, oro).
cofre(b, plata).
cofre(c, oro).
cofre(d, plata).
posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]]).
get_partner(Cofre, Partner, Pairings) :- member((Cofre, Partner), Pairings).
get_partner(Cofre, Partner, Pairings) :- member((Partner, Cofre), Pairings).
get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).
inscripcion_verdadera_en(a, Estado, Pairings) :- get_partner(a, SilverPartner, Pairings), get_autor(SilverPartner, cellini, Estado).
inscripcion_verdadera_en(b, Estado, Pairings) :- get_autor(b, cellini, Estado) ; ( get_autor(b, bellini, Estado), get_partner(b, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado) ).
inscripcion_verdadera_en(c, Estado, Pairings) :- get_autor(c, bellini, Estado).
inscripcion_verdadera_en(d, Estado, Pairings) :- get_partner(d, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado).
log_equiv(A, B) :- (A, B) ; (\+ A, \+ B).
es_estado_consistente(Estado, Pairings) :- get_autor(a, AutorA, Estado), (AutorA = bellini) log_equiv inscripcion_verdadera_en(a, Estado, Pairings), get_autor(b, AutorB, Estado), (AutorB = bellini) log_equiv inscripcion_verdadera_en(b, Estado, Pairings), get_autor(c, AutorC, Estado), (AutorC = bellini) log_equiv inscripcion_verdadera_en(c, Estado, Pairings), get_autor(d, AutorD, Estado), (AutorD = bellini) log_equiv inscripcion_verdadera_en(d, Estado, Pairings).
solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :- posibles_parejas(AllPairings), member(Pairings, AllPairings), member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], es_estado_consistente(Estado, Pairings).
--- Traza cruda de Prolog ---
Warning:    Singleton variables: [Pairings]
ERROR: /tmp/tmp0_rftnff.pl:36:92: Syntax error: Operator expected
                    call: catch((solucion(_4650,_4652,_4654,_4656,_4658),fail),_4670,(format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[_4670]),fail)) @ <dynamic>:0
                        call: solucion(_4650,_4652,_4654,_4656,_4658) @ <dynamic>:0
                          call: posibles_parejas(_8462) @ <dynamic>:0
                          exit: posibles_parejas([[(a,b),(c,d)],[(a,d),(c,b)]]) @ /tmp/tmp0_rftnff.pl:27
                          call: lists:member(_4658,[[(a,b),(c,d)],[(a,d),(c,b)]]) @ <dynamic>:0
                          exit: lists:member([(a,b),(c,d)],[[(a,b),(c,d)],[(a,d),(c,b)]]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4650,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4652,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4654,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _16158=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          exception(error(existence_error(procedure,es_estado_consistente/2),context(solucion/5,_16372))): es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                        exception(error(existence_error(procedure,es_estado_consistente/2),context(solucion/5,_16372))): solucion(_4650,_4652,_4654,_4656,_4658) @ /tmp/tmp0_rftnff.pl:37
                        call: format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/2),context(solucion/5,_150))]) @ <dynamic>:0
### CAUGHT_EXCEPTION ###
error(existence_error(procedure,es_estado_consistente/2),context(solucion/5,_150))
### END_EXCEPTION ###
                        exit: format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/2),context(solucion/5,_150))]) @ <dynamic>:0
                        call: fail @ <dynamic>:0
--- Fin de traza cruda ---
INFO: Checkpoint guardado: checkpoints/misa_j_trace_cycle1_Recordamos_que_Bellini_siempre_ponía_a_sus_cofres_.pkl

--- Ejecutando MMRC ---


-------------------------------------------------------------------

--- Pregunta a Gemini (general) ---
Prompt: 
        Como experto en lógica y razonamiento, necesito que analices por qué no se pudo resolver el siguiente problema:

        PROBLEMA ORIGINAL:
        
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas, mientras que Cellini siempre les ponía inscripciones falsas.En algunos museos podemos ver parejas de cofres —uno de oro y otro de plata— que en un principio se hicieron y se vendieron como juego. La verdad es que la familia Bellini y la Cellini eran íntimas y que a veces colaboraban en algunas de estas parejas; aunque cada cofre lo hiciera siempre una sola persona, dentro de la pareja un cofre podía hacerlo uno y el otro otro diferente. Ambas familias se divertían muchísimo haciendo estas parejas de manera que la inteligente posteridad pudiera adivinar —o adivinar parcialmente— quiénes habían sido los autores.  Habían aparecido cuatro cofres, dos de oro y dos de plata; se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja. Me los enseñaron y pronto pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra (que consistía, entre otras cosas, en una excelente caja de botellas de Chianti) y un beso de una de las florentinas más maravillosas que haya existido nunca He aquí los cuatro cofres:
    Cofre A (Oro)
    EL COFRE DE PLATA ES OBRA DE UN CELLINI
    Cofre B (Plata)
    EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON
    DE BELLINI
    Cofre C (Oro)
    EL COFRE DE ORO ES OBRA DE UN BELLINI
    Cofre D (Plata)
    EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE
    ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI

    Tenemos ahora un problema:
    ¿Quién hizo cada uno de los cofres?
    

        CLAUSULAS USADAS:
        ['autor(bellini).', 'autor(cellini).', 'cofre(a, oro).', 'cofre(b, plata).', 'cofre(c, oro).', 'cofre(d, plata).', 'posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]]).', 'get_partner(Cofre, Partner, Pairings) :- member((Cofre, Partner), Pairings).', 'get_partner(Cofre, Partner, Pairings) :- member((Partner, Cofre), Pairings).', 'get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).', 'inscripcion_verdadera_en(a, Estado, Pairings) :- get_partner(a, SilverPartner, Pairings), get_autor(SilverPartner, cellini, Estado).', 'inscripcion_verdadera_en(b, Estado, Pairings) :- get_autor(b, cellini, Estado) ; ( get_autor(b, bellini, Estado), get_partner(b, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado) ).', 'inscripcion_verdadera_en(c, Estado, Pairings) :- get_autor(c, bellini, Estado).', 'inscripcion_verdadera_en(d, Estado, Pairings) :- get_partner(d, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado).', 'log_equiv(A, B) :- (A, B) ; (\\+ A, \\+ B).', 'es_estado_consistente(Estado, Pairings) :- get_autor(a, AutorA, Estado), (AutorA = bellini) log_equiv inscripcion_verdadera_en(a, Estado, Pairings), get_autor(b, AutorB, Estado), (AutorB = bellini) log_equiv inscripcion_verdadera_en(b, Estado, Pairings), get_autor(c, AutorC, Estado), (AutorC = bellini) log_equiv inscripcion_verdadera_en(c, Estado, Pairings), get_autor(d, AutorD, Estado), (AutorD = bellini) log_equiv inscripcion_verdadera_en(d, Estado, Pairings).', 'solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :- posibles_parejas(AllPairings), member(Pairings, AllPairings), member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], es_estado_consistente(Estado, Pairings).']

        RAMAS DE PENSAMIENTO MÁS PROMETEDORAS:
        [
  {
    "nombre": "root",
    "veracidad": "",
    "valor": [
      {
        "nombre": "catch((solucion(_4650,_4652,_4654,_4656,_4658),fail),_4670,(format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[_4670]),fail))",
        "veracidad": "",
        "valor": [
          {
            "nombre": "solucion(_4650,_4652,_4654,_4656,_4658)",
            "veracidad": "",
            "valor": [
              {
                "nombre": "posibles_parejas(_8462)",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "posibles_parejas([[(a,b),(c,d)],[(a,d),(c,b)]])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "lists:member(_4658,[[(a,b),(c,d)],[(a,d),(c,b)]])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member([(a,b),(c,d)],[[(a,b),(c,d)],[(a,d),(c,b)]])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "lists:member(_4650,[bellini,cellini])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(bellini,[bellini,cellini])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "lists:member(_4652,[bellini,cellini])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(bellini,[bellini,cellini])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "lists:member(_4654,[bellini,cellini])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(bellini,[bellini,cellini])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "lists:member(_4656,[bellini,cellini])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "lists:member(bellini,[bellini,cellini])",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "_16158=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]",
                    "veracidad": "verde"
                  }
                ]
              },
              {
                "nombre": "format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/2),context(solucion/5,_150))])",
                "veracidad": "verde",
                "valor": [
                  {
                    "nombre": "format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/2),context(solucion/5,_150))])",
                    "veracidad": "verde"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
]

        ANÁLISIS INICIAL LLM:
        None

        CONTEXTO:
        El sistema de razonamiento lógico no pudo encontrar una solución exitosa. Todas las ramas de pensamiento terminaron sin éxito.
        

        INSTRUCCIONES:
        1. Analiza las ramas de pensamiento que más se acercaron al éxito
        2. Identifica posibles errores en:
        - Las premisas del problema (¿faltan premisas importantes?)
        - Las premisas formuladas (¿hay premisas incorrectas o mal interpretadas?)
        - La lógica implementada (¿hay problemas en el razonamiento?)
        - Inconsistencias o contradicciones en las premisas
        

        3. Proporciona sugerencias específicas para:
        - Premisas que podrían estar faltando
        - Premisas que podrían estar mal formuladas
        - Mejoras en la lógica de razonamiento
        - Resolución de inconsistencias
        

        Por favor, proporciona un análisis estructurado que incluya:
        - Diagnóstico del problema principal
        - Análisis detallado de las ramas más prometedoras
        
        - Sugerencias específicas de mejora
        - Recomendaciones para futuras iteraciones
        4. Genera un programa de prolog:
        - Vuelve a escribir el programa pero corrige los errores anteriormente explicados.
        - Esto es sumamente importante: La corrección semántica y sintáctica del programa Prolog es crucial, ya que la verdad de tu hipótesis se deduce de la capacidad del programa para probarla. Asegúrate de que el código esté bien escrito y refleje lógicamente el problema y tu solución propuesta.
        - Para modelar implicaciones lógicas en Prolog de forma declarativa, usa la negación para expresar que no puede darse el caso de que el antecedente sea cierto y el consecuente falso.
        - Comenta el resultado esperado del programa pero nunca hables como si ya se hubiera ejecutado.
        

-------------------------------------------------------------------

-------------------------------------------------------------------
Respuesta de Gemini: Okay, let's analyze the provided Prolog code and the execution trace to understand why the solution wasn't found.

**Diagnóstico del Problema Principal**

El problema principal que impidió que el programa encontrara una solución es un **error de sintaxis** en la definición de la cláusula `es_estado_consistente/2`. Específicamente, se intentó utilizar el predicado `log_equiv` como un operador infijo (`(A) log_equiv (B)`) sin haberlo declarado previamente como un operador en Prolog mediante la directiva `:- op/3`.

Cuando el intérprete de Prolog intenta cargar el código, encuentra esta sintaxis no reconocida al parsear `es_estado_consistente/2`. Esto provoca que la definición de `es_estado_consistente/2` (y potencialmente cualquier código que venga después en el mismo archivo o bloque) no sea cargada correctamente en la base de conocimiento. Como resultado, cuando el predicado `solucion/5` llama a `es_estado_consistente(Estado, Pairings)`, el predicado no existe para el sistema, lo que genera el error `existence_error(procedure,es_estado_consistente/2)` que se observa en la traza.

**Análisis Detallado de las Ramas Más Prometedoras**

La traza de pensamiento proporcionada muestra que el sistema llega correctamente hasta el predicado `solucion/5`. Dentro de `solucion/5`, se ejecutan exitosamente las siguientes metas:

1.  `posibles_parejas(_8462)`: Recupera la lista de posibles parejas.
2.  `lists:member(_4658,[[(a,b),(c,d)],[(a,d),(c,b)]])`: Selecciona la primera pareja posible `[(a,b),(c,d)]`.
3.  `lists:member(_4650,[bellini,cellini])`, `lists:member(_4652,[bellini,cellini])`, `lists:member(_4654,[bellini,cellini])`, `lists:member(_4656,[bellini,cellini])`: Comienza a iterar a través de las 16 posibles combinaciones de autores para los cofres A, B, C y D. La traza muestra un ejemplo donde se intenta la combinación `AutorA=bellini`, `AutorB=bellini`, `AutorC=bellini`, `AutorD=bellini`.
4.  `_16158=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]`: Construye la lista `Estado` para esta combinación de autores.
5.  Llegados a este punto, el siguiente paso en la definición de `solucion/5` es llamar a `es_estado_consistente(Estado, Pairings)`. La traza muestra la siguiente entrada:
    `format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/2),context(solucion/5,_150))])`.
    Esto confirma que el sistema intentó ejecutar `es_estado_consistente/2` pero falló porque el predicado no estaba definido o accesible, tal como se explicó en el diagnóstico.

Las ramas de pensamiento "más prometedoras" llegaron hasta el punto de tener una combinación de autores y una posible configuración de parejas listas para ser validadas, pero no pudieron proceder porque la regla de validación principal (`es_estado_consistente`) no se pudo ejecutar debido al error de sintaxis.

**Análisis de Posibles Errores Adicionales (Más allá del error de ejecución)**

1.  **Premisas del problema:** El problema está bien descrito y es típico de este tipo de lógica. No parecen faltar premisas cruciales para definir las reglas.
2.  **Premisas formuladas (Cláusulas):**
    *   Las cláusulas que definen los cofres, autores y posibles parejas (`autor/1`, `cofre/2`, `posibles_parejas/1`) son correctas.
    *   `get_partner/3` y `get_autor/3` son auxiliares correctos.
    *   `inscripcion_verdadera_en/3`:
        *   A, B, C: Las traducciones lógicas de las inscripciones A, B y C parecen correctas.
        *   D: La inscripción D es "EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI". La cláusula proporcionada es `inscripcion_verdadera_en(d, Estado, Pairings) :- get_partner(d, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado).`. Esto solo traduce la primera parte de la conjunción ("EL COFRE DE ORO ES OBRA DE UN BELLINI"). La segunda parte ("POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI") se ha omitido. Sin embargo, dado el contexto del problema donde se afirma que *todos* los cofres fueron hechos por alguien de las familias Bellini o Cellini, la segunda parte de la inscripción D ("at least one of these chests is the work of a child of Bellini or Cellini") se convierte en una tautología. Si *todos* los cofres son hechos por Bellini o Cellini, entonces *al menos uno* en la pareja también lo será. Por lo tanto, omitir esta parte en la lógica de `inscripcion_verdadera_en(d, ...)` es probablemente correcto, asumiendo que la segunda parte es efectivamente una declaración que es siempre verdadera en cualquier estado válido del sistema (donde todos los cofres tienen un autor de Bellini o Cellini).
    *   `log_equiv/2`: La definición lógica `(A, B) ; (\+ A, \+ B)` es una forma correcta de expresar `A <=> B` en Prolog usando negación por fallo (`\+`).
    *   `es_estado_consistente/2`: La lógica `(Autor = bellini) log_equiv inscripcion_verdadera_en(...)` para cada cofre modela correctamente la regla (Bellini dice la verdad, Cellini miente). Si el autor es Bellini, la equivalencia sólo es cierta si la inscripción es verdadera. Si el autor *no* es Bellini (es decir, es Cellini, dado el dominio), la equivalencia sólo es cierta si la inscripción *no* es verdadera (es decir, es falsa). La estructura lógica es correcta, a falta de la declaración del operador.
    *   `solucion/5`: La estructura para iterar sobre parejas y autores y luego verificar la consistencia es la estrategia estándar para resolver este tipo de problemas por fuerza bruta inteligente. Es correcta.

3.  **Lógica implementada:** La lógica subyacente para representar las reglas parece ser correcta, asumiendo la interpretación tautológica de parte de la inscripción D y el dominio de autores limitado a Bellini y Cellini. El fallo no parece estar en la lógica de las reglas, sino en su implementación sintáctica.
4.  **Inconsistencias o contradicciones:** No hay inconsistencias o contradicciones aparentes en las reglas formuladas *per se*. El problema de que no se encontró una solución se debe a la imposibilidad de ejecutar la validación por el error de sintaxis. Una vez corregido el error, el programa debería ser capaz de explorar el espacio de búsqueda y encontrar las soluciones (si existen).

**Sugerencias Específicas de Mejora**

1.  **Premisas que podrían estar faltando:** No parece que falten premisas lógicas esenciales para la resolución del problema tal como se describe. El único punto de ambigüedad es la segunda parte de la inscripción D, pero la interpretación más razonable la hace redundante.
2.  **Premisas que podrían estar mal formuladas:** La única "mala formulación" es la omisión de la declaración del operador `log_equiv/2`. La lógica expresada en las cláusulas parece fiel al problema.
3.  **Mejoras en la lógica de razonamiento:** La lógica de generar posibilidades (parejas y autores) y luego validarlas es sólida. No se necesita una mejora conceptual importante, sólo la corrección sintáctica para que la validación pueda ejecutarse.
4.  **Resolución de inconsistencias:** No hay inconsistencias lógicas que resolver en las reglas proporcionadas. El problema es de sintaxis.

**Recomendaciones para Futuras Iteraciones**

*   Siempre que se defina un operador infijo, prefijo o sufijo personalizado en Prolog, recordar incluir la directiva `:- op(Precedencia, Tipo, Operador).` antes de usar el operador.
*   Utilizar un linter o un entorno de desarrollo de Prolog que resalte errores de sintaxis para detectar problemas como este más fácilmente.
*   Si hubiera dudas sobre la interpretación de alguna inscripción (como la parte "hijo" en la inscripción D), se podría añadir explícitamente esa cláusula lógica. En este caso, si "hijo de Bellini o Cellini" simplemente significa "hecho por Bellini o Cellini", la cláusula para la inscripción D podría ser:
    `inscripcion_verdadera_en(d, Estado, Pairings) :- get_partner(d, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado), ( (get_autor(d, bellini, Estado) ; get_autor(d, cellini, Estado)) ; (get_partner(d, GoldPartner, Pairings), (get_autor(GoldPartner, bellini, Estado) ; get_autor(GoldPartner, cellini, Estado))) ).`
    Sin embargo, como se argumentó, la parte `(get_autor(X, bellini, Estado) ; get_autor(X, cellini, Estado))` es siempre cierta para cualquier cofre X en un `Estado` válido, por lo que la cláusula original es equivalente bajo ese supuesto y más concisa.

**Programa de Prolog Corregido**

El programa corregido debe incluir la declaración del operador `log_equiv`. Mantendremos el resto de las cláusulas tal como estaban, ya que su lógica parece correcta para el problema descrito (asumiendo la interpretación tautológica de la parte ambigua de la inscripción D).

```prolog
% Declaración del operador infijo para equivalencia lógica
% Prioridad 700, tipo xfy (asociativo a la derecha)
:- op(700, xfy, log_equiv).

% Predicados básicos
autor(bellini).
autor(cellini).

cofre(a, oro).
cofre(b, plata).
cofre(c, oro).
cofre(d, plata).

% Posibles configuraciones de parejas
posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]]).

% Predicado auxiliar para obtener el compañero de un cofre en una pareja
get_partner(Cofre, Partner, Pairings) :- member((Cofre, Partner), Pairings).
get_partner(Cofre, Partner, Pairings) :- member((Partner, Cofre), Pairings). % Para manejar el orden

% Predicado auxiliar para obtener el autor de un cofre en un estado dado
get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).

% Predicados que definen cuándo es verdadera la inscripción de cada cofre
% Asumimos que "Estos cofres" en la inscripción D se refiere a la pareja,
% y que la parte "hijo o de Bellini o Cellini" es tautológica ya que todos
% los cofres están hechos por Bellini o Cellini.
inscripcion_verdadera_en(a, Estado, Pairings) :-
    get_partner(a, SilverPartner, Pairings),
    get_autor(SilverPartner, cellini, Estado).

inscripcion_verdadera_en(b, Estado, Pairings) :-
    % "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI"
    get_autor(b, cellini, Estado) ;
    ( get_partner(b, GoldPartner, Pairings),
      get_autor(b, bellini, Estado),
      get_autor(GoldPartner, bellini, Estado)
    ).

inscripcion_verdadera_en(c, Estado, Pairings) :-
    % "EL COFRE DE ORO ES OBRA DE UN BELLINI"
    get_autor(c, bellini, Estado).

inscripcion_verdadera_en(d, Estado, Pairings) :-
    % "EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI"
    % La segunda parte se considera tautológica.
    get_partner(d, GoldPartner, Pairings),
    get_autor(GoldPartner, bellini, Estado).

% Predicado para la equivalencia lógica (A <=> B)
% Es verdadero si A y B son ambos verdaderos, o A y B son ambos falsos.
A log_equiv B :- (A, B) ; (\+ A, \+ B).

% Predicado para verificar si un estado (asignación de autores) es consistente
% con una configuración de parejas, basándose en la regla de Bellini/Cellini.
% Para cada cofre, (autor es Bellini) <=> (inscripción es verdadera).
es_estado_consistente(Estado, Pairings) :-
    get_autor(a, AutorA, Estado), (AutorA = bellini) log_equiv inscripcion_verdadera_en(a, Estado, Pairings),
    get_autor(b, AutorB, Estado), (AutorB = bellini) log_equiv inscripcion_verdadera_en(b, Estado, Pairings),
    get_autor(c, AutorC, Estado), (AutorC = bellini) log_equiv inscripcion_verdadera_en(c, Estado, Pairings),
    get_autor(d, AutorD, Estado), (AutorD = bellini) log_equiv inscripcion_verdadera_en(d, Estado, Pairings).

% Predicado principal para encontrar la solución
% Encuentra una asignación de autores (AutorA a AutorD) y una configuración de parejas
% que sea consistente con las reglas del problema.
solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :-
    posibles_parejas(AllPairings),
    member(Pairings, AllPairings),
    member(AutorA, [bellini, cellini]),
    member(AutorB, [bellini, cellini]),
    member(AutorC, [bellini, cellini]),
    member(AutorD, [bellini, cellini]),
    Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)],
    % Verificar si este estado de autores y parejas es consistente con las reglas
    es_estado_consistente(Estado, Pairings).

```

**Comentario sobre el Resultado Esperado del Programa Corregido**

Una vez corregido el error de sintaxis y cargado el código en un intérprete de Prolog, se espera que al consultar `solucion(AutorA, AutorB, AutorC, AutorD, Pairings).`, el sistema explore las posibles combinaciones de parejas (2 opciones) y autores (16 opciones), aplicando la lógica de consistencia definida en `es_estado_consistente/2`.

Se espera que se encuentren una o más combinaciones de valores para `AutorA`, `AutorB`, `AutorC`, `AutorD` y `Pairings` que satisfagan todas las condiciones lógicas. El problema original en el texto literario implica que la solución es única ("pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra"). Por lo tanto, si la lógica del problema está completa y es consistente, el programa debería encontrar exactamente una solución (un conjunto único de autores y una única configuración de parejas).

El resultado de la consulta sería la instanciación de las variables `AutorA`, `AutorB`, `AutorC`, `AutorD` con `bellini` o `cellini` y `Pairings` con una de las dos configuraciones posibles, representando la identificación única de quién hizo cada cofre y cómo estaban emparejados.

-------------------------------------------------------------------


INFO: Checkpoint guardado: checkpoints/mmrc_result_cycle1_Recordamos_que_Bellini_siempre_ponía_a_sus_cofres_.pkl

=== RESULTADO DEL ANÁLISIS MMRC ===
❌ NO SE ENCONTRÓ SOLUCIÓN - ANÁLISIS DE ERRORES


-------------------------------------------------------------------

--- Pregunta a Gemini JSON (general) ---
Prompt: 
        Hola, basándote en tu respuesta anterior sobre el problema de lógica, necesito que extraigas y estructures la información de la siguiente manera en un formato JSON:

        El JSON debe tener tres claves principales en el nivel raíz:

        "facts": Un array de strings, donde cada string es un hecho Prolog completo tal como lo definiste.
        "rules": Un array de strings, donde cada string es una regla Prolog completa tal como la definiste.
        "objective": Un string que represente la consulta principal de Prolog que se usaría para obtener la solución (por ejemplo, solucion(Tweedledum, Tweedledee).).

        Consejos importantes para asegurar la compatibilidad con Prolog al generar los strings de hechos y reglas:
            Átomos: Los nombres de predicados y las constantes (átomos) en Prolog deben comenzar con una letra minúscula. Si un átomo necesita contener espacios, caracteres especiales, o comenzar con una letra mayúscula, debe ir entre comillas simples (ej: 'Yo soy Fidel', 'Luna').
            Variables: Las variables en Prolog siempre comienzan con una letra mayúscula o un guion bajo (ej: Dia, Hermano, _Ignorado).
            Sintaxis de Hechos: Asegúrate de que cada hecho termine con un punto (.). Ejemplo: miente_leon(lunes).
            Sintaxis de Reglas: Las reglas deben seguir el formato cabeza :- cuerpo., donde cabeza es la conclusión, :- significa "si", y cuerpo puede ser una o más metas separadas por comas (,) que representan una conjunción lógica. Cada regla debe terminar con un punto (.). Ejemplo: dice_verdad(leon, Dia) :- + miente_leon(Dia).
            Strings dentro de Prolog: Las frases como "Yo soy Fidel" deben ser tratadas como átomos en Prolog, es decir, encerradas en comillas simples si contienen espacios o mayúsculas no iniciales (ej: 'Yo soy Fidel').
            Escapado en JSON: Dado que los hechos y reglas de Prolog serán strings dentro de un JSON, si alguna vez usaras comillas dobles dentro de tu código Prolog (lo cual es menos común para átomos que las comillas simples), necesitarían ser escapadas (") dentro del string JSON. Usar comillas simples para los átomos Prolog evita este problema. Las barras invertidas () en Prolog (como en + para negación) son caracteres válidos y no necesitan doble escapado a menos que el propio string JSON lo requiera para el carácter .
            Los símbolos correctos de prolog son: \+ para negación, :- para implicación, ; para disyunción, . para final de cláusula, = para unificación, \= para desigualdad.
            Evita usar el \ innecesariamente puesto a que por si solo es un error de sintaxis

        Problema original:
            
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas, mientras que Cellini siempre les ponía inscripciones falsas.En algunos museos podemos ver parejas de cofres —uno de oro y otro de plata— que en un principio se hicieron y se vendieron como juego. La verdad es que la familia Bellini y la Cellini eran íntimas y que a veces colaboraban en algunas de estas parejas; aunque cada cofre lo hiciera siempre una sola persona, dentro de la pareja un cofre podía hacerlo uno y el otro otro diferente. Ambas familias se divertían muchísimo haciendo estas parejas de manera que la inteligente posteridad pudiera adivinar —o adivinar parcialmente— quiénes habían sido los autores.  Habían aparecido cuatro cofres, dos de oro y dos de plata; se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja. Me los enseñaron y pronto pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra (que consistía, entre otras cosas, en una excelente caja de botellas de Chianti) y un beso de una de las florentinas más maravillosas que haya existido nunca He aquí los cuatro cofres:
    Cofre A (Oro)
    EL COFRE DE PLATA ES OBRA DE UN CELLINI
    Cofre B (Plata)
    EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON
    DE BELLINI
    Cofre C (Oro)
    EL COFRE DE ORO ES OBRA DE UN BELLINI
    Cofre D (Plata)
    EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE
    ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI

    Tenemos ahora un problema:
    ¿Quién hizo cada uno de los cofres?
    

        Por favor, procesa la siguiente respuesta tuya y genera el JSON:
        Tu respuesta: 
            Okay, let's analyze the provided Prolog code and the execution trace to understand why the solution wasn't found.

**Diagnóstico del Problema Principal**

El problema principal que impidió que el programa encontrara una solución es un **error de sintaxis** en la definición de la cláusula `es_estado_consistente/2`. Específicamente, se intentó utilizar el predicado `log_equiv` como un operador infijo (`(A) log_equiv (B)`) sin haberlo declarado previamente como un operador en Prolog mediante la directiva `:- op/3`.

Cuando el intérprete de Prolog intenta cargar el código, encuentra esta sintaxis no reconocida al parsear `es_estado_consistente/2`. Esto provoca que la definición de `es_estado_consistente/2` (y potencialmente cualquier código que venga después en el mismo archivo o bloque) no sea cargada correctamente en la base de conocimiento. Como resultado, cuando el predicado `solucion/5` llama a `es_estado_consistente(Estado, Pairings)`, el predicado no existe para el sistema, lo que genera el error `existence_error(procedure,es_estado_consistente/2)` que se observa en la traza.

**Análisis Detallado de las Ramas Más Prometedoras**

La traza de pensamiento proporcionada muestra que el sistema llega correctamente hasta el predicado `solucion/5`. Dentro de `solucion/5`, se ejecutan exitosamente las siguientes metas:

1.  `posibles_parejas(_8462)`: Recupera la lista de posibles parejas.
2.  `lists:member(_4658,[[(a,b),(c,d)],[(a,d),(c,b)]])`: Selecciona la primera pareja posible `[(a,b),(c,d)]`.
3.  `lists:member(_4650,[bellini,cellini])`, `lists:member(_4652,[bellini,cellini])`, `lists:member(_4654,[bellini,cellini])`, `lists:member(_4656,[bellini,cellini])`: Comienza a iterar a través de las 16 posibles combinaciones de autores para los cofres A, B, C y D. La traza muestra un ejemplo donde se intenta la combinación `AutorA=bellini`, `AutorB=bellini`, `AutorC=bellini`, `AutorD=bellini`.
4.  `_16158=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]`: Construye la lista `Estado` para esta combinación de autores.
5.  Llegados a este punto, el siguiente paso en la definición de `solucion/5` es llamar a `es_estado_consistente(Estado, Pairings)`. La traza muestra la siguiente entrada:
    `format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[error(existence_error(procedure,es_estado_consistente/2),context(solucion/5,_150))])`.
    Esto confirma que el sistema intentó ejecutar `es_estado_consistente/2` pero falló porque el predicado no estaba definido o accesible, tal como se explicó en el diagnóstico.

Las ramas de pensamiento "más prometedoras" llegaron hasta el punto de tener una combinación de autores y una posible configuración de parejas listas para ser validadas, pero no pudieron proceder porque la regla de validación principal (`es_estado_consistente`) no se pudo ejecutar debido al error de sintaxis.

**Análisis de Posibles Errores Adicionales (Más allá del error de ejecución)**

1.  **Premisas del problema:** El problema está bien descrito y es típico de este tipo de lógica. No parecen faltar premisas cruciales para definir las reglas.
2.  **Premisas formuladas (Cláusulas):**
    *   Las cláusulas que definen los cofres, autores y posibles parejas (`autor/1`, `cofre/2`, `posibles_parejas/1`) son correctas.
    *   `get_partner/3` y `get_autor/3` son auxiliares correctos.
    *   `inscripcion_verdadera_en/3`:
        *   A, B, C: Las traducciones lógicas de las inscripciones A, B y C parecen correctas.
        *   D: La inscripción D es "EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI". La cláusula proporcionada es `inscripcion_verdadera_en(d, Estado, Pairings) :- get_partner(d, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado).`. Esto solo traduce la primera parte de la conjunción ("EL COFRE DE ORO ES OBRA DE UN BELLINI"). La segunda parte ("POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI") se ha omitido. Sin embargo, dado el contexto del problema donde se afirma que *todos* los cofres fueron hechos por alguien de las familias Bellini o Cellini, la segunda parte de la inscripción D ("at least one of these chests is the work of a child of Bellini or Cellini") se convierte en una tautología. Si *todos* los cofres son hechos por Bellini o Cellini, entonces *al menos uno* en la pareja también lo será. Por lo tanto, omitir esta parte en la lógica de `inscripcion_verdadera_en(d, ...)` es probablemente correcto, asumiendo que la segunda parte es efectivamente una declaración que es siempre verdadera en cualquier estado válido del sistema (donde todos los cofres tienen un autor de Bellini o Cellini).
    *   `log_equiv/2`: La definición lógica `(A, B) ; (\+ A, \+ B)` es una forma correcta de expresar `A <=> B` en Prolog usando negación por fallo (`\+`).
    *   `es_estado_consistente/2`: La lógica `(Autor = bellini) log_equiv inscripcion_verdadera_en(...)` para cada cofre modela correctamente la regla (Bellini dice la verdad, Cellini miente). Si el autor es Bellini, la equivalencia sólo es cierta si la inscripción es verdadera. Si el autor *no* es Bellini (es decir, es Cellini, dado el dominio), la equivalencia sólo es cierta si la inscripción *no* es verdadera (es decir, es falsa). La estructura lógica es correcta, a falta de la declaración del operador.
    *   `solucion/5`: La estructura para iterar sobre parejas y autores y luego verificar la consistencia es la estrategia estándar para resolver este tipo de problemas por fuerza bruta inteligente. Es correcta.

3.  **Lógica implementada:** La lógica subyacente para representar las reglas parece ser correcta, asumiendo la interpretación tautológica de parte de la inscripción D y el dominio de autores limitado a Bellini y Cellini. El fallo no parece estar en la lógica de las reglas, sino en su implementación sintáctica.
4.  **Inconsistencias o contradicciones:** No hay inconsistencias o contradicciones aparentes en las reglas formuladas *per se*. El problema de que no se encontró una solución se debe a la imposibilidad de ejecutar la validación por el error de sintaxis. Una vez corregido el error, el programa debería ser capaz de explorar el espacio de búsqueda y encontrar las soluciones (si existen).

**Sugerencias Específicas de Mejora**

1.  **Premisas que podrían estar faltando:** No parece que falten premisas lógicas esenciales para la resolución del problema tal como se describe. El único punto de ambigüedad es la segunda parte de la inscripción D, pero la interpretación más razonable la hace redundante.
2.  **Premisas que podrían estar mal formuladas:** La única "mala formulación" es la omisión de la declaración del operador `log_equiv/2`. La lógica expresada en las cláusulas parece fiel al problema.
3.  **Mejoras en la lógica de razonamiento:** La lógica de generar posibilidades (parejas y autores) y luego validarlas es sólida. No se necesita una mejora conceptual importante, sólo la corrección sintáctica para que la validación pueda ejecutarse.
4.  **Resolución de inconsistencias:** No hay inconsistencias lógicas que resolver en las reglas proporcionadas. El problema es de sintaxis.

**Recomendaciones para Futuras Iteraciones**

*   Siempre que se defina un operador infijo, prefijo o sufijo personalizado en Prolog, recordar incluir la directiva `:- op(Precedencia, Tipo, Operador).` antes de usar el operador.
*   Utilizar un linter o un entorno de desarrollo de Prolog que resalte errores de sintaxis para detectar problemas como este más fácilmente.
*   Si hubiera dudas sobre la interpretación de alguna inscripción (como la parte "hijo" en la inscripción D), se podría añadir explícitamente esa cláusula lógica. En este caso, si "hijo de Bellini o Cellini" simplemente significa "hecho por Bellini o Cellini", la cláusula para la inscripción D podría ser:
    `inscripcion_verdadera_en(d, Estado, Pairings) :- get_partner(d, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado), ( (get_autor(d, bellini, Estado) ; get_autor(d, cellini, Estado)) ; (get_partner(d, GoldPartner, Pairings), (get_autor(GoldPartner, bellini, Estado) ; get_autor(GoldPartner, cellini, Estado))) ).`
    Sin embargo, como se argumentó, la parte `(get_autor(X, bellini, Estado) ; get_autor(X, cellini, Estado))` es siempre cierta para cualquier cofre X en un `Estado` válido, por lo que la cláusula original es equivalente bajo ese supuesto y más concisa.

**Programa de Prolog Corregido**

El programa corregido debe incluir la declaración del operador `log_equiv`. Mantendremos el resto de las cláusulas tal como estaban, ya que su lógica parece correcta para el problema descrito (asumiendo la interpretación tautológica de la parte ambigua de la inscripción D).

```prolog
% Declaración del operador infijo para equivalencia lógica
% Prioridad 700, tipo xfy (asociativo a la derecha)
:- op(700, xfy, log_equiv).

% Predicados básicos
autor(bellini).
autor(cellini).

cofre(a, oro).
cofre(b, plata).
cofre(c, oro).
cofre(d, plata).

% Posibles configuraciones de parejas
posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]]).

% Predicado auxiliar para obtener el compañero de un cofre en una pareja
get_partner(Cofre, Partner, Pairings) :- member((Cofre, Partner), Pairings).
get_partner(Cofre, Partner, Pairings) :- member((Partner, Cofre), Pairings). % Para manejar el orden

% Predicado auxiliar para obtener el autor de un cofre en un estado dado
get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).

% Predicados que definen cuándo es verdadera la inscripción de cada cofre
% Asumimos que "Estos cofres" en la inscripción D se refiere a la pareja,
% y que la parte "hijo o de Bellini o Cellini" es tautológica ya que todos
% los cofres están hechos por Bellini o Cellini.
inscripcion_verdadera_en(a, Estado, Pairings) :-
    get_partner(a, SilverPartner, Pairings),
    get_autor(SilverPartner, cellini, Estado).

inscripcion_verdadera_en(b, Estado, Pairings) :-
    % "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI"
    get_autor(b, cellini, Estado) ;
    ( get_partner(b, GoldPartner, Pairings),
      get_autor(b, bellini, Estado),
      get_autor(GoldPartner, bellini, Estado)
    ).

inscripcion_verdadera_en(c, Estado, Pairings) :-
    % "EL COFRE DE ORO ES OBRA DE UN BELLINI"
    get_autor(c, bellini, Estado).

inscripcion_verdadera_en(d, Estado, Pairings) :-
    % "EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI"
    % La segunda parte se considera tautológica.
    get_partner(d, GoldPartner, Pairings),
    get_autor(GoldPartner, bellini, Estado).

% Predicado para la equivalencia lógica (A <=> B)
% Es verdadero si A y B son ambos verdaderos, o A y B son ambos falsos.
A log_equiv B :- (A, B) ; (\+ A, \+ B).

% Predicado para verificar si un estado (asignación de autores) es consistente
% con una configuración de parejas, basándose en la regla de Bellini/Cellini.
% Para cada cofre, (autor es Bellini) <=> (inscripción es verdadera).
es_estado_consistente(Estado, Pairings) :-
    get_autor(a, AutorA, Estado), (AutorA = bellini) log_equiv inscripcion_verdadera_en(a, Estado, Pairings),
    get_autor(b, AutorB, Estado), (AutorB = bellini) log_equiv inscripcion_verdadera_en(b, Estado, Pairings),
    get_autor(c, AutorC, Estado), (AutorC = bellini) log_equiv inscripcion_verdadera_en(c, Estado, Pairings),
    get_autor(d, AutorD, Estado), (AutorD = bellini) log_equiv inscripcion_verdadera_en(d, Estado, Pairings).

% Predicado principal para encontrar la solución
% Encuentra una asignación de autores (AutorA a AutorD) y una configuración de parejas
% que sea consistente con las reglas del problema.
solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :-
    posibles_parejas(AllPairings),
    member(Pairings, AllPairings),
    member(AutorA, [bellini, cellini]),
    member(AutorB, [bellini, cellini]),
    member(AutorC, [bellini, cellini]),
    member(AutorD, [bellini, cellini]),
    Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)],
    % Verificar si este estado de autores y parejas es consistente con las reglas
    es_estado_consistente(Estado, Pairings).

```

**Comentario sobre el Resultado Esperado del Programa Corregido**

Una vez corregido el error de sintaxis y cargado el código en un intérprete de Prolog, se espera que al consultar `solucion(AutorA, AutorB, AutorC, AutorD, Pairings).`, el sistema explore las posibles combinaciones de parejas (2 opciones) y autores (16 opciones), aplicando la lógica de consistencia definida en `es_estado_consistente/2`.

Se espera que se encuentren una o más combinaciones de valores para `AutorA`, `AutorB`, `AutorC`, `AutorD` y `Pairings` que satisfagan todas las condiciones lógicas. El problema original en el texto literario implica que la solución es única ("pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra"). Por lo tanto, si la lógica del problema está completa y es consistente, el programa debería encontrar exactamente una solución (un conjunto único de autores y una única configuración de parejas).

El resultado de la consulta sería la instanciación de las variables `AutorA`, `AutorB`, `AutorC`, `AutorD` con `bellini` o `cellini` y `Pairings` con una de las dos configuraciones posibles, representando la identificación única de quién hizo cada cofre y cómo estaban emparejados.
        

-------------------------------------------------------------------

-------------------------------------------------------------------
Respuesta JSON de Gemini: {
  "facts": [
    "autor(bellini).",
    "autor(cellini).",
    "cofre(a, oro).",
    "cofre(b, plata).",
    "cofre(c, oro).",
    "cofre(d, plata).",
    "posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]])."
  ],
  "rules": [
    ":- op(700, xfy, log_equiv).",
    "get_partner(Cofre, Partner, Pairings) :- member((Cofre, Partner), Pairings).",
    "get_partner(Cofre, Partner, Pairings) :- member((Partner, Cofre), Pairings).",
    "get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).",
    "inscripcion_verdadera_en(a, Estado, Pairings) :- get_partner(a, SilverPartner, Pairings), get_autor(SilverPartner, cellini, Estado).",
    "inscripcion_verdadera_en(b, Estado, Pairings) :- get_autor(b, cellini, Estado) ; ( get_partner(b, GoldPartner, Pairings), get_autor(b, bellini, Estado), get_autor(GoldPartner, bellini, Estado) ).",
    "inscripcion_verdadera_en(c, Estado, Pairings) :- get_autor(c, bellini, Estado).",
    "inscripcion_verdadera_en(d, Estado, Pairings) :- get_partner(d, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado).",
    "A log_equiv B :- (A, B) ; (\\+ A, \\+ B).",
    "es_estado_consistente(Estado, Pairings) :- get_autor(a, AutorA, Estado), (AutorA = bellini) log_equiv inscripcion_verdadera_en(a, Estado, Pairings), get_autor(b, AutorB, Estado), (AutorB = bellini) log_equiv inscripcion_verdadera_en(b, Estado, Pairings), get_autor(c, AutorC, Estado), (AutorC = bellini) log_equiv inscripcion_verdadera_en(c, Estado, Pairings), get_autor(d, AutorD, Estado), (AutorD = bellini) log_equiv inscripcion_verdadera_en(d, Estado, Pairings).",
    "solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :- posibles_parejas(AllPairings), member(Pairings, AllPairings), member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], es_estado_consistente(Estado, Pairings)."
  ],
  "objetive": [
    "solucion(AutorA, AutorB, AutorC, AutorD, Pairings)."
  ]
}

-------------------------------------------------------------------


MFSA: Cláusulas del Problema Extraídas: 18

--- Cláusulas Extraídas ---

Cláusulas Objetivo:
- solucion(AutorA, AutorB, AutorC, AutorD, Pairings).

Cláusulas del Problema:
- autor(bellini).
- autor(cellini).
- cofre(a, oro).
- cofre(b, plata).
- cofre(c, oro).
- cofre(d, plata).
- posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]]).
- :- op(700, xfy, log_equiv).
- get_partner(Cofre, Partner, Pairings) :- member((Cofre, Partner), Pairings).
- get_partner(Cofre, Partner, Pairings) :- member((Partner, Cofre), Pairings).
- get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).
- inscripcion_verdadera_en(a, Estado, Pairings) :- get_partner(a, SilverPartner, Pairings), get_autor(SilverPartner, cellini, Estado).
- inscripcion_verdadera_en(b, Estado, Pairings) :- get_autor(b, cellini, Estado) ; ( get_partner(b, GoldPartner, Pairings), get_autor(b, bellini, Estado), get_autor(GoldPartner, bellini, Estado) ).
- inscripcion_verdadera_en(c, Estado, Pairings) :- get_autor(c, bellini, Estado).
- inscripcion_verdadera_en(d, Estado, Pairings) :- get_partner(d, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado).
- A log_equiv B :- (A, B) ; (\+ A, \+ B).
- es_estado_consistente(Estado, Pairings) :- get_autor(a, AutorA, Estado), (AutorA = bellini) log_equiv inscripcion_verdadera_en(a, Estado, Pairings), get_autor(b, AutorB, Estado), (AutorB = bellini) log_equiv inscripcion_verdadera_en(b, Estado, Pairings), get_autor(c, AutorC, Estado), (AutorC = bellini) log_equiv inscripcion_verdadera_en(c, Estado, Pairings), get_autor(d, AutorD, Estado), (AutorD = bellini) log_equiv inscripcion_verdadera_en(d, Estado, Pairings).
- solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :- posibles_parejas(AllPairings), member(Pairings, AllPairings), member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], es_estado_consistente(Estado, Pairings).

Axiomas Base:
--- Formalización Completada ---
KR-Store:
  Axiomas Base: 0
  Cláusulas del Problema: 18
  Cláusulas Objetivo: 1

--- CICLO DE REFINAMIENTO 3 / 3 ---

--- Ejecutando MISA-J (CFCS) ---
Programa Prolog: autor(bellini).
autor(cellini).
cofre(a, oro).
cofre(b, plata).
cofre(c, oro).
cofre(d, plata).
posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]]).
:- op(700, xfy, log_equiv).
get_partner(Cofre, Partner, Pairings) :- member((Cofre, Partner), Pairings).
get_partner(Cofre, Partner, Pairings) :- member((Partner, Cofre), Pairings).
get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).
inscripcion_verdadera_en(a, Estado, Pairings) :- get_partner(a, SilverPartner, Pairings), get_autor(SilverPartner, cellini, Estado).
inscripcion_verdadera_en(b, Estado, Pairings) :- get_autor(b, cellini, Estado) ; ( get_partner(b, GoldPartner, Pairings), get_autor(b, bellini, Estado), get_autor(GoldPartner, bellini, Estado) ).
inscripcion_verdadera_en(c, Estado, Pairings) :- get_autor(c, bellini, Estado).
inscripcion_verdadera_en(d, Estado, Pairings) :- get_partner(d, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado).
A log_equiv B :- (A, B) ; (\+ A, \+ B).
es_estado_consistente(Estado, Pairings) :- get_autor(a, AutorA, Estado), (AutorA = bellini) log_equiv inscripcion_verdadera_en(a, Estado, Pairings), get_autor(b, AutorB, Estado), (AutorB = bellini) log_equiv inscripcion_verdadera_en(b, Estado, Pairings), get_autor(c, AutorC, Estado), (AutorC = bellini) log_equiv inscripcion_verdadera_en(c, Estado, Pairings), get_autor(d, AutorD, Estado), (AutorD = bellini) log_equiv inscripcion_verdadera_en(d, Estado, Pairings).
solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :- posibles_parejas(AllPairings), member(Pairings, AllPairings), member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], es_estado_consistente(Estado, Pairings).
--- Traza cruda de Prolog ---
Warning:    Singleton variables: [Pairings]
                    call: catch((solucion(_4650,_4652,_4654,_4656,_4658),fail),_4670,(format(user_error,'~N### CAUGHT_EXCEPTION ###~n~w~n### END_EXCEPTION ###~n',[_4670]),fail)) @ <dynamic>:0
                        call: solucion(_4650,_4652,_4654,_4656,_4658) @ <dynamic>:0
                          call: posibles_parejas(_7690) @ <dynamic>:0
                          exit: posibles_parejas([[(a,b),(c,d)],[(a,d),(c,b)]]) @ /tmp/tmpv4goqdt7.pl:27
                          call: lists:member(_4658,[[(a,b),(c,d)],[(a,d),(c,b)]]) @ <dynamic>:0
                          exit: lists:member([(a,b),(c,d)],[[(a,b),(c,d)],[(a,d),(c,b)]]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4650,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4652,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4654,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15386=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15586,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15586),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16046,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16046),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16046),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16046),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16046,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16046,a),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((_16046,a),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(a,_16046,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15586),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15586),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15586,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15458=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15658,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15658),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16118,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16118),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16118),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16118),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16118,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16118,a),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((_16118,a),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(a,_16118,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15658),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15658),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15658,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4654,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15458=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15658,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15658),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16118,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16118),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16118),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16118),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16118,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16118,a),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((_16118,a),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(a,_16118,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15658),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15658),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15658,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15530=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15730,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16190,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16190),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16190),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16190),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16190,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16190,a),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((_16190,a),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(a,_16190,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15730,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4652,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4654,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15458=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15658,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15658),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16118,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16118),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:32
                            exit: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16726,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16726),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:33
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16726),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16726),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16726,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16118),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16118),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16118,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16118,a),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((_16118,a),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(a,_16118,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15658),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15658),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15658,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15530=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15730,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16190,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16190),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:32
                            exit: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16798,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16798),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:33
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16798),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16798),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16798,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16190),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16190),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16190,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16190,a),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((_16190,a),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(a,_16190,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15730,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4654,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15530=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15730,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16190,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16190),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:32
                            exit: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16798,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16798),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:33
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16798),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16798),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16798,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16190),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16190),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16190,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16190,a),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((_16190,a),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(a,_16190,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15730,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15602=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15802,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15802),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16262,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16262),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:32
                            exit: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16870,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16870),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:33
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16870),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16870),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16870,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16262),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16262),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16262,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16262,a),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((_16262,a),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(a,_16262,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15802),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15802),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15802,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4650,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4652,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4654,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15458=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15658,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15658),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16150,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16150),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16150),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16150),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16150,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16150,a),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((_16150,a),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(a,_16150,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(25): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                            exit: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16224,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16224),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              redo(16): inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:33
                                call: get_partner(b,_16752,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((b,_16752),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((b,_16752),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(b,_16752,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16752,b),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(b,a,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                call: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                                call: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((_16752,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((_16752,b),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(b,_16752,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16224),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16224),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16224,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15658),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15658),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15658,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15530=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15730,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15730),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16222,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16222),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16222),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16222),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16222,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16222,a),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((_16222,a),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(a,_16222,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(25): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                            exit: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16296,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16296),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              redo(16): inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:33
                                call: get_partner(b,_16824,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((b,_16824),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((b,_16824),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(b,_16824,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16824,b),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(b,a,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                call: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                                call: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member((_16824,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((_16824,b),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(b,_16824,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16296),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16296),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16296,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15730),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15730),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15730,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4654,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15530=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15730,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15730),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16222,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16222),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16222),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16222),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16222,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16222,a),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((_16222,a),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(a,_16222,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(25): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                            exit: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16296,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16296),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              redo(16): inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:33
                                call: get_partner(b,_16824,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((b,_16824),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((b,_16824),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(b,_16824,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16824,b),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(b,a,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                call: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                                call: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((_16824,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((_16824,b),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(b,_16824,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16296),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16296),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16296,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15730),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15730),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15730,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15602=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15802,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16294,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16294),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16294),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16294),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16294,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16294,a),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((_16294,a),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(a,_16294,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(25): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                            exit: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16368,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16368),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              redo(16): inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:33
                                call: get_partner(b,_16896,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((b,_16896),[(a,b),(c,d)]) @ <dynamic>:0
                                  fail: lists:member((b,_16896),[(a,b),(c,d)]) @ <dynamic>:0
                                redo(0): get_partner(b,_16896,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16896,b),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(b,a,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:30
                                call: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                                call: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member((_16896,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((_16896,b),[(a,b),(c,d)]) @ <dynamic>:0
                                fail: get_partner(b,_16896,[(a,b),(c,d)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16368),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16368),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16368,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15802,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4652,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4654,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15530=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15730,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15730),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16222,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16222),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:32
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15730),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15730),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15730,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15602=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15802,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16294,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16294),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:32
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15802,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4654,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15602=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15802,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16294,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16294),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:32
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15802,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15674=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                            call: get_autor(a,_15874,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15874),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                                call: get_partner(a,_16366,[(a,b),(c,d)]) @ <dynamic>:0
                                  call: lists:member((a,_16366),[(a,b),(c,d)]) @ <dynamic>:0
                                  exit: lists:member((a,b),[(a,b),(c,d)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,b,[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ /tmp/tmpv4goqdt7.pl:32
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15874),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15874),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15874,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,b),(c,d)]) @ <dynamic>:0
                          redo(0): lists:member(_4658,[[(a,b),(c,d)],[(a,d),(c,b)]]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member([(a,d),(c,b)],[[(a,b),(c,d)],[(a,d),(c,b)]]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4650,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4652,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4654,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15458=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15658,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15658),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16118,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16118),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16118),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16118),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16118,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16118,a),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((_16118,a),[(a,d),(c,b)]) @ <dynamic>:0
                                fail: get_partner(a,_16118,[(a,d),(c,b)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15658),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15658),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15658,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15530=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15730,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16190,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16190),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:32
                            exit: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16798,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16798),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              redo(16): inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:33
                                call: get_partner(b,_17326,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((b,_17326),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((b,_17326),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(b,_17326,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_17326,b),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((c,b),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(b,c,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                call: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                                call: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:33
                            exit: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(c,_18244,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(c,_18244),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(c,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(c,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(c,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:34
                            exit: (bellini=bellini)log_equiv inscripcion_verdadera_en(c,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(d,_19068,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(d,_19068),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(d,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(d,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(d,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(d,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(d,_19560,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((d,_19560),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((d,_19560),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(d,_19560,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_19560,d),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(d,a,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                call: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(d,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:35
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(d,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(c,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(c,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(c,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(c,_18244),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(c,_18244),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(c,_18244,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16798),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16798),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16798,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16190),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16190),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16190,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16190,a),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((_16190,a),[(a,d),(c,b)]) @ <dynamic>:0
                                fail: get_partner(a,_16190,[(a,d),(c,b)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15730,[cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                          redo(0): lists:member(_4654,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15530=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15730,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16190,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16190),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16190),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16190),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16190,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16190,a),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((_16190,a),[(a,d),(c,b)]) @ <dynamic>:0
                                fail: get_partner(a,_16190,[(a,d),(c,b)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15730,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15602=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15802,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15802),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16262,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16262),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(d,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:32
                            exit: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16870,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16870),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              redo(16): inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:33
                                call: get_partner(b,_17398,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((b,_17398),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((b,_17398),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(b,_17398,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_17398,b),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((c,b),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(b,c,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                call: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                                call: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(c,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(c,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(b,bellini),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                fail: get_autor(b,bellini,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16870),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16870),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16870,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16262),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16262),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16262,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16262,a),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((_16262,a),[(a,d),(c,b)]) @ <dynamic>:0
                                fail: get_partner(a,_16262,[(a,d),(c,b)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15802),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15802),[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15802,[cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                          redo(0): lists:member(_4652,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4654,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15530=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15730,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16190,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16190),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16190),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16190),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16190,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16190,a),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((_16190,a),[(a,d),(c,b)]) @ <dynamic>:0
                                fail: get_partner(a,_16190,[(a,d),(c,b)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15730),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15730,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15602=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15802,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15802),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16262,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16262),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:32
                            exit: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16870,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16870),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:33
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16870),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16870),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16870,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16262),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16262),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16262,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16262,a),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((_16262,a),[(a,d),(c,b)]) @ <dynamic>:0
                                fail: get_partner(a,_16262,[(a,d),(c,b)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15802),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15802),[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15802,[cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                          redo(0): lists:member(_4654,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15602=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15802,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15802),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16262,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16262),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16262),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16262),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16262,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16262,a),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((_16262,a),[(a,d),(c,b)]) @ <dynamic>:0
                                fail: get_partner(a,_16262,[(a,d),(c,b)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15802),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15802),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15802,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15674=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15874,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15874),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,bellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,bellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16334,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16334),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(d,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(d,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:32
                            exit: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16942,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16942),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:33
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16942),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16942),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16942,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16334),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16334),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16334,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16334,a),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((_16334,a),[(a,d),(c,b)]) @ <dynamic>:0
                                fail: get_partner(a,_16334,[(a,d),(c,b)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15874),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15874),[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15874,[cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,bellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                          redo(0): lists:member(_4650,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4652,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4654,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15530=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15730,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15730),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16222,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16222),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16222),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16222),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16222,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16222,a),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((_16222,a),[(a,d),(c,b)]) @ <dynamic>:0
                                fail: get_partner(a,_16222,[(a,d),(c,b)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(25): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            exit: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16296,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16296),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              redo(16): inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:33
                                call: get_partner(b,_16824,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((b,_16824),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((b,_16824),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(b,_16824,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16824,b),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((c,b),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(b,c,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                call: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                                call: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:33
                            exit: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(c,_17742,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(c,_17742),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(c,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(c,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(c,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:34
                            exit: (bellini=bellini)log_equiv inscripcion_verdadera_en(c,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(d,_18566,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(d,_18566),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(d,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(d,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(d,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(d,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(d,_19026,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((d,_19026),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((d,_19026),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(d,_19026,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_19026,d),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(d,a,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                call: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(a,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(a,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((_19026,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((_19026,d),[(a,d),(c,b)]) @ <dynamic>:0
                                fail: get_partner(d,_19026,[(a,d),(c,b)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(d,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(d,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(d,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(c,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(c,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(c,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(c,_17742),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(c,_17742),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(c,_17742,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16296),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16296),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16296,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15730),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15730),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15730,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15602=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15802,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16294,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16294),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:32
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15802,[cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                          redo(0): lists:member(_4654,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15602=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15802,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16294,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16294),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16294),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16294),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16294,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16294,a),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((_16294,a),[(a,d),(c,b)]) @ <dynamic>:0
                                fail: get_partner(a,_16294,[(a,d),(c,b)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(25): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            exit: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16368,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16368),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                              call: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(b,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              redo(16): inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:33
                                call: get_partner(b,_16896,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((b,_16896),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((b,_16896),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(b,_16896,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16896,b),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((c,b),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(b,c,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                call: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                                call: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(c,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(c,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member(cofre(b,bellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(b,bellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(9): (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: bellini=bellini @ <dynamic>:0
                              exit: bellini=bellini @ <dynamic>:0
                            fail: (bellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16368),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16368),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16368,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15802,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15674=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15874,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15874),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16366,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16366),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(d,cellini,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:32
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15874),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15874),[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15874,[cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,bellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                          redo(0): lists:member(_4652,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4654,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15602=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15802,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16294,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16294),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16294),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16294),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16294,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16294,a),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((_16294,a),[(a,d),(c,b)]) @ <dynamic>:0
                                fail: get_partner(a,_16294,[(a,d),(c,b)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(25): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            exit: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16368,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16368),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:33
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16368),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16368),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16368,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15802),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15802,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15674=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15874,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15874),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16366,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16366),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:32
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15874),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15874),[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15874,[cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,bellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                          redo(0): lists:member(_4654,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: lists:member(_4656,[bellini,cellini]) @ <dynamic>:0
                          exit: lists:member(bellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15674=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15874,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15874),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16366,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16366),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  fail: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                fail: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  redo(0): lists:member((a,_16366),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                  fail: lists:member((a,_16366),[(a,d),(c,b)]) @ <dynamic>:0
                                redo(0): get_partner(a,_16366,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:30
                                  call: lists:member((_16366,a),[(a,d),(c,b)]) @ <dynamic>:0
                                  fail: lists:member((_16366,a),[(a,d),(c,b)]) @ <dynamic>:0
                                fail: get_partner(a,_16366,[(a,d),(c,b)]) @ <dynamic>:0
                              fail: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            redo(25): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            exit: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                            call: get_autor(b,_16440,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              call: lists:member(cofre(b,_16440),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(b,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(b,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:33
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(b,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(b,_16440),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(b,_16440),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(b,_16440,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15874),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15874),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15874,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,bellini)],[(a,d),(c,b)]) @ <dynamic>:0
                          redo(0): lists:member(_4656,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          exit: lists:member(cellini,[bellini,cellini]) @ /usr/lib/swi-prolog/library/lists.pl:121
                          call: _15746=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          exit: [cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]=[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)] @ <dynamic>:0
                          call: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                            call: get_autor(a,_15946,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              call: lists:member(cofre(a,_15946),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                              exit: lists:member(cofre(a,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                            exit: get_autor(a,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                            call: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(9): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: cellini=bellini @ <dynamic>:0
                              fail: cellini=bellini @ <dynamic>:0
                            redo(17): (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:36
                              call: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                                call: get_partner(a,_16438,[(a,d),(c,b)]) @ <dynamic>:0
                                  call: lists:member((a,_16438),[(a,d),(c,b)]) @ <dynamic>:0
                                  exit: lists:member((a,d),[(a,d),(c,b)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_partner(a,d,[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:29
                                call: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  call: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                                  exit: lists:member(cofre(d,cellini),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                                exit: get_autor(d,cellini,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /tmp/tmpv4goqdt7.pl:31
                              exit: inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ /tmp/tmpv4goqdt7.pl:32
                            fail: (cellini=bellini)log_equiv inscripcion_verdadera_en(a,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                              redo(0): lists:member(cofre(a,_15946),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ /usr/lib/swi-prolog/library/lists.pl:121
                              fail: lists:member(cofre(a,_15946),[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                            fail: get_autor(a,_15946,[cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)]) @ <dynamic>:0
                          fail: es_estado_consistente([cofre(a,cellini),cofre(b,cellini),cofre(c,cellini),cofre(d,cellini)],[(a,d),(c,b)]) @ <dynamic>:0
                        fail: solucion(_4650,_4652,_4654,_4656,_4658) @ <dynamic>:0
--- Fin de traza cruda ---
ERROR: Error en MISA-J: 'NoneType' object has no attribute 'nombre'

--- Ejecutando MMRC ---


-------------------------------------------------------------------

--- Pregunta a Gemini (general) ---
Prompt: 
        Como experto en lógica y razonamiento, necesito que analices por qué no se pudo resolver el siguiente problema:

        PROBLEMA ORIGINAL:
        
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas, mientras que Cellini siempre les ponía inscripciones falsas.En algunos museos podemos ver parejas de cofres —uno de oro y otro de plata— que en un principio se hicieron y se vendieron como juego. La verdad es que la familia Bellini y la Cellini eran íntimas y que a veces colaboraban en algunas de estas parejas; aunque cada cofre lo hiciera siempre una sola persona, dentro de la pareja un cofre podía hacerlo uno y el otro otro diferente. Ambas familias se divertían muchísimo haciendo estas parejas de manera que la inteligente posteridad pudiera adivinar —o adivinar parcialmente— quiénes habían sido los autores.  Habían aparecido cuatro cofres, dos de oro y dos de plata; se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja. Me los enseñaron y pronto pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra (que consistía, entre otras cosas, en una excelente caja de botellas de Chianti) y un beso de una de las florentinas más maravillosas que haya existido nunca He aquí los cuatro cofres:
    Cofre A (Oro)
    EL COFRE DE PLATA ES OBRA DE UN CELLINI
    Cofre B (Plata)
    EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON
    DE BELLINI
    Cofre C (Oro)
    EL COFRE DE ORO ES OBRA DE UN BELLINI
    Cofre D (Plata)
    EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE
    ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI

    Tenemos ahora un problema:
    ¿Quién hizo cada uno de los cofres?
    

        CLAUSULAS USADAS:
        ['autor(bellini).', 'autor(cellini).', 'cofre(a, oro).', 'cofre(b, plata).', 'cofre(c, oro).', 'cofre(d, plata).', 'posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]]).', ':- op(700, xfy, log_equiv).', 'get_partner(Cofre, Partner, Pairings) :- member((Cofre, Partner), Pairings).', 'get_partner(Cofre, Partner, Pairings) :- member((Partner, Cofre), Pairings).', 'get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).', 'inscripcion_verdadera_en(a, Estado, Pairings) :- get_partner(a, SilverPartner, Pairings), get_autor(SilverPartner, cellini, Estado).', 'inscripcion_verdadera_en(b, Estado, Pairings) :- get_autor(b, cellini, Estado) ; ( get_partner(b, GoldPartner, Pairings), get_autor(b, bellini, Estado), get_autor(GoldPartner, bellini, Estado) ).', 'inscripcion_verdadera_en(c, Estado, Pairings) :- get_autor(c, bellini, Estado).', 'inscripcion_verdadera_en(d, Estado, Pairings) :- get_partner(d, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado).', 'A log_equiv B :- (A, B) ; (\\+ A, \\+ B).', 'es_estado_consistente(Estado, Pairings) :- get_autor(a, AutorA, Estado), (AutorA = bellini) log_equiv inscripcion_verdadera_en(a, Estado, Pairings), get_autor(b, AutorB, Estado), (AutorB = bellini) log_equiv inscripcion_verdadera_en(b, Estado, Pairings), get_autor(c, AutorC, Estado), (AutorC = bellini) log_equiv inscripcion_verdadera_en(c, Estado, Pairings), get_autor(d, AutorD, Estado), (AutorD = bellini) log_equiv inscripcion_verdadera_en(d, Estado, Pairings).', 'solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :- posibles_parejas(AllPairings), member(Pairings, AllPairings), member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], es_estado_consistente(Estado, Pairings).']

        RAMAS DE PENSAMIENTO MÁS PROMETEDORAS:
        []

        ANÁLISIS INICIAL LLM:
        None

        CONTEXTO:
        El sistema de razonamiento lógico no pudo encontrar una solución exitosa. Todas las ramas de pensamiento terminaron sin éxito.
        Además, se detectaron errores durante la ejecución del solver que pueden haber afectado el proceso de razonamiento.

        INSTRUCCIONES:
        1. Analiza las ramas de pensamiento que más se acercaron al éxito
        2. Identifica posibles errores en:
        - Las premisas del problema (¿faltan premisas importantes?)
        - Las premisas formuladas (¿hay premisas incorrectas o mal interpretadas?)
        - La lógica implementada (¿hay problemas en el razonamiento?)
        - Inconsistencias o contradicciones en las premisas
        - Errores técnicos del solver que pudieron haber impedido una resolución exitosa

        3. Proporciona sugerencias específicas para:
        - Premisas que podrían estar faltando
        - Premisas que podrían estar mal formuladas
        - Mejoras en la lógica de razonamiento
        - Resolución de inconsistencias
        - Soluciones para los errores técnicos detectados

        Por favor, proporciona un análisis estructurado que incluya:
        - Diagnóstico del problema principal
        - Análisis detallado de las ramas más prometedoras
        - Análisis de los errores técnicos del solver
        - Sugerencias específicas de mejora
        - Recomendaciones para futuras iteraciones
        4. Genera un programa de prolog:
        - Vuelve a escribir el programa pero corrige los errores anteriormente explicados.
        - Esto es sumamente importante: La corrección semántica y sintáctica del programa Prolog es crucial, ya que la verdad de tu hipótesis se deduce de la capacidad del programa para probarla. Asegúrate de que el código esté bien escrito y refleje lógicamente el problema y tu solución propuesta.
        - Para modelar implicaciones lógicas en Prolog de forma declarativa, usa la negación para expresar que no puede darse el caso de que el antecedente sea cierto y el consecuente falso.
        - Comenta el resultado esperado del programa pero nunca hables como si ya se hubiera ejecutado.
        

-------------------------------------------------------------------

-------------------------------------------------------------------
Respuesta de Gemini: ¡Excelente! Como experto en lógica y razonamiento, es fascinante abordar este tipo de problemas donde la formalización precisa del lenguaje natural en lógica es crucial. Analicemos por qué el programa Prolog proporcionado no pudo resolver el problema.

**Diagnóstico del Problema Principal**

El problema principal radica en la formalización lógica de una de las inscripciones, específicamente la del Cofre D, dentro del código Prolog proporcionado. La interpretación plasmada en la cláusula `inscripcion_verdadera_en(d, Estado, Pairings)` parece no corresponder con la interpretación necesaria para que el problema tenga una solución única, tal como sugiere la descripción del narrador al haber resuelto el acertijo y recibido honorarios y un beso.

La formalización actual de la inscripción del Cofre D, combinada con las otras reglas y la estructura del problema, conduce a una situación lógicamente inconsistente (ninguna combinación de autores y parejas satisface todas las condiciones simultáneamente). Esto explica por qué el solver no encontró ninguna solución y reportó que todas las ramas de pensamiento fallaron. Los "errores técnicos" reportados probablemente no fueron errores de ejecución fatales en el código básico de Prolog, sino más bien una indicación de que el proceso de búsqueda se agotó sin encontrar un estado válido, lo cual, en algunos entornos, podría manifestarse como un tipo de error o advertencia, o simplemente una señal de que la consulta falló.

**Análisis Detallado de las Ramas Más Prometedoras**

Dado que el sistema reportó que "Todas las ramas de pensamiento terminaron sin éxito" y no proporcionó ramas específicas "más prometedoras", el análisis debe basarse en la estructura del problema y las cláusulas proporcionadas. La estrategia del programa `solucion/5` es generar todas las posibles asignaciones de autores (2^4 = 16 combinaciones) para cada una de las dos posibles configuraciones de parejas (2 configuraciones), resultando en 32 estados posibles. Para cada estado (asignación de autores + configuración de parejas), se verifica la consistencia utilizando `es_estado_consistente/2`.

La falta de éxito en *todas* las ramas generadas significa que *ninguno* de los 32 estados posibles satisface la condición `es_estado_consistente(Estado, Pairings)`. Esto, a su vez, significa que, para cada estado, al menos una de las equivalencias lógicas `(AutorX = bellini) log_equiv inscripcion_verdadera_en(X, Estado, Pairings)` resultó ser falsa.

Un análisis manual del problema con las inscripciones tal como se formalizan en el código (y asumiendo la regla estándar Bellini=Verdadero, Cellini=Falso) revela lo siguiente:

1.  **Análisis de la inscripción B:** "EL COFRE DE PLATA [B] O ES OBRA DE UN CELLINI O LOS DOS COFRES [B y su pareja de oro] SON DE BELLINI".
    *   Formalización en Prolog: `inscripcion_verdadera_en(b, Estado, Pairings) :- get_autor(b, cellini, Estado) ; ( get_partner(b, GoldPartner, Pairings), get_autor(b, bellini, Estado), get_autor(GoldPartner, bellini, Estado) ).` (B es Cellini) OR (B es Bellini Y su pareja es Bellini).
    *   Regla de B: (Autor de B = bellini) <=> Inscripción de B es verdadera.
    *   Si Autor de B es Cellini (regla exige inscripción falsa): La inscripción sería `(true) OR (...)` = `true`. Esto contradice la regla que exige que sea falsa. Por lo tanto, el Autor de B *no puede* ser Cellini.
    *   Si Autor de B es Bellini (regla exige inscripción verdadera): La inscripción sería `(false) OR (true Y su pareja es Bellini)` = `su pareja es Bellini`. Para que la inscripción sea verdadera, su pareja *debe* ser Bellini.
    *   **Deducción clave:** El Cofre B debe ser obra de Bellini, y su pareja (un cofre de oro) también debe ser obra de Bellini.

2.  **Aplicación de la deducción a las posibles parejas:**
    *   Posibilidad 1: Parejas son (A,B) y (C,D). El cofre de oro pareja de B es A. La deducción exige A y B son Bellini.
        *   A (Oro, Bellini): Inscripción "EL COFRE DE PLATA ES OBRA DE UN CELLINI". Su pareja (B) es Bellini. La inscripción es falsa. Pero A es Bellini, su inscripción debe ser verdadera. Contradicción.
        *   Esta configuración de parejas (A,B) y (C,D) es imposible bajo las reglas.
    *   Posibilidad 2: Parejas son (A,D) y (C,B). El cofre de oro pareja de B es C. La deducción exige C y B son Bellini.
        *   Autores parciales: B=Bellini, C=Bellini. Parejas: (A,D) y (C,B).
        *   C (Oro, Bellini, pareja de B): Inscripción "EL COFRE DE ORO ES OBRA DE UN BELLINI". Se refiere a sí mismo (C). C es Bellini. La inscripción es verdadera. Consistente con C ser Bellini.
        *   B (Plata, Bellini, pareja de C): Inscripción "EL COFRE DE PLATA [B] O ES OBRA DE UN CELLINI O LOS DOS COFRES [B y C] SON DE BELLINI". B es Bellini, C es Bellini. La inscripción es `false OR (true AND true)` = `true`. Consistente con B ser Bellini.
        *   Ahora consideremos la pareja (A,D). Autores A y D desconocidos aún. A es Oro, D es Plata.
        *   Inscripción A: "EL COFRE DE PLATA [D] ES OBRA DE UN CELLINI".
            *   Si A es Bellini (inscripción verdadera): D debe ser Cellini.
            *   Si A es Cellini (inscripción falsa): D no debe ser Cellini (D debe ser Bellini).
            *   Conclusión parcial: A y D tienen autores diferentes.
        *   Inscripción D: "EL COFRE DE ORO [A] ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE ESTOS COFRES [A o D] ES OBRA DE UN HIJO O DE BELLINI O CELLINI".
            *   Formalización en Prolog: `inscripcion_verdadera_en(d, Estado, Pairings) :- get_partner(d, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado).` (Su pareja de oro [A] es Bellini). Esta formalización omite la segunda parte de la conjunción original.
            *   Si D es Bellini (inscripción verdadera): A debe ser Bellini.
            *   Si D es Cellini (inscripción falsa): A no debe ser Bellini (A debe ser Cellini).
            *   Conclusión parcial (según la formalización del código): A y D tienen el mismo autor.

3.  **Contradicción:** Las conclusiones de las inscripciones A y D (con la formalización actual de D) para la pareja (A,D) son contradictorias: A y D deben tener autores diferentes *y* A y D deben tener el mismo autor.

Este análisis manual, que sigue la lógica del código proporcionado, muestra por qué ninguna combinación de autores para A y D (siendo B y C Bellini y la pareja (C,B)) puede ser consistente. Dado que la configuración (A,B),(C,D) ya fue descartada, la formalización actual no permite ninguna solución.

**Análisis de los Errores Técnicos del Solver**

Como se mencionó, es probable que los "errores técnicos" reportados no sean fallos del motor Prolog en sí mismo, sino el resultado de no encontrar una rama de solución válida. En un espacio de búsqueda tan pequeño (32 estados), problemas como desbordamiento de pila o memoria son altamente improbables. La descripción sugiere más bien un fallo al probar todas las posibilidades sin encontrar un estado consistente, y cómo ese fallo se reporta en el entorno específico. No parece haber errores fundamentales en el uso de predicados básicos (`member`, `log_equiv` con argumentos adecuados, `\+`).

**Identificación de Posibles Errores en Premisas y Lógica**

1.  **Premisas del problema (texto original):** La frase "Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI" en la inscripción D es ambigua.
    *   Interpretación 1 (asumida por el código, implícitamente): La segunda parte de la conjunción ("POR LO MENOS UNO...") es siempre verdadera dado que los autores son Bellini o Cellini (los jefes de familia). Si los autores solo pueden ser Bellini o Cellini, entonces "obra de Bellini o Cellini" es siempre cierto para cualquier cofre. "Obra de un hijo" sería siempre falso. La disyunción "obra de un hijo O de Bellini O Cellini" sería `false OR true` = `true`. Por lo tanto, la inscripción D se reduciría lógicamente a "El cofre de oro es obra de un Bellini". Esta es la interpretación que formaliza el código actual, y que lleva a la inconsistencia.
    *   Interpretación 2 (probable para que el problema tenga solución): "un hijo o de Bellini o Cellini" podría referirse a la procedencia familiar de una manera que la segunda parte de la conjunción ("POR LO MENOS UNO...") *no* sea trivialmente verdadera. La estructura "un hijo o de X o Y" es un poco extraña en español. Podría significar "un hijo DE Bellini o DE Cellini". Si los autores son *solo* los jefes de familia (Bellini o Cellini, no sus hijos), entonces "obra de un hijo de Bellini o Cellini" sería *siempre falso*. En este caso, la segunda parte de la conjunción en la inscripción D sería siempre falsa. Una conjunción con una parte siempre falsa ("P Y Falso") es siempre falsa.
        *   Bajo esta interpretación, la inscripción D ("EL COFRE DE ORO ES OBRA DE UN BELLINI Y [algo siempre falso]") es una afirmación que es *siempre falsa*, independientemente de quién hizo el cofre de oro.

2.  **Premisas formuladas (código Prolog):** La cláusula `inscripcion_verdadera_en(d, Estado, Pairings)` formaliza la inscripción D basándose en la Interpretación 1 de la ambigüedad, que parece incorrecta si el problema original tiene solución.

3.  **Lógica implementada:** La lógica general de `es_estado_consistente` y `solucion` es correcta para verificar la consistencia de un estado dado las reglas. El problema no parece estar en la estructura del razonamiento, sino en las "reglas" (formalizaciones de inscripciones) que está utilizando.

4.  **Inconsistencias o contradicciones:** La formalización actual crea un conjunto inconsistente de reglas, lo que impide encontrar cualquier solución.

**Sugerencias Específicas de Mejora**

1.  **Premisas que podrían estar mal formuladas:** La cláusula `inscripcion_verdadera_en(d, Estado, Pairings)` es la principal candidata a ser incorrecta. Asumiendo la Interpretación 2 de la ambigüedad en la inscripción D ("la segunda parte es siempre falsa porque los autores son los jefes de familia, no los hijos"), entonces la inscripción D es una afirmación que siempre es falsa.
    *   **Corrección sugerida:** La cláusula `inscripcion_verdadera_en(d, Estado, Pairings)` debería modelar una proposición que nunca puede ser verdadera. En Prolog, esto se logra simplemente haciendo que el predicado siempre falle.

2.  **Mejoras en la lógica de razonamiento:** La estructura de razonamiento principal (probar estados y verificar consistencia) es adecuada. La mejora clave es corregir la formalización de la inscripción D para que refleje la interpretación que permite una solución.

3.  **Resolución de inconsistencias:** Corregir la formalización de la inscripción D debería eliminar la inconsistencia lógica en el conjunto de cláusulas y permitir que el solver encuentre la solución existente.

4.  **Soluciones para los errores técnicos detectados:** Si los errores reportados eran un síntoma de la falta de soluciones, corregir la lógica debería hacer que el solver encuentre la solución y termine normalmente (reportando la solución encontrada, no un error). Si los errores persisten después de la corrección, se necesitaría un análisis más profundo del entorno específico del solver.

**Recomendaciones para Futuras Iteraciones**

*   Siempre que un problema provenga de una traducción o contenga frases ambiguas, intente identificar la interpretación que hace el problema soluble, especialmente si se sabe que una solución existe.
*   Realice un pequeño análisis manual (como el que hicimos para B, A y D) para deducir algunas condiciones necesarias (como B=Bellini y C=Bellini en este caso) antes de la formalización completa, ya que esto puede ayudar a verificar si la formalización inicial es prometedora.
*   Al formalizar conjunciones "P Y Q", asegúrese de que tanto P como Q estén correctamente representados, y considere si alguna parte podría ser trivialmente verdadera o falsa en el contexto del problema.

**Programa Prolog Corregido**

Basándonos en la deducción de que la inscripción D es siempre falsa (bajo la interpretación de la segunda parte de la conjunción como siempre falsa, lo que hace el problema soluble), modificamos la cláusula correspondiente.

```prolog
% Hechos: Autores posibles
autor(bellini).
autor(cellini).

% Hechos: Cofres y su material
cofre(a, oro).
cofre(b, plata).
cofre(c, oro).
cofre(d, plata).

% Posibles configuraciones de parejas
% Hay dos cofres de oro (A, C) y dos de plata (B, D).
% Un juego es una pareja de 1 oro y 1 plata.
% Las dos posibles configuraciones de dos juegos son:
% 1. A con B, C con D
% 2. A con D, C con B
posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]]).

% Definición de operador de equivalencia lógica (A <=> B)
% Se cumple si A y B son ambos verdaderos o ambos falsos.
:- op(700, xfy, log_equiv).
A log_equiv B :- (A, B) ; (\+ A, \+ B).

% Predicados de ayuda:
% get_partner(Cofre, Partner, Pairings) - Encuentra la pareja de Cofre en la configuración Pairings
get_partner(Cofre, Partner, Pairings) :- member((Cofre, Partner), Pairings).
get_partner(Cofre, Partner, Pairings) :- member((Partner, Cofre), Pairings).

% get_autor(Cofre, Autor, Estado) - Obtiene el autor de Cofre en el Estado dado
% Estado es una lista de la forma [cofre(nombre, autor), ...]
get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).

% Predicados que definen cuándo es verdadera la inscripción de cada cofre
% inscripcion_verdadera_en(Cofre, Estado, Pairings)
% Estado es la asignación de autores a cofres: [cofre(a,A), cofre(b,B), cofre(c,C), cofre(d,D)]
% Pairings es la configuración de parejas actual: e.g., [(a,d),(c,b)]

% Inscripción A (Oro): "EL COFRE DE PLATA ES OBRA DE UN CELLINI"
% (Se refiere a su pareja de plata)
inscripcion_verdadera_en(a, Estado, Pairings) :-
    get_partner(a, SilverPartner, Pairings), % Encuentra el cofre de plata pareja de A
    get_autor(SilverPartner, cellini, Estado). % Verifica si el autor de ese cofre es Cellini

% Inscripción B (Plata): "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI"
% (Se refiere a sí mismo [B] y su pareja de oro)
inscripcion_verdadera_en(b, Estado, Pairings) :-
    get_autor(b, cellini, Estado) ; % B es obra de Cellini
    ( get_partner(b, GoldPartner, Pairings), % O su pareja de oro (GoldPartner)
      get_autor(b, bellini, Estado), % Y B es obra de Bellini
      get_autor(GoldPartner, bellini, Estado) % Y GoldPartner es obra de Bellini
    ).

% Inscripción C (Oro): "EL COFRE DE ORO ES OBRA DE UN BELLINI"
% (Se refiere a sí mismo [C])
inscripcion_verdadera_en(c, Estado, Pairings) :-
    get_autor(c, bellini, Estado). % C es obra de Bellini

% Inscripción D (Plata): "EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI"
% (Se refiere a su pareja de oro y una condición sobre la procedencia familiar)
% Interpretación: La segunda parte ("POR LO MENOS UNO...") es siempre Falsa si los autores son solo los jefes de familia y "un hijo de Bellini o Cellini" significa un descendiente distinto del jefe.
% Si la segunda parte es siempre Falsa, la conjunción completa es siempre Falsa.
% Por lo tanto, la inscripción D es una proposición que nunca es verdadera.
inscripcion_verdadera_en(d, _, _) :- fail. % La inscripción de D es siempre Falsa.

% Predicado para verificar si una asignación de autores y una configuración de parejas es consistente
% Un estado es consistente si, para cada cofre, la regla del autor (Bellini=Verdadero, Cellini=Falso)
% es lógicamente equivalente a la verdad de su inscripción.
es_estado_consistente(Estado, Pairings) :-
    get_autor(a, AutorA, Estado),
    (AutorA = bellini) log_equiv inscripcion_verdadera_en(a, Estado, Pairings),
    get_autor(b, AutorB, Estado),
    (AutorB = bellini) log_equiv inscripcion_verdadera_en(b, Estado, Pairings),
    get_autor(c, AutorC, Estado),
    (AutorC = bellini) log_equiv inscripcion_verdadera_en(c, Estado, Pairings),
    get_autor(d, AutorD, Estado),
    (AutorD = bellini) log_equiv inscripcion_verdadera_en(d, Estado, Pairings).

% Predicado para encontrar la solución: una asignación de autores y una configuración de parejas
solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :-
    posibles_parejas(AllPairings), % Iterar sobre las posibles configuraciones de parejas
    member(Pairings, AllPairings),
    % Iterar sobre todas las posibles asignaciones de autores
    member(AutorA, [bellini, cellini]),
    member(AutorB, [bellini, cellini]),
    member(AutorC, [bellini, cellini]),
    member(AutorD, [bellini, cellini]),
    % Construir el estado actual
    Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)],
    % Verificar si este estado y configuración son consistentes con las reglas
    es_estado_consistente(Estado, Pairings).
```

**Comentario sobre el Resultado Esperado del Programa**

Al ejecutar el predicado `solucion(AutorA, AutorB, AutorC, AutorD, Pairings)` en un intérprete Prolog, se espera que el programa explore el espacio de búsqueda de 32 estados posibles (2 configuraciones de parejas * 16 combinaciones de autores). Para cada estado, evaluará la consistencia utilizando las reglas de Bellini/Cellini y las inscripciones formalizadas.

Basado en el análisis manual con la corrección propuesta para la inscripción D (siempre falsa), se espera que el programa encuentre exactamente una combinación de autores para A, B, C, y D, junto con una de las configuraciones de parejas, que satisfaga todas las condiciones. Se espera que esta solución sea:

*   Autor de A: Bellini
*   Autor de B: Bellini
*   Autor de C: Bellini
*   Autor de D: Cellini
*   Parejas: (A,D) y (C,B)

El programa Prolog corregido debería terminar exitosamente y proporcionar esta única solución al hacer la consulta.

Espero que este análisis detallado y el código corregido sean de gran ayuda para comprender y resolver el problema.

-------------------------------------------------------------------


INFO: Checkpoint guardado: checkpoints/mmrc_result_cycle2_Recordamos_que_Bellini_siempre_ponía_a_sus_cofres_.pkl

=== RESULTADO DEL ANÁLISIS MMRC ===
❌ NO SE ENCONTRÓ SOLUCIÓN - ANÁLISIS DE ERRORES


-------------------------------------------------------------------

--- Pregunta a Gemini JSON (general) ---
Prompt: 
        Hola, basándote en tu respuesta anterior sobre el problema de lógica, necesito que extraigas y estructures la información de la siguiente manera en un formato JSON:

        El JSON debe tener tres claves principales en el nivel raíz:

        "facts": Un array de strings, donde cada string es un hecho Prolog completo tal como lo definiste.
        "rules": Un array de strings, donde cada string es una regla Prolog completa tal como la definiste.
        "objective": Un string que represente la consulta principal de Prolog que se usaría para obtener la solución (por ejemplo, solucion(Tweedledum, Tweedledee).).

        Consejos importantes para asegurar la compatibilidad con Prolog al generar los strings de hechos y reglas:
            Átomos: Los nombres de predicados y las constantes (átomos) en Prolog deben comenzar con una letra minúscula. Si un átomo necesita contener espacios, caracteres especiales, o comenzar con una letra mayúscula, debe ir entre comillas simples (ej: 'Yo soy Fidel', 'Luna').
            Variables: Las variables en Prolog siempre comienzan con una letra mayúscula o un guion bajo (ej: Dia, Hermano, _Ignorado).
            Sintaxis de Hechos: Asegúrate de que cada hecho termine con un punto (.). Ejemplo: miente_leon(lunes).
            Sintaxis de Reglas: Las reglas deben seguir el formato cabeza :- cuerpo., donde cabeza es la conclusión, :- significa "si", y cuerpo puede ser una o más metas separadas por comas (,) que representan una conjunción lógica. Cada regla debe terminar con un punto (.). Ejemplo: dice_verdad(leon, Dia) :- + miente_leon(Dia).
            Strings dentro de Prolog: Las frases como "Yo soy Fidel" deben ser tratadas como átomos en Prolog, es decir, encerradas en comillas simples si contienen espacios o mayúsculas no iniciales (ej: 'Yo soy Fidel').
            Escapado en JSON: Dado que los hechos y reglas de Prolog serán strings dentro de un JSON, si alguna vez usaras comillas dobles dentro de tu código Prolog (lo cual es menos común para átomos que las comillas simples), necesitarían ser escapadas (") dentro del string JSON. Usar comillas simples para los átomos Prolog evita este problema. Las barras invertidas () en Prolog (como en + para negación) son caracteres válidos y no necesitan doble escapado a menos que el propio string JSON lo requiera para el carácter .
            Los símbolos correctos de prolog son: \+ para negación, :- para implicación, ; para disyunción, . para final de cláusula, = para unificación, \= para desigualdad.
            Evita usar el \ innecesariamente puesto a que por si solo es un error de sintaxis

        Problema original:
            
    Recordamos que Bellini siempre ponía a sus cofres inscripciones verdaderas, mientras que Cellini siempre les ponía inscripciones falsas.En algunos museos podemos ver parejas de cofres —uno de oro y otro de plata— que en un principio se hicieron y se vendieron como juego. La verdad es que la familia Bellini y la Cellini eran íntimas y que a veces colaboraban en algunas de estas parejas; aunque cada cofre lo hiciera siempre una sola persona, dentro de la pareja un cofre podía hacerlo uno y el otro otro diferente. Ambas familias se divertían muchísimo haciendo estas parejas de manera que la inteligente posteridad pudiera adivinar —o adivinar parcialmente— quiénes habían sido los autores.  Habían aparecido cuatro cofres, dos de oro y dos de plata; se sabía que constituían dos juegos, pero se habían mezclado y ahora no se sabía qué cofre de oro y qué cofre de plata formaban pareja. Me los enseñaron y pronto pude resolver el problema por lo que recibí unos excelentes honorarios. Pero además pude establecer también quién había hecho cada cofre, por lo que recibí un extra (que consistía, entre otras cosas, en una excelente caja de botellas de Chianti) y un beso de una de las florentinas más maravillosas que haya existido nunca He aquí los cuatro cofres:
    Cofre A (Oro)
    EL COFRE DE PLATA ES OBRA DE UN CELLINI
    Cofre B (Plata)
    EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON
    DE BELLINI
    Cofre C (Oro)
    EL COFRE DE ORO ES OBRA DE UN BELLINI
    Cofre D (Plata)
    EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE
    ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI

    Tenemos ahora un problema:
    ¿Quién hizo cada uno de los cofres?
    

        Por favor, procesa la siguiente respuesta tuya y genera el JSON:
        Tu respuesta: 
            ¡Excelente! Como experto en lógica y razonamiento, es fascinante abordar este tipo de problemas donde la formalización precisa del lenguaje natural en lógica es crucial. Analicemos por qué el programa Prolog proporcionado no pudo resolver el problema.

**Diagnóstico del Problema Principal**

El problema principal radica en la formalización lógica de una de las inscripciones, específicamente la del Cofre D, dentro del código Prolog proporcionado. La interpretación plasmada en la cláusula `inscripcion_verdadera_en(d, Estado, Pairings)` parece no corresponder con la interpretación necesaria para que el problema tenga una solución única, tal como sugiere la descripción del narrador al haber resuelto el acertijo y recibido honorarios y un beso.

La formalización actual de la inscripción del Cofre D, combinada con las otras reglas y la estructura del problema, conduce a una situación lógicamente inconsistente (ninguna combinación de autores y parejas satisface todas las condiciones simultáneamente). Esto explica por qué el solver no encontró ninguna solución y reportó que todas las ramas de pensamiento fallaron. Los "errores técnicos" reportados probablemente no fueron errores de ejecución fatales en el código básico de Prolog, sino más bien una indicación de que el proceso de búsqueda se agotó sin encontrar un estado válido, lo cual, en algunos entornos, podría manifestarse como un tipo de error o advertencia, o simplemente una señal de que la consulta falló.

**Análisis Detallado de las Ramas Más Prometedoras**

Dado que el sistema reportó que "Todas las ramas de pensamiento terminaron sin éxito" y no proporcionó ramas específicas "más prometedoras", el análisis debe basarse en la estructura del problema y las cláusulas proporcionadas. La estrategia del programa `solucion/5` es generar todas las posibles asignaciones de autores (2^4 = 16 combinaciones) para cada una de las dos posibles configuraciones de parejas (2 configuraciones), resultando en 32 estados posibles. Para cada estado (asignación de autores + configuración de parejas), se verifica la consistencia utilizando `es_estado_consistente/2`.

La falta de éxito en *todas* las ramas generadas significa que *ninguno* de los 32 estados posibles satisface la condición `es_estado_consistente(Estado, Pairings)`. Esto, a su vez, significa que, para cada estado, al menos una de las equivalencias lógicas `(AutorX = bellini) log_equiv inscripcion_verdadera_en(X, Estado, Pairings)` resultó ser falsa.

Un análisis manual del problema con las inscripciones tal como se formalizan en el código (y asumiendo la regla estándar Bellini=Verdadero, Cellini=Falso) revela lo siguiente:

1.  **Análisis de la inscripción B:** "EL COFRE DE PLATA [B] O ES OBRA DE UN CELLINI O LOS DOS COFRES [B y su pareja de oro] SON DE BELLINI".
    *   Formalización en Prolog: `inscripcion_verdadera_en(b, Estado, Pairings) :- get_autor(b, cellini, Estado) ; ( get_partner(b, GoldPartner, Pairings), get_autor(b, bellini, Estado), get_autor(GoldPartner, bellini, Estado) ).` (B es Cellini) OR (B es Bellini Y su pareja es Bellini).
    *   Regla de B: (Autor de B = bellini) <=> Inscripción de B es verdadera.
    *   Si Autor de B es Cellini (regla exige inscripción falsa): La inscripción sería `(true) OR (...)` = `true`. Esto contradice la regla que exige que sea falsa. Por lo tanto, el Autor de B *no puede* ser Cellini.
    *   Si Autor de B es Bellini (regla exige inscripción verdadera): La inscripción sería `(false) OR (true Y su pareja es Bellini)` = `su pareja es Bellini`. Para que la inscripción sea verdadera, su pareja *debe* ser Bellini.
    *   **Deducción clave:** El Cofre B debe ser obra de Bellini, y su pareja (un cofre de oro) también debe ser obra de Bellini.

2.  **Aplicación de la deducción a las posibles parejas:**
    *   Posibilidad 1: Parejas son (A,B) y (C,D). El cofre de oro pareja de B es A. La deducción exige A y B son Bellini.
        *   A (Oro, Bellini): Inscripción "EL COFRE DE PLATA ES OBRA DE UN CELLINI". Su pareja (B) es Bellini. La inscripción es falsa. Pero A es Bellini, su inscripción debe ser verdadera. Contradicción.
        *   Esta configuración de parejas (A,B) y (C,D) es imposible bajo las reglas.
    *   Posibilidad 2: Parejas son (A,D) y (C,B). El cofre de oro pareja de B es C. La deducción exige C y B son Bellini.
        *   Autores parciales: B=Bellini, C=Bellini. Parejas: (A,D) y (C,B).
        *   C (Oro, Bellini, pareja de B): Inscripción "EL COFRE DE ORO ES OBRA DE UN BELLINI". Se refiere a sí mismo (C). C es Bellini. La inscripción es verdadera. Consistente con C ser Bellini.
        *   B (Plata, Bellini, pareja de C): Inscripción "EL COFRE DE PLATA [B] O ES OBRA DE UN CELLINI O LOS DOS COFRES [B y C] SON DE BELLINI". B es Bellini, C es Bellini. La inscripción es `false OR (true AND true)` = `true`. Consistente con B ser Bellini.
        *   Ahora consideremos la pareja (A,D). Autores A y D desconocidos aún. A es Oro, D es Plata.
        *   Inscripción A: "EL COFRE DE PLATA [D] ES OBRA DE UN CELLINI".
            *   Si A es Bellini (inscripción verdadera): D debe ser Cellini.
            *   Si A es Cellini (inscripción falsa): D no debe ser Cellini (D debe ser Bellini).
            *   Conclusión parcial: A y D tienen autores diferentes.
        *   Inscripción D: "EL COFRE DE ORO [A] ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE ESTOS COFRES [A o D] ES OBRA DE UN HIJO O DE BELLINI O CELLINI".
            *   Formalización en Prolog: `inscripcion_verdadera_en(d, Estado, Pairings) :- get_partner(d, GoldPartner, Pairings), get_autor(GoldPartner, bellini, Estado).` (Su pareja de oro [A] es Bellini). Esta formalización omite la segunda parte de la conjunción original.
            *   Si D es Bellini (inscripción verdadera): A debe ser Bellini.
            *   Si D es Cellini (inscripción falsa): A no debe ser Bellini (A debe ser Cellini).
            *   Conclusión parcial (según la formalización del código): A y D tienen el mismo autor.

3.  **Contradicción:** Las conclusiones de las inscripciones A y D (con la formalización actual de D) para la pareja (A,D) son contradictorias: A y D deben tener autores diferentes *y* A y D deben tener el mismo autor.

Este análisis manual, que sigue la lógica del código proporcionado, muestra por qué ninguna combinación de autores para A y D (siendo B y C Bellini y la pareja (C,B)) puede ser consistente. Dado que la configuración (A,B),(C,D) ya fue descartada, la formalización actual no permite ninguna solución.

**Análisis de los Errores Técnicos del Solver**

Como se mencionó, es probable que los "errores técnicos" reportados no sean fallos del motor Prolog en sí mismo, sino el resultado de no encontrar una rama de solución válida. En un espacio de búsqueda tan pequeño (32 estados), problemas como desbordamiento de pila o memoria son altamente improbables. La descripción sugiere más bien un fallo al probar todas las posibilidades sin encontrar un estado consistente, y cómo ese fallo se reporta en el entorno específico. No parece haber errores fundamentales en el uso de predicados básicos (`member`, `log_equiv` con argumentos adecuados, `\+`).

**Identificación de Posibles Errores en Premisas y Lógica**

1.  **Premisas del problema (texto original):** La frase "Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI" en la inscripción D es ambigua.
    *   Interpretación 1 (asumida por el código, implícitamente): La segunda parte de la conjunción ("POR LO MENOS UNO...") es siempre verdadera dado que los autores son Bellini o Cellini (los jefes de familia). Si los autores solo pueden ser Bellini o Cellini, entonces "obra de Bellini o Cellini" es siempre cierto para cualquier cofre. "Obra de un hijo" sería siempre falso. La disyunción "obra de un hijo O de Bellini O Cellini" sería `false OR true` = `true`. Por lo tanto, la inscripción D se reduciría lógicamente a "El cofre de oro es obra de un Bellini". Esta es la interpretación que formaliza el código actual, y que lleva a la inconsistencia.
    *   Interpretación 2 (probable para que el problema tenga solución): "un hijo o de Bellini o Cellini" podría referirse a la procedencia familiar de una manera que la segunda parte de la conjunción ("POR LO MENOS UNO...") *no* sea trivialmente verdadera. La estructura "un hijo o de X o Y" es un poco extraña en español. Podría significar "un hijo DE Bellini o DE Cellini". Si los autores son *solo* los jefes de familia (Bellini o Cellini, no sus hijos), entonces "obra de un hijo de Bellini o Cellini" sería *siempre falso*. En este caso, la segunda parte de la conjunción en la inscripción D sería siempre falsa. Una conjunción con una parte siempre falsa ("P Y Falso") es siempre falsa.
        *   Bajo esta interpretación, la inscripción D ("EL COFRE DE ORO ES OBRA DE UN BELLINI Y [algo siempre falso]") es una afirmación que es *siempre falsa*, independientemente de quién hizo el cofre de oro.

2.  **Premisas formuladas (código Prolog):** La cláusula `inscripcion_verdadera_en(d, Estado, Pairings)` formaliza la inscripción D basándose en la Interpretación 1 de la ambigüedad, que parece incorrecta si el problema original tiene solución.

3.  **Lógica implementada:** La lógica general de `es_estado_consistente` y `solucion` es correcta para verificar la consistencia de un estado dado las reglas. El problema no parece estar en la estructura del razonamiento, sino en las "reglas" (formalizaciones de inscripciones) que está utilizando.

4.  **Inconsistencias o contradicciones:** La formalización actual crea un conjunto inconsistente de reglas, lo que impide encontrar cualquier solución.

**Sugerencias Específicas de Mejora**

1.  **Premisas que podrían estar mal formuladas:** La cláusula `inscripcion_verdadera_en(d, Estado, Pairings)` es la principal candidata a ser incorrecta. Asumiendo la Interpretación 2 de la ambigüedad en la inscripción D ("la segunda parte es siempre falsa porque los autores son los jefes de familia, no los hijos"), entonces la inscripción D es una afirmación que siempre es falsa.
    *   **Corrección sugerida:** La cláusula `inscripcion_verdadera_en(d, Estado, Pairings)` debería modelar una proposición que nunca puede ser verdadera. En Prolog, esto se logra simplemente haciendo que el predicado siempre falle.

2.  **Mejoras en la lógica de razonamiento:** La estructura de razonamiento principal (probar estados y verificar consistencia) es adecuada. La mejora clave es corregir la formalización de la inscripción D para que refleje la interpretación que permite una solución.

3.  **Resolución de inconsistencias:** Corregir la formalización de la inscripción D debería eliminar la inconsistencia lógica en el conjunto de cláusulas y permitir que el solver encuentre la solución existente.

4.  **Soluciones para los errores técnicos detectados:** Si los errores reportados eran un síntoma de la falta de soluciones, corregir la lógica debería hacer que el solver encuentre la solución y termine normalmente (reportando la solución encontrada, no un error). Si los errores persisten después de la corrección, se necesitaría un análisis más profundo del entorno específico del solver.

**Recomendaciones para Futuras Iteraciones**

*   Siempre que un problema provenga de una traducción o contenga frases ambiguas, intente identificar la interpretación que hace el problema soluble, especialmente si se sabe que una solución existe.
*   Realice un pequeño análisis manual (como el que hicimos para B, A y D) para deducir algunas condiciones necesarias (como B=Bellini y C=Bellini en este caso) antes de la formalización completa, ya que esto puede ayudar a verificar si la formalización inicial es prometedora.
*   Al formalizar conjunciones "P Y Q", asegúrese de que tanto P como Q estén correctamente representados, y considere si alguna parte podría ser trivialmente verdadera o falsa en el contexto del problema.

**Programa Prolog Corregido**

Basándonos en la deducción de que la inscripción D es siempre falsa (bajo la interpretación de la segunda parte de la conjunción como siempre falsa, lo que hace el problema soluble), modificamos la cláusula correspondiente.

```prolog
% Hechos: Autores posibles
autor(bellini).
autor(cellini).

% Hechos: Cofres y su material
cofre(a, oro).
cofre(b, plata).
cofre(c, oro).
cofre(d, plata).

% Posibles configuraciones de parejas
% Hay dos cofres de oro (A, C) y dos de plata (B, D).
% Un juego es una pareja de 1 oro y 1 plata.
% Las dos posibles configuraciones de dos juegos son:
% 1. A con B, C con D
% 2. A con D, C con B
posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]]).

% Definición de operador de equivalencia lógica (A <=> B)
% Se cumple si A y B son ambos verdaderos o ambos falsos.
:- op(700, xfy, log_equiv).
A log_equiv B :- (A, B) ; (\+ A, \+ B).

% Predicados de ayuda:
% get_partner(Cofre, Partner, Pairings) - Encuentra la pareja de Cofre en la configuración Pairings
get_partner(Cofre, Partner, Pairings) :- member((Cofre, Partner), Pairings).
get_partner(Cofre, Partner, Pairings) :- member((Partner, Cofre), Pairings).

% get_autor(Cofre, Autor, Estado) - Obtiene el autor de Cofre en el Estado dado
% Estado es una lista de la forma [cofre(nombre, autor), ...]
get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).

% Predicados que definen cuándo es verdadera la inscripción de cada cofre
% inscripcion_verdadera_en(Cofre, Estado, Pairings)
% Estado es la asignación de autores a cofres: [cofre(a,A), cofre(b,B), cofre(c,C), cofre(d,D)]
% Pairings es la configuración de parejas actual: e.g., [(a,d),(c,b)]

% Inscripción A (Oro): "EL COFRE DE PLATA ES OBRA DE UN CELLINI"
% (Se refiere a su pareja de plata)
inscripcion_verdadera_en(a, Estado, Pairings) :-
    get_partner(a, SilverPartner, Pairings), % Encuentra el cofre de plata pareja de A
    get_autor(SilverPartner, cellini, Estado). % Verifica si el autor de ese cofre es Cellini

% Inscripción B (Plata): "EL COFRE DE PLATA O ES OBRA DE UN CELLINI O LOS DOS COFRES SON DE BELLINI"
% (Se refiere a sí mismo [B] y su pareja de oro)
inscripcion_verdadera_en(b, Estado, Pairings) :-
    get_autor(b, cellini, Estado) ; % B es obra de Cellini
    ( get_partner(b, GoldPartner, Pairings), % O su pareja de oro (GoldPartner)
      get_autor(b, bellini, Estado), % Y B es obra de Bellini
      get_autor(GoldPartner, bellini, Estado) % Y GoldPartner es obra de Bellini
    ).

% Inscripción C (Oro): "EL COFRE DE ORO ES OBRA DE UN BELLINI"
% (Se refiere a sí mismo [C])
inscripcion_verdadera_en(c, Estado, Pairings) :-
    get_autor(c, bellini, Estado). % C es obra de Bellini

% Inscripción D (Plata): "EL COFRE DE ORO ES OBRA DE UN BELLINI Y POR LO MENOS UNO DE ESTOS COFRES ES OBRA DE UN HIJO O DE BELLINI O CELLINI"
% (Se refiere a su pareja de oro y una condición sobre la procedencia familiar)
% Interpretación: La segunda parte ("POR LO MENOS UNO...") es siempre Falsa si los autores son solo los jefes de familia y "un hijo de Bellini o Cellini" significa un descendiente distinto del jefe.
% Si la segunda parte es siempre Falsa, la conjunción completa es siempre Falsa.
% Por lo tanto, la inscripción D es una proposición que nunca es verdadera.
inscripcion_verdadera_en(d, _, _) :- fail. % La inscripción de D es siempre Falsa.

% Predicado para verificar si una asignación de autores y una configuración de parejas es consistente
% Un estado es consistente si, para cada cofre, la regla del autor (Bellini=Verdadero, Cellini=Falso)
% es lógicamente equivalente a la verdad de su inscripción.
es_estado_consistente(Estado, Pairings) :-
    get_autor(a, AutorA, Estado),
    (AutorA = bellini) log_equiv inscripcion_verdadera_en(a, Estado, Pairings),
    get_autor(b, AutorB, Estado),
    (AutorB = bellini) log_equiv inscripcion_verdadera_en(b, Estado, Pairings),
    get_autor(c, AutorC, Estado),
    (AutorC = bellini) log_equiv inscripcion_verdadera_en(c, Estado, Pairings),
    get_autor(d, AutorD, Estado),
    (AutorD = bellini) log_equiv inscripcion_verdadera_en(d, Estado, Pairings).

% Predicado para encontrar la solución: una asignación de autores y una configuración de parejas
solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :-
    posibles_parejas(AllPairings), % Iterar sobre las posibles configuraciones de parejas
    member(Pairings, AllPairings),
    % Iterar sobre todas las posibles asignaciones de autores
    member(AutorA, [bellini, cellini]),
    member(AutorB, [bellini, cellini]),
    member(AutorC, [bellini, cellini]),
    member(AutorD, [bellini, cellini]),
    % Construir el estado actual
    Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)],
    % Verificar si este estado y configuración son consistentes con las reglas
    es_estado_consistente(Estado, Pairings).
```

**Comentario sobre el Resultado Esperado del Programa**

Al ejecutar el predicado `solucion(AutorA, AutorB, AutorC, AutorD, Pairings)` en un intérprete Prolog, se espera que el programa explore el espacio de búsqueda de 32 estados posibles (2 configuraciones de parejas * 16 combinaciones de autores). Para cada estado, evaluará la consistencia utilizando las reglas de Bellini/Cellini y las inscripciones formalizadas.

Basado en el análisis manual con la corrección propuesta para la inscripción D (siempre falsa), se espera que el programa encuentre exactamente una combinación de autores para A, B, C, y D, junto con una de las configuraciones de parejas, que satisfaga todas las condiciones. Se espera que esta solución sea:

*   Autor de A: Bellini
*   Autor de B: Bellini
*   Autor de C: Bellini
*   Autor de D: Cellini
*   Parejas: (A,D) y (C,B)

El programa Prolog corregido debería terminar exitosamente y proporcionar esta única solución al hacer la consulta.

Espero que este análisis detallado y el código corregido sean de gran ayuda para comprender y resolver el problema.
        

-------------------------------------------------------------------

-------------------------------------------------------------------
Respuesta JSON de Gemini: {
  "facts": [
    "autor(bellini).",
    "autor(cellini).",
    "cofre(a, oro).",
    "cofre(b, plata).",
    "cofre(c, oro).",
    "cofre(d, plata).",
    "posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]])."
  ],
  "rules": [
    ":- op(700, xfy, log_equiv).",
    "A log_equiv B :- (A, B) ; (\\+ A, \\+ B).",
    "get_partner(Cofre, Partner, Pairings) :- member((Cofre, Partner), Pairings).",
    "get_partner(Cofre, Partner, Pairings) :- member((Partner, Cofre), Pairings).",
    "get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).",
    "inscripcion_verdadera_en(a, Estado, Pairings) :- get_partner(a, SilverPartner, Pairings), get_autor(SilverPartner, cellini, Estado).",
    "inscripcion_verdadera_en(b, Estado, Pairings) :- get_autor(b, cellini, Estado) ; ( get_partner(b, GoldPartner, Pairings), get_autor(b, bellini, Estado), get_autor(GoldPartner, bellini, Estado) ).",
    "inscripcion_verdadera_en(c, Estado, Pairings) :- get_autor(c, bellini, Estado).",
    "inscripcion_verdadera_en(d, _, _) :- fail.",
    "es_estado_consistente(Estado, Pairings) :- get_autor(a, AutorA, Estado), (AutorA = bellini) log_equiv inscripcion_verdadera_en(a, Estado, Pairings), get_autor(b, AutorB, Estado), (AutorB = bellini) log_equiv inscripcion_verdadera_en(b, Estado, Pairings), get_autor(c, AutorC, Estado), (AutorC = bellini) log_equiv inscripcion_verdadera_en(c, Estado, Pairings), get_autor(d, AutorD, Estado), (AutorD = bellini) log_equiv inscripcion_verdadera_en(d, Estado, Pairings).",
    "solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :- posibles_parejas(AllPairings), member(Pairings, AllPairings), member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], es_estado_consistente(Estado, Pairings)."
  ],
  "objetive": [
    "solucion(AutorA, AutorB, AutorC, AutorD, Pairings)."
  ]
}

-------------------------------------------------------------------


MFSA: Cláusulas del Problema Extraídas: 18

--- Cláusulas Extraídas ---

Cláusulas Objetivo:
- solucion(AutorA, AutorB, AutorC, AutorD, Pairings).

Cláusulas del Problema:
- autor(bellini).
- autor(cellini).
- cofre(a, oro).
- cofre(b, plata).
- cofre(c, oro).
- cofre(d, plata).
- posibles_parejas([[(a,b),(c,d)], [(a,d),(c,b)]]).
- :- op(700, xfy, log_equiv).
- A log_equiv B :- (A, B) ; (\+ A, \+ B).
- get_partner(Cofre, Partner, Pairings) :- member((Cofre, Partner), Pairings).
- get_partner(Cofre, Partner, Pairings) :- member((Partner, Cofre), Pairings).
- get_autor(Cofre, Autor, Estado) :- member(cofre(Cofre, Autor), Estado).
- inscripcion_verdadera_en(a, Estado, Pairings) :- get_partner(a, SilverPartner, Pairings), get_autor(SilverPartner, cellini, Estado).
- inscripcion_verdadera_en(b, Estado, Pairings) :- get_autor(b, cellini, Estado) ; ( get_partner(b, GoldPartner, Pairings), get_autor(b, bellini, Estado), get_autor(GoldPartner, bellini, Estado) ).
- inscripcion_verdadera_en(c, Estado, Pairings) :- get_autor(c, bellini, Estado).
- inscripcion_verdadera_en(d, _, _) :- fail.
- es_estado_consistente(Estado, Pairings) :- get_autor(a, AutorA, Estado), (AutorA = bellini) log_equiv inscripcion_verdadera_en(a, Estado, Pairings), get_autor(b, AutorB, Estado), (AutorB = bellini) log_equiv inscripcion_verdadera_en(b, Estado, Pairings), get_autor(c, AutorC, Estado), (AutorC = bellini) log_equiv inscripcion_verdadera_en(c, Estado, Pairings), get_autor(d, AutorD, Estado), (AutorD = bellini) log_equiv inscripcion_verdadera_en(d, Estado, Pairings).
- solucion(AutorA, AutorB, AutorC, AutorD, Pairings) :- posibles_parejas(AllPairings), member(Pairings, AllPairings), member(AutorA, [bellini, cellini]), member(AutorB, [bellini, cellini]), member(AutorC, [bellini, cellini]), member(AutorD, [bellini, cellini]), Estado = [cofre(a, AutorA), cofre(b, AutorB), cofre(c, AutorC), cofre(d, AutorD)], es_estado_consistente(Estado, Pairings).

Axiomas Base:
--- Formalización Completada ---
KR-Store:
  Axiomas Base: 0
  Cláusulas del Problema: 18
  Cláusulas Objetivo: 1

TODOS LOS PROBLEMAS CONFIGURADOS PROCESADOS.
